// -- CLEAN INTERPOLATION MODEL --
// 1. Quoted strings ("", '', ``): Literal content, no interpolation
// 2. Single brackets []: @var interpolation for paths/commands
// 3. Double brackets [[]]: {{var}} interpolation for templates

// -------------------------------------------------------------
// QUOTED STRING LITERALS - No variable interpolation
// -------------------------------------------------------------

// Common literal string rule for all quote types (", ', `)
LiteralStringContent "String literal content without interpolation"
  = chars:$((!('"' / "'" / '`') .) / ('\\' .))* {
      // Create a single Text node with the entire content string
      return [helpers.createNode(NodeType.Text, { content: chars }, location())];
    }

// String literal with quotes - no interpolation
// The quotes are matched but NOT included in the content returned
LiteralString "Non-interpolated string literal"
  = '"' content:$((!('"' / "'" / '`') .) / ('\\' .))* '"' { 
      // Create a clean text node from the content without quotes
      return [helpers.createNode(NodeType.Text, { content }, location())]; 
    }
  / "'" content:$((!('"' / "'" / '`') .) / ('\\' .))* "'" { 
      return [helpers.createNode(NodeType.Text, { content }, location())]; 
    }
  / "`" content:$((!('"' / "'" / '`') .) / ('\\' .))* "`" { 
      return [helpers.createNode(NodeType.Text, { content }, location())]; 
    }

// -------------------------------------------------------------
// SINGLE BRACKET CONTENT - @var interpolation (for paths/commands)
// -------------------------------------------------------------

// Literal text segment within brackets
BracketLiteralSegment
  = chars:$(!(']' / '@') .)+ { 
      // Use $ to capture the whole segment as a string instead of individual characters
      return helpers.createNode(NodeType.Text, { content: chars }, location());
    }

// Path separator should be a distinct node in paths
PathSeparator
  = '/' { return helpers.createNode(NodeType.PathSeparator, { value: '/' }, location()); }

// Content inside single brackets - allows @var interpolation
BracketContent "Content allowing @var interpolation"
  = parts:(AtVar / BracketLiteralSegment / PathSeparator)+ {
      return parts;
    }
  / "" { return []; }

// Single bracket container - for @var interpolation
BracketContainer
  = '[' content:BracketContent ']' { return content; }

// -------------------------------------------------------------
// DOUBLE BRACKET CONTENT - {{var}} interpolation (for templates)
// -------------------------------------------------------------

// Literal text segment within double brackets
DoubleBracketLiteralSegment
  = chars:$(!(']]' / '{{') .)+ { 
      // Use $ to capture the whole segment as a string
      return helpers.createNode(NodeType.Text, { content: chars }, location());
    }

// Content inside double brackets - allows {{var}} interpolation
DoubleBracketContent "Content allowing {{var}} interpolation"
  = parts:(InterpolationVar / DoubleBracketLiteralSegment)+ {
      return parts;
    }
  / "" { return []; }

// Double bracket container - for {{var}} interpolation
DoubleBracketContainer
  = '[[' content:DoubleBracketContent ']]' { return content; }

// -------------------------------------------------------------
// PATH-SPECIFIC SYNTACTIC SUGAR
// -------------------------------------------------------------

// Special rule for paths without quotes/brackets (unquoted paths)
// This is syntactic sugar for common use cases
UnquotedPath "Unquoted path with @var interpolation"
  = parts:(AtVar / UnquotedPathSegment / PathSeparator)+ {
      return parts;
    }

UnquotedPathSegment
  = chars:$(![ \t\r\n] !(PathSeparator / '@' / '$') .)+ {
      // Use $ to capture the whole segment as a single string
      return helpers.createNode(NodeType.Text, { content: chars }, location());
    }

// -------------------------------------------------------------
// COMMAND-SPECIFIC SYNTACTIC SUGAR
// -------------------------------------------------------------

// Special rule for command lines without quotes/brackets
UnquotedCommand "Unquoted command with @var interpolation"
  = parts:(AtVar / UnquotedCommandSegment)+ {
      return parts;
    }

UnquotedCommandSegment
  = chars:$(![ \t\r\n;] !('@' / '$') .)+ {
      // Use $ to capture the whole segment as a single string
      return helpers.createNode(NodeType.Text, { content: chars }, location());
    }