// @generated by Peggy 4.2.0.
//
// https://peggyjs.org/

"use strict";

var NodeType = require("./deps/node-type.cjs");
var DirectiveKind = require("./deps/directive-kind.cjs");
var helpers = require("./deps/helpers.cjs");


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Start: peg$parseStart };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = ">>";
  var peg$c1 = "<<";
  var peg$c2 = "\n";
  var peg$c3 = "{{";
  var peg$c4 = "}}";
  var peg$c5 = "[[";
  var peg$c6 = "]]";
  var peg$c7 = "---";
  var peg$c8 = "\"";
  var peg$c9 = "'";
  var peg$c10 = "`";
  var peg$c11 = "-";
  var peg$c12 = ".";
  var peg$c13 = "true";
  var peg$c14 = "false";
  var peg$c15 = "null";
  var peg$c16 = "\\";
  var peg$c17 = "/";
  var peg$c18 = "#";
  var peg$c19 = "@data";
  var peg$c20 = "@text";
  var peg$c21 = "@run";
  var peg$c22 = "@add";
  var peg$c23 = "@path";
  var peg$c24 = "@import";
  var peg$c25 = "@exec";
  var peg$c26 = "@when";
  var peg$c27 = "\r\n";
  var peg$c28 = "|";
  var peg$c29 = "&&";
  var peg$c30 = "||";
  var peg$c31 = ";";
  var peg$c32 = "@";
  var peg$c33 = "run";
  var peg$c34 = "npx";
  var peg$c35 = "npm";
  var peg$c36 = "yarn";
  var peg$c37 = "pnpm";
  var peg$c38 = "bun";
  var peg$c39 = ":";
  var peg$c40 = "-m";
  var peg$c41 = "python";
  var peg$c42 = "python3";
  var peg$c43 = "python2";
  var peg$c44 = "node";
  var peg$c45 = "sh";
  var peg$c46 = "bash";
  var peg$c47 = "zsh";
  var peg$c48 = "perl";
  var peg$c49 = "ruby";
  var peg$c50 = "-e";
  var peg$c51 = "-c";
  var peg$c52 = "make";
  var peg$c53 = "cargo";
  var peg$c54 = "go";
  var peg$c55 = "gradle";
  var peg$c56 = "maven";
  var peg$c57 = "mvn";
  var peg$c58 = "rake";
  var peg$c59 = "(";
  var peg$c60 = ")";
  var peg$c61 = ",";
  var peg$c62 = "[";
  var peg$c63 = "]";
  var peg$c64 = "http";
  var peg$c65 = "s";
  var peg$c66 = "file";
  var peg$c67 = "//";
  var peg$c68 = "\\\\";
  var peg$c69 = "\\@";
  var peg$c70 = "{";
  var peg$c71 = "}";
  var peg$c72 = "m";
  var peg$c73 = "h";
  var peg$c74 = "d";
  var peg$c75 = "w";
  var peg$c76 = "live";
  var peg$c77 = "static";
  var peg$c78 = "trust";
  var peg$c79 = "always";
  var peg$c80 = "verify";
  var peg$c81 = "never";
  var peg$c82 = "[(";
  var peg$c83 = ")]";
  var peg$c84 = "@.";
  var peg$c85 = "frontmatter";
  var peg$c86 = "fm";
  var peg$c87 = "with";
  var peg$c88 = "pipeline";
  var peg$c89 = "needs";
  var peg$c90 = "from";
  var peg$c91 = "javascript";
  var peg$c92 = "js";
  var peg$c93 = "py";
  var peg$c94 = "=";
  var peg$c95 = "as";
  var peg$c96 = "under";
  var peg$c97 = "foreach";
  var peg$c98 = "risk.high";
  var peg$c99 = "risk.med";
  var peg$c100 = "risk.low";
  var peg$c101 = "risk";
  var peg$c102 = "about";
  var peg$c103 = "meta";
  var peg$c104 = "@input";
  var peg$c105 = "@stdin";
  var peg$c106 = "*";
  var peg$c107 = " as ";
  var peg$c108 = "@output";
  var peg$c109 = "PROJECTPATH";
  var peg$c110 = "add";
  var peg$c111 = "=>";
  var peg$c112 = "first";
  var peg$c113 = "all";
  var peg$c114 = "any";

  var peg$r0 = /^[ \t\r]/;
  var peg$r1 = /^[^\n]/;
  var peg$r2 = /^[ \t]/;
  var peg$r3 = /^[^`\r\n]/;
  var peg$r4 = /^[0-9]/;
  var peg$r5 = /^["'@[-\]`{}]/;
  var peg$r6 = /^[ \t\r\n\/\]@${{}"'`]/;
  var peg$r7 = /^[\/[\]@${}]/;
  var peg$r8 = /^[\]\/[\]@${}]/;
  var peg$r9 = /^[\]]/;
  var peg$r10 = /^[a-zA-Z_]/;
  var peg$r11 = /^[a-zA-Z0-9_]/;
  var peg$r12 = /^[.~]/;
  var peg$r13 = /^[ \t\r\n\u200B\u200C\u200D]/;
  var peg$r14 = /^[ \t\r\n]/;
  var peg$r15 = /^[ \t\r\u200B\u200C\u200D]/;
  var peg$r16 = /^[\r\u2028-\u2029]/;
  var peg$r17 = /^[^\r\n]/;
  var peg$r18 = /^[^@|&;[\]\n \t]/;
  var peg$r19 = /^[a-zA-Z0-9_\-]/;
  var peg$r20 = /^[a-zA-Z0-9_:\-]/;
  var peg$r21 = /^[a-zA-Z0-9_.\/\-]/;
  var peg$r22 = /^[),]/;
  var peg$r23 = /^['"@]/;
  var peg$r24 = /^[ \t\r\n\/\]{}]/;
  var peg$r25 = /^[^[\n]/;
  var peg$r26 = /^[^\]]/;
  var peg$r27 = /^[^@\\s\n]/;
  var peg$r28 = /^[^"@]/;
  var peg$r29 = /^[^']/;
  var peg$r30 = /^[^@|&;<> \t\n\r"']/;
  var peg$r31 = /^[Tt]/;
  var peg$r32 = /^[Ii]/;
  var peg$r33 = /^[Mm]/;
  var peg$r34 = /^[Ee]/;
  var peg$r35 = /^[Pp]/;
  var peg$r36 = /^[Rr]/;
  var peg$r37 = /^[Oo]/;
  var peg$r38 = /^[Jj]/;
  var peg$r39 = /^[Cc]/;
  var peg$r40 = /^[Aa]/;
  var peg$r41 = /^[Hh]/;
  var peg$r42 = /^[Nn]/;
  var peg$r43 = /^[Uu]/;
  var peg$r44 = /^[Dd]/;
  var peg$r45 = /^[Bb]/;
  var peg$r46 = /^[Gg]/;
  var peg$r47 = /^[Ss]/;
  var peg$r48 = /^[^#\]]/;
  var peg$r49 = /^[^\\s\\n]/;
  var peg$r50 = /^[^"]/;
  var peg$r51 = /^[^@\]\n]/;
  var peg$r52 = /^[a-f0-9]/;
  var peg$r53 = /^[^,)]/;

  var peg$e0 = peg$classExpectation([" ", "\t", "\r"], false, false);
  var peg$e1 = peg$literalExpectation(">>", false);
  var peg$e2 = peg$literalExpectation("<<", false);
  var peg$e3 = peg$classExpectation(["\n"], true, false);
  var peg$e4 = peg$literalExpectation("\n", false);
  var peg$e5 = peg$literalExpectation("{{", false);
  var peg$e6 = peg$literalExpectation("}}", false);
  var peg$e7 = peg$literalExpectation("[[", false);
  var peg$e8 = peg$literalExpectation("]]", false);
  var peg$e9 = peg$anyExpectation();
  var peg$e10 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e11 = peg$classExpectation(["`", "\r", "\n"], true, false);
  var peg$e12 = peg$otherExpectation("Top-level directive context");
  var peg$e13 = peg$otherExpectation("Variable reference context");
  var peg$e14 = peg$otherExpectation("Right-hand side context");
  var peg$e15 = peg$otherExpectation("Plain text context");
  var peg$e16 = peg$otherExpectation("Run-style code block context");
  var peg$e17 = peg$otherExpectation("Exec @run right-hand side context");
  var peg$e18 = peg$otherExpectation("Path starting with @variable context");
  var peg$e19 = peg$otherExpectation("YAML frontmatter");
  var peg$e20 = peg$literalExpectation("---", false);
  var peg$e21 = peg$otherExpectation("String Literal");
  var peg$e22 = peg$literalExpectation("\"", false);
  var peg$e23 = peg$literalExpectation("'", false);
  var peg$e24 = peg$literalExpectation("`", false);
  var peg$e25 = peg$otherExpectation("Number Literal");
  var peg$e26 = peg$literalExpectation("-", false);
  var peg$e27 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e28 = peg$literalExpectation(".", false);
  var peg$e29 = peg$otherExpectation("Boolean Literal");
  var peg$e30 = peg$literalExpectation("true", false);
  var peg$e31 = peg$literalExpectation("false", false);
  var peg$e32 = peg$otherExpectation("Null Literal");
  var peg$e33 = peg$literalExpectation("null", false);
  var peg$e34 = peg$otherExpectation("Multi-line Template Literal");
  var peg$e35 = peg$otherExpectation("Escape sequence");
  var peg$e36 = peg$literalExpectation("\\", false);
  var peg$e37 = peg$classExpectation(["\"", "'", "@", ["[", "]"], "`", "{", "}"], false, false);
  var peg$e38 = peg$otherExpectation("Plain text segment");
  var peg$e39 = peg$classExpectation([" ", "\t", "\r", "\n", "/", "]", "@", "$", "{", "{", "}", "\"", "'", "`"], false, false);
  var peg$e40 = peg$otherExpectation("Template text segment");
  var peg$e41 = peg$otherExpectation("Command text segment");
  var peg$e42 = peg$classExpectation(["/", "[", "]", "@", "$", "{", "}"], false, false);
  var peg$e43 = peg$otherExpectation("Path text segment");
  var peg$e44 = peg$classExpectation(["]", "/", "[", "]", "@", "$", "{", "}"], false, false);
  var peg$e45 = peg$otherExpectation("Section text segment");
  var peg$e46 = peg$classExpectation(["]"], false, false);
  var peg$e47 = peg$otherExpectation("String content with escapes");
  var peg$e48 = peg$otherExpectation("Single-quoted string content with escapes");
  var peg$e49 = peg$otherExpectation("Backtick string content with escapes");
  var peg$e50 = peg$otherExpectation("Path separator");
  var peg$e51 = peg$literalExpectation("/", false);
  var peg$e52 = peg$otherExpectation("Dot separator");
  var peg$e53 = peg$otherExpectation("Section marker");
  var peg$e54 = peg$literalExpectation("#", false);
  var peg$e55 = peg$otherExpectation("Identifier");
  var peg$e56 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  var peg$e57 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e58 = peg$otherExpectation("Special Path Character");
  var peg$e59 = peg$classExpectation([".", "~"], false, false);
  var peg$e60 = peg$otherExpectation("Path Separator");
  var peg$e61 = peg$otherExpectation("Dot Separator");
  var peg$e62 = peg$otherExpectation("Section Marker");
  var peg$e63 = peg$otherExpectation("Backtick Sequence");
  var peg$e64 = peg$otherExpectation("Reserved Directive Name");
  var peg$e65 = peg$literalExpectation("@data", false);
  var peg$e66 = peg$literalExpectation("@text", false);
  var peg$e67 = peg$literalExpectation("@run", false);
  var peg$e68 = peg$literalExpectation("@add", false);
  var peg$e69 = peg$literalExpectation("@path", false);
  var peg$e70 = peg$literalExpectation("@import", false);
  var peg$e71 = peg$literalExpectation("@exec", false);
  var peg$e72 = peg$literalExpectation("@when", false);
  var peg$e73 = peg$otherExpectation("whitespace");
  var peg$e74 = peg$classExpectation([" ", "\t", "\r", "\n", "\u200B", "\u200C", "\u200D"], false, false);
  var peg$e75 = peg$otherExpectation("mandatory whitespace");
  var peg$e76 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false);
  var peg$e77 = peg$otherExpectation("horizontal whitespace");
  var peg$e78 = peg$classExpectation([" ", "\t", "\r", "\u200B", "\u200C", "\u200D"], false, false);
  var peg$e79 = peg$literalExpectation("\r\n", false);
  var peg$e80 = peg$classExpectation(["\r", ["\u2028", "\u2029"]], false, false);
  var peg$e81 = peg$classExpectation(["\r", "\n"], true, false);
  var peg$e82 = peg$literalExpectation("|", false);
  var peg$e83 = peg$literalExpectation("&&", false);
  var peg$e84 = peg$literalExpectation("||", false);
  var peg$e85 = peg$literalExpectation(";", false);
  var peg$e86 = peg$literalExpectation("@", false);
  var peg$e87 = peg$classExpectation(["@", "|", "&", ";", "[", "]", "\n", " ", "\t"], true, false);
  var peg$e88 = peg$literalExpectation("run", false);
  var peg$e89 = peg$literalExpectation("npx", false);
  var peg$e90 = peg$literalExpectation("npm", false);
  var peg$e91 = peg$literalExpectation("yarn", false);
  var peg$e92 = peg$literalExpectation("pnpm", false);
  var peg$e93 = peg$literalExpectation("bun", false);
  var peg$e94 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "-"], false, false);
  var peg$e95 = peg$literalExpectation(":", false);
  var peg$e96 = peg$literalExpectation("-m", false);
  var peg$e97 = peg$literalExpectation("python", false);
  var peg$e98 = peg$literalExpectation("python3", false);
  var peg$e99 = peg$literalExpectation("python2", false);
  var peg$e100 = peg$literalExpectation("node", false);
  var peg$e101 = peg$literalExpectation("sh", false);
  var peg$e102 = peg$literalExpectation("bash", false);
  var peg$e103 = peg$literalExpectation("zsh", false);
  var peg$e104 = peg$literalExpectation("perl", false);
  var peg$e105 = peg$literalExpectation("ruby", false);
  var peg$e106 = peg$literalExpectation("-e", false);
  var peg$e107 = peg$literalExpectation("-c", false);
  var peg$e108 = peg$literalExpectation("make", false);
  var peg$e109 = peg$literalExpectation("cargo", false);
  var peg$e110 = peg$literalExpectation("go", false);
  var peg$e111 = peg$literalExpectation("gradle", false);
  var peg$e112 = peg$literalExpectation("maven", false);
  var peg$e113 = peg$literalExpectation("mvn", false);
  var peg$e114 = peg$literalExpectation("rake", false);
  var peg$e115 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", ":", "-"], false, false);
  var peg$e116 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", ".", "/", "-"], false, false);
  var peg$e117 = peg$otherExpectation("command reference");
  var peg$e118 = peg$otherExpectation("command arguments");
  var peg$e119 = peg$literalExpectation("(", false);
  var peg$e120 = peg$literalExpectation(")", false);
  var peg$e121 = peg$otherExpectation("command arguments list");
  var peg$e122 = peg$literalExpectation(",", false);
  var peg$e123 = peg$otherExpectation("command argument");
  var peg$e124 = peg$classExpectation([")", ","], false, false);
  var peg$e125 = peg$otherExpectation("Literal content without interpolation");
  var peg$e126 = peg$otherExpectation("Semantic path content with @var interpolation");
  var peg$e127 = peg$literalExpectation("[", false);
  var peg$e128 = peg$literalExpectation("]", false);
  var peg$e129 = peg$otherExpectation("Path component parts");
  var peg$e130 = peg$otherExpectation("Section name");
  var peg$e131 = peg$otherExpectation("Content with @var interpolation");
  var peg$e132 = peg$otherExpectation("Semantic command content with @var interpolation");
  var peg$e133 = peg$otherExpectation("Command content with @var interpolation");
  var peg$e134 = peg$otherExpectation("Variable in command context");
  var peg$e135 = peg$otherExpectation("Quoted string in command");
  var peg$e136 = peg$classExpectation(["'", "\"", "@"], false, false);
  var peg$e137 = peg$otherExpectation("Permissive command text content");
  var peg$e138 = peg$otherExpectation("Content with {{var}} interpolation");
  var peg$e139 = peg$otherExpectation("Unquoted path with @var interpolation");
  var peg$e140 = peg$otherExpectation("Unquoted path text");
  var peg$e141 = peg$classExpectation([" ", "\t", "\r", "\n", "/", "]", "{", "}"], false, false);
  var peg$e142 = peg$otherExpectation("Unquoted command with @var interpolation");
  var peg$e143 = peg$otherExpectation("Semantic code content without any interpolation");
  var peg$e144 = peg$otherExpectation("Code content without interpolation");
  var peg$e145 = peg$classExpectation(["[", "\n"], true, false);
  var peg$e146 = peg$otherExpectation("Literal code content with natural bracket nesting");
  var peg$e147 = peg$otherExpectation("Literal text without any interpolation");
  var peg$e148 = peg$otherExpectation("Path content with @var interpolation");
  var peg$e149 = peg$otherExpectation("Template content with {{var}} interpolation");
  var peg$e150 = peg$otherExpectation("Path interpolation patterns");
  var peg$e151 = peg$otherExpectation("Template interpolation patterns");
  var peg$e152 = peg$otherExpectation("Command interpolation patterns");
  var peg$e153 = peg$otherExpectation("Semantic content for @text directive");
  var peg$e154 = peg$classExpectation(["]"], true, false);
  var peg$e155 = peg$otherExpectation("Wrapped path content");
  var peg$e156 = peg$otherExpectation("Wrapped template content");
  var peg$e157 = peg$otherExpectation("Wrapped command content");
  var peg$e158 = peg$otherExpectation("Command content interpolation patterns");
  var peg$e159 = peg$otherExpectation("Wrapped code content");
  var peg$e160 = peg$otherExpectation("comma with optional whitespace");
  var peg$e161 = peg$otherExpectation("semicolon with optional whitespace");
  var peg$e162 = peg$otherExpectation("Any path expression");
  var peg$e163 = peg$otherExpectation("Unified path with section marker");
  var peg$e164 = peg$otherExpectation("Unified path (file or URL)");
  var peg$e165 = peg$otherExpectation("URL protocol type");
  var peg$e166 = peg$literalExpectation("http", false);
  var peg$e167 = peg$literalExpectation("s", false);
  var peg$e168 = peg$literalExpectation("file", false);
  var peg$e169 = peg$otherExpectation("URL content");
  var peg$e170 = peg$literalExpectation("//", false);
  var peg$e171 = peg$otherExpectation("URL parts");
  var peg$e172 = peg$otherExpectation("Escaped backslash in URL");
  var peg$e173 = peg$literalExpectation("\\\\", false);
  var peg$e174 = peg$otherExpectation("Escaped @ in URL");
  var peg$e175 = peg$literalExpectation("\\@", false);
  var peg$e176 = peg$otherExpectation("URL variable reference");
  var peg$e177 = peg$otherExpectation("URL segment");
  var peg$e178 = peg$classExpectation(["@", "\\", "s", "\n"], true, false);
  var peg$e179 = peg$otherExpectation("In right-hand side of assignment");
  var peg$e180 = peg$literalExpectation("{", false);
  var peg$e181 = peg$literalExpectation("}", false);
  var peg$e182 = peg$otherExpectation("Security options (TTL and/or Trust)");
  var peg$e183 = peg$otherExpectation("TTL cache duration");
  var peg$e184 = peg$otherExpectation("TTL value");
  var peg$e185 = peg$otherExpectation("TTL duration");
  var peg$e186 = peg$otherExpectation("TTL time unit");
  var peg$e187 = peg$literalExpectation("m", false);
  var peg$e188 = peg$literalExpectation("h", false);
  var peg$e189 = peg$literalExpectation("d", false);
  var peg$e190 = peg$literalExpectation("w", false);
  var peg$e191 = peg$otherExpectation("TTL special value");
  var peg$e192 = peg$literalExpectation("live", false);
  var peg$e193 = peg$literalExpectation("static", false);
  var peg$e194 = peg$otherExpectation("Trust level");
  var peg$e195 = peg$literalExpectation("trust", false);
  var peg$e196 = peg$otherExpectation("Trust level value");
  var peg$e197 = peg$literalExpectation("always", false);
  var peg$e198 = peg$literalExpectation("verify", false);
  var peg$e199 = peg$literalExpectation("never", false);
  var peg$e200 = peg$otherExpectation("Integer");
  var peg$e201 = peg$classExpectation(["\"", "@"], true, false);
  var peg$e202 = peg$classExpectation(["'"], true, false);
  var peg$e203 = peg$classExpectation(["@", "|", "&", ";", "<", ">", " ", "\t", "\n", "\r", "\"", "'"], true, false);
  var peg$e204 = peg$otherExpectation("Code brackets [(...))]");
  var peg$e205 = peg$literalExpectation("[(", false);
  var peg$e206 = peg$literalExpectation(")]", false);
  var peg$e207 = peg$otherExpectation("Command brackets [(...))]");
  var peg$e208 = peg$otherExpectation("Unified run content [(...))]");
  var peg$e209 = peg$otherExpectation("Special reserved variable");
  var peg$e210 = peg$literalExpectation("@.", false);
  var peg$e211 = peg$classExpectation(["T", "t"], false, false);
  var peg$e212 = peg$classExpectation(["I", "i"], false, false);
  var peg$e213 = peg$classExpectation(["M", "m"], false, false);
  var peg$e214 = peg$classExpectation(["E", "e"], false, false);
  var peg$e215 = peg$classExpectation(["P", "p"], false, false);
  var peg$e216 = peg$classExpectation(["R", "r"], false, false);
  var peg$e217 = peg$classExpectation(["O", "o"], false, false);
  var peg$e218 = peg$classExpectation(["J", "j"], false, false);
  var peg$e219 = peg$classExpectation(["C", "c"], false, false);
  var peg$e220 = peg$classExpectation(["A", "a"], false, false);
  var peg$e221 = peg$classExpectation(["H", "h"], false, false);
  var peg$e222 = peg$classExpectation(["N", "n"], false, false);
  var peg$e223 = peg$classExpectation(["U", "u"], false, false);
  var peg$e224 = peg$classExpectation(["D", "d"], false, false);
  var peg$e225 = peg$classExpectation(["B", "b"], false, false);
  var peg$e226 = peg$classExpectation(["G", "g"], false, false);
  var peg$e227 = peg$classExpectation(["S", "s"], false, false);
  var peg$e228 = peg$literalExpectation("frontmatter", false);
  var peg$e229 = peg$literalExpectation("fm", false);
  var peg$e230 = peg$literalExpectation("with", false);
  var peg$e231 = peg$literalExpectation("pipeline", false);
  var peg$e232 = peg$literalExpectation("needs", false);
  var peg$e233 = peg$literalExpectation("from", false);
  var peg$e234 = peg$classExpectation(["#", "]"], true, false);
  var peg$e235 = peg$literalExpectation("javascript", false);
  var peg$e236 = peg$literalExpectation("js", false);
  var peg$e237 = peg$literalExpectation("py", false);
  var peg$e238 = peg$literalExpectation("=", false);
  var peg$e239 = peg$classExpectation(["\\", "s", "\\", "n"], true, false);
  var peg$e240 = peg$otherExpectation("Section extraction");
  var peg$e241 = peg$classExpectation(["\""], true, false);
  var peg$e242 = peg$literalExpectation("as", false);
  var peg$e243 = peg$literalExpectation("under", false);
  var peg$e244 = peg$otherExpectation("Dotted Identifier");
  var peg$e245 = peg$classExpectation(["@", "]", "\n"], true, false);
  var peg$e246 = peg$literalExpectation("foreach", false);
  var peg$e247 = peg$literalExpectation("risk.high", false);
  var peg$e248 = peg$literalExpectation("risk.med", false);
  var peg$e249 = peg$literalExpectation("risk.low", false);
  var peg$e250 = peg$literalExpectation("risk", false);
  var peg$e251 = peg$literalExpectation("about", false);
  var peg$e252 = peg$literalExpectation("meta", false);
  var peg$e253 = peg$literalExpectation("@input", false);
  var peg$e254 = peg$literalExpectation("@stdin", false);
  var peg$e255 = peg$otherExpectation("Module Identifier Part");
  var peg$e256 = peg$classExpectation([["a", "f"], ["0", "9"]], false, false);
  var peg$e257 = peg$literalExpectation("*", false);
  var peg$e258 = peg$literalExpectation(" as ", false);
  var peg$e259 = peg$literalExpectation("@output", false);
  var peg$e260 = peg$classExpectation([",", ")"], true, false);
  var peg$e261 = peg$literalExpectation("PROJECTPATH", false);
  var peg$e262 = peg$literalExpectation("add", false);
  var peg$e263 = peg$literalExpectation("=>", false);
  var peg$e264 = peg$literalExpectation("first", false);
  var peg$e265 = peg$literalExpectation("all", false);
  var peg$e266 = peg$literalExpectation("any", false);

  var peg$f0 = function(frontmatter, nodes) {
    helpers.debug('Start: Entered');
    const result = [];
    if (frontmatter) result.push(frontmatter);
    result.push(...nodes);
    return result;
  };
  var peg$f1 = function(ws, term) {
      /* scan forward past spaces/tabs (NOT newlines) */
      let i = offset();
      while (i < input.length && (input[i] === ' ' || input[i] === '\t' || input[i] === '\r')) {
        i++;
      }
      /* success only if the next real char starts a directive line */
      return i < input.length && input[i] === '@' && helpers.isLogicalLineStart(input, i);
    };
  var peg$f2 = function(ws, term) {
      return helpers.createNode(NodeType.Newline, { content: term, location: location() });
    };
  var peg$f3 = function(ws, term) { return term; };
  var peg$f4 = function() { 
      const pos = offset();
      const isAtLineStart = helpers.isLogicalLineStart(input, pos);
      return isAtLineStart;
    };
  var peg$f5 = function(marker, content) {
    return helpers.createNode(NodeType.Comment, { 
      content: content.trim(), 
      marker: marker,
      location: location() 
    });
  };
  var peg$f6 = function(marker, content) {
    return helpers.createNode(NodeType.Comment, { 
      content: content.trim(), 
      marker: marker,
      location: location() 
    });
  };
  var peg$f7 = function() { return ">>"; };
  var peg$f8 = function() { return "<<"; };
  var peg$f9 = function(chars) {
    return chars.join('');
  };
  var peg$f10 = function(marker, content) {
    return {
      type: 'Comment',
      marker: marker,
      content: content.trim(),
      location: location()
    };
  };
  var peg$f11 = function(first, rest) {
    return helpers.createNode(NodeType.Text, { content: first + rest.join(''), location: location() });
  };
  var peg$f12 = function() { 
      const pos = offset();
      const isAtLineStart = helpers.isLogicalLineStart(input, pos);
      const isAtStartChar = input[pos] === '@';
      
      // Is this potentially a directive?
      if (isAtLineStart && isAtStartChar) {
        // Check if we're at a directive context
        return helpers.isAtDirectiveContext(input, pos);
      }
      
      // For regular comment handling
      const isComment = isAtLineStart && input.substr(pos, 2) === '>>';
      
      return isAtLineStart && isAtStartChar || isComment;
    };
  var peg$f13 = function() {
      const pos = offset();
      helpers.trace(pos, 'brace/backtick guard');
      return true;
    };
  var peg$f14 = function(char) { 
      return char; 
    };
  var peg$f15 = function() { return helpers.isLogicalLineStart(input, offset()); };
  var peg$f16 = function(dir) { return dir; };
  var peg$f17 = function(opener, lang) { return true; };
  var peg$f18 = function(opener, lang, closer) {
      return closer.length === opener.length;
    };
  var peg$f19 = function(opener, lang, c) { return c; };
  var peg$f20 = function(opener, lang, content, closer) {
      return closer.length !== opener.length;
    };
  var peg$f21 = function(opener, lang, content, closer) {
      const rawContent = content.join('');
      const preserveCodeFences = options?.preserveCodeFences !== false;
      const finalContent = preserveCodeFences 
        ? opener.join('') + (lang ? lang : '') + '\n' + rawContent + (rawContent ? '' : '\n') + closer.join('')
        : rawContent.trimEnd();
      return helpers.createNode(NodeType.CodeFence, {
        language: lang || undefined,
        content: finalContent,
        location: location()
      });
    };
  var peg$f22 = function(chars) { return chars.join(''); };
  var peg$f23 = function() {
      const pos = offset();
      return helpers.isAtDirectiveContext(input, pos);
    };
  var peg$f24 = function() {
      const pos = offset();
      return helpers.isAtVariableContext(input, pos);
    };
  var peg$f25 = function() {
      const pos = offset();
      return helpers.isRHSContext(input, pos);
    };
  var peg$f26 = function() {
      const pos = offset();
      return helpers.isPlainTextContext(input, pos);
    };
  var peg$f27 = function() {
      const pos = offset();
      
      // Check if we're at a code block pattern following a language identifier
      // This requires looking back to see if we have a valid language pattern
      // and forward to see if we have a code block pattern
      
      // First determine if we're in an RHS context
      const isRHS = helpers.isRHSContext(input, pos);
      
      // Then check if we're preceded by "@run" or in a context that expects 
      // a language + code block pattern
      let isInRunContext = false;
      
      // Look backward for "@run" pattern if in RHS context
      if (isRHS) {
        // Search backward for "@run" indicator within reasonable bounds
        // This is a simplified check - a more comprehensive implementation
        // would match the exact pattern for "@run" in different contexts
        let i = pos - 1;
        let seenAtSymbol = false;
        let potentialRunKeyword = '';
        
        // Skip whitespace
        while (i >= 0 && ' \t\r\n'.includes(input[i])) {
          i--;
        }
        
        // Collect potential keyword and check for @ symbol
        while (i >= 0 && /[a-zA-Z]/.test(input[i])) {
          potentialRunKeyword = input[i] + potentialRunKeyword;
          i--;
        }
        
        // Check for @ symbol
        if (i >= 0 && input[i] === '@') {
          seenAtSymbol = true;
        }
        
        // If we've seen @run, we're in a run code block context
        if (seenAtSymbol && potentialRunKeyword === 'run') {
          isInRunContext = true;
        }
      }
      
      return isInRunContext || helpers.isInRunCodeBlockContext(input, pos);
    };
  var peg$f28 = function() {
      const pos = offset();
      
      // Check both RHS context and the presence of @run pattern
      if (!helpers.isRHSContext(input, pos)) {
        return false;
      }
      
      // Look backward for "@exec" to confirm we're in an exec directive
      let isInExecDirective = false;
      let i = pos - 1;
      
      // This is a simplified check - would need a more robust pattern 
      // matching in a full implementation
      let foundEquals = false;
      let foundExec = false;
      
      // First find equals sign
      while (i >= 0 && !foundEquals) {
        if (input[i] === '=') {
          foundEquals = true;
        } else if (input[i] === '\n') {
          // If we hit a newline before equals, we're not in the right context
          return false;
        }
        i--;
      }
      
      if (foundEquals) {
        // Then look for exec
        // Skip whitespace before equals
        i--;
        while (i >= 0 && ' \t\r'.includes(input[i])) {
          i--;
        }
        
        // Collect potential keyword
        let keyword = '';
        while (i >= 0 && /[a-zA-Z]/.test(input[i])) {
          keyword = input[i] + keyword;
          i--;
        }
        
        // Check for @ symbol
        if (i >= 0 && input[i] === '@') {
          if (keyword === 'exec') {
            isInExecDirective = true;
          }
        }
      }
      
      return isInExecDirective;
    };
  var peg$f29 = function() {
      const pos = offset();
      
      // Look ahead to see if we have @identifier followed by path indicators
      const remaining = input.substring(pos);
      
      // Match @identifier followed by / or . (path indicators)
      // This pattern identifies paths that start with variables
      const pathPattern = /^@[a-zA-Z_][a-zA-Z0-9_]*[\/\.]/;
      
      return pathPattern.test(remaining);
    };
  var peg$f30 = function() { return offset() === 0; };
  var peg$f31 = function(content) {
      return helpers.createNode(NodeType.Frontmatter, {
        content: content,
        location: location()
      });
    };
  var peg$f32 = function(line) { return line; };
  var peg$f33 = function(lines) {
      return lines.join('');
    };
  var peg$f34 = function(chars) {
      return chars.join('') + '\n';
    };
  var peg$f35 = function(content) { return content; };
  var peg$f36 = function(content) { return content; };
  var peg$f37 = function(content) { return content; };
  var peg$f38 = function(digits, decimal) {
    return parseFloat((text().startsWith("-") ? "-" : "") + digits.join('') + (decimal ? decimal[0] + decimal[1].join('') : ''));
  };
  var peg$f39 = function() { return true; };
  var peg$f40 = function() { return false; };
  var peg$f41 = function() { return null; };
  var peg$f42 = function(chars) { 
      return chars.join(''); 
    };
  var peg$f43 = function(char) { return char; };
  var peg$f44 = function(char) {
      return char === "\\" ? "\\" : char;
    };
  var peg$f45 = function(chars) { 
      const content = chars.join('');
      helpers.debug('BaseTextSegment matched', { content });
      return helpers.createNode(NodeType.Text, { content, location: location() });
    };
  var peg$f46 = function(char) { return char; };
  var peg$f47 = function(chars) { 
      const content = chars.join('');
      helpers.debug('TemplateTextSegment matched', { content });
      return helpers.createNode(NodeType.Text, { content, location: location() });
    };
  var peg$f48 = function(char) { return char; };
  var peg$f49 = function(chars) { 
      const content = chars.join('');
      helpers.debug('CommandTextSegment matched', { content });
      return helpers.createNode(NodeType.Text, { content, location: location() });
    };
  var peg$f50 = function(char) { return char; };
  var peg$f51 = function(chars) { 
      const content = chars.join('');
      helpers.debug('PathTextSegment matched', { content });
      return helpers.createNode(NodeType.Text, { content, location: location() });
    };
  var peg$f52 = function() { 
      // Check if we're at a section marker
      const rest = input.substring(peg$currPos);
      return !rest.match(/^\s*#\s*/);
    };
  var peg$f53 = function(char) { return char; };
  var peg$f54 = function(chars) { 
      const content = chars.join('');
      helpers.debug('SectionTextSegment matched', { content });
      return helpers.createNode(NodeType.Text, { content, location: location() });
    };
  var peg$f55 = function(char) { return char; };
  var peg$f56 = function(chars) {
      return chars.join('');
    };
  var peg$f57 = function(char) { return char; };
  var peg$f58 = function(chars) {
      return chars.join('');
    };
  var peg$f59 = function(char) { return char; };
  var peg$f60 = function(chars) {
      return chars.join('');
    };
  var peg$f61 = function(char) { return char; };
  var peg$f62 = function() { 
      return helpers.createNode(NodeType.PathSeparator, { value: '/', location: location() });
    };
  var peg$f63 = function() { 
      return helpers.createNode(NodeType.DotSeparator, { value: '.', location: location() });
    };
  var peg$f64 = function() { 
      return helpers.createNode(NodeType.SectionMarker, { value: '#', location: location() });
    };
  var peg$f65 = function(first, rest) {
      return first + rest.join('');
    };
  var peg$f66 = function() { 
      return helpers.createNode(NodeType.PathSeparator, { value: "/", location: location() });
    };
  var peg$f67 = function() { 
      return helpers.createNode(NodeType.DotSeparator, { value: ".", location: location() });
    };
  var peg$f68 = function() { 
      return helpers.createNode(NodeType.SectionMarker, { value: "#", location: location() });
    };
  var peg$f69 = function(backticks) {
      return backticks.length >= 3 && backticks.length <= 5;
    };
  var peg$f70 = function(backticks) { 
      return backticks;
    };
  var peg$f71 = function(text) { 
      return text.join(''); 
    };
  var peg$f72 = function(ws, term) { 
      const pos = offset();
      const isBeforeDirective = input.substr(pos).match(/^\s*@[a-z]/i);
      return isBeforeDirective;
    };
  var peg$f73 = function(ws, term) { 
      return helpers.createNode(NodeType.Newline, { content: term, location: location() });
    };
  var peg$f74 = function(ws, term) { 
      return helpers.createNode(NodeType.Newline, { content: term, location: location() });
    };
  var peg$f75 = function(ws) { 
      const atEof = offset() === input.length;
      const nextChar = input[offset()];
      return atEof || (nextChar === '@' && helpers.isLogicalLineStart(input, offset())); 
    };
  var peg$f76 = function(ws) { 
      return helpers.createNode(NodeType.Newline, { content: '\n', location: location() });
    };
  var peg$f77 = function(segments) {
      const allParts = [];
      const bases = [];
      const rawBases = [];
      let hasScriptRunner = false;
      let hasVariables = false;
      
      // Process segments
      segments.forEach(segment => {
        if (segment.type === 'commandBase') {
          bases.push(segment.node);
          rawBases.push(segment.raw);
          allParts.push(segment.node);
          if (segment.isScriptRunner) {
            hasScriptRunner = true;
          }
        } else if (segment.type === 'operator') {
          allParts.push(segment.node);
        } else if (segment.type === 'argument') {
          allParts.push(...segment.parts);
          if (segment.hasVariables) {
            hasVariables = true;
          }
        }
      });
      
      // Reconstruct raw command
      const raw = helpers.reconstructRawString(allParts);
      
      return {
        parts: allParts,
        raw,
        bases,
        rawBases,
        hasVariables,
        hasScriptRunner
      };
    };
  var peg$f78 = function(first, op, pipeline) { 
      return [{ type: 'operator', node: op }, ...pipeline]; 
    };
  var peg$f79 = function(first, rest) {
      return [first, ...rest].flat();
    };
  var peg$f80 = function(op) {
      return helpers.createNode(NodeType.CommandOperator, { 
        operator: op.trim(), 
        location: location() 
      });
    };
  var peg$f81 = function(base, args) {
      const result = [base];
      if (args) {
        result.push({
          type: 'argument',
          parts: args.parts,
          hasVariables: args.hasVariables
        });
      }
      return result;
    };
  var peg$f82 = function(parts) {
      return parts;
    };
  var peg$f83 = function(parts) {
      const hasVariables = parts.some(p => p.type === NodeType.VariableReference);
      return { parts, hasVariables };
    };
  var peg$f84 = function(varName) {
      return helpers.createVariableReferenceNode('varIdentifier', { 
        identifier: varName,
        location: location()
      });
    };
  var peg$f85 = function(chars) {
      return helpers.createNode(NodeType.Text, { 
        content: chars, 
        location: location() 
      });
    };
  var peg$f86 = function(runner, script) {
      const command = runner + " run";
      return {
        type: 'commandBase',
        node: helpers.createNode(NodeType.CommandBase, {
          type: NodeType.CommandBase,
          command: command,
          script: script,
          isScriptRunner: true,
          location: location()
        }),
        raw: command + " " + script,
        isScriptRunner: true
      };
    };
  var peg$f87 = function(pkg) {
      return {
        type: 'commandBase',
        node: helpers.createNode(NodeType.CommandBase, {
          command: "npx",
          package: pkg,
          isPackageRunner: true,
          location: location()
        }),
        raw: "npx " + pkg,
        isScriptRunner: true
      };
    };
  var peg$f88 = function(lang, mod) {
      const command = lang + " -m";
      return {
        type: 'commandBase',
        node: helpers.createNode(NodeType.CommandBase, {
          command: command,
          module: mod,
          location: location()
        }),
        raw: command + " " + mod
      };
    };
  var peg$f89 = function(cmd, flag) {
      const command = cmd + " " + flag;
      return {
        type: 'commandBase',
        node: helpers.createNode(NodeType.CommandBase, {
          command: command,
          isInlineCode: true,
          location: location()
        }),
        raw: command
      };
    };
  var peg$f90 = function(tool, target) {
      // For now, treat build targets as regular commands
      return {
        type: 'commandBase',
        node: helpers.createNode(NodeType.CommandBase, {
          command: tool,
          location: location()
        }),
        raw: tool
      };
    };
  var peg$f91 = function(cmd) {
      return {
        type: 'commandBase',
        node: helpers.createNode(NodeType.CommandBase, {
          command: cmd,
          location: location()
        }),
        raw: cmd
      };
    };
  var peg$f92 = function(name, args) {
      helpers.debug('CommandReference matched', { name, args });
      return {
        name,
        identifier: [helpers.createNode(NodeType.Text, { content: name, location: location() })],
        args: args || [],
        isCommandReference: true
      };
    };
  var peg$f93 = function(args) {
      return args || [];
    };
  var peg$f94 = function(first, arg) { return arg; };
  var peg$f95 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f96 = function(str) {
      return { type: 'string', value: str };
    };
  var peg$f97 = function(varRef) {
      return { type: 'variable', value: varRef };
    };
  var peg$f98 = function(chars) {
      return { type: 'raw', value: chars.join('').trim() };
    };
  var peg$f99 = function(char) { return char; };
  var peg$f100 = function(content) { 
      // Return the escaped content as a Text node
      return [helpers.createNode(NodeType.Text, { content, location: location() })];
    };
  var peg$f101 = function(content) { 
      return [helpers.createNode(NodeType.Text, { content, location: location() })];
    };
  var peg$f102 = function(content) { 
      return [helpers.createNode(NodeType.Text, { content, location: location() })];
    };
  var peg$f103 = function(parts) {
      // Just return the path parts - section handling should be at directive level
      return parts;
    };
  var peg$f104 = function(parts) {
      return parts;
    };
  var peg$f105 = function(chars) { return chars.trim(); };
  var peg$f106 = function(parts) {
      // Return only the content within brackets, not the brackets themselves
      return parts;
    };
  var peg$f107 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
    };
  var peg$f108 = function(content) {
      // Preserve quotes in command context
      return helpers.createNode(NodeType.Text, { 
        content: '"' + content + '"', 
        location: location() 
      });
    };
  var peg$f109 = function(content) {
      // Single quotes = no interpolation in shell
      return helpers.createNode(NodeType.Text, { 
        content: "'" + content + "'", 
        location: location() 
      });
    };
  var peg$f110 = function(parts) {
      // Flatten to string preserving variable references
      return parts.map(p => {
        if (p.type === NodeType.VariableReference) {
          return '@' + p.identifier;
        }
        return p.content || '';
      }).join('');
    };
  var peg$f111 = function(char) { return char; };
  var peg$f112 = function(chars) {
      return chars.join('');
    };
  var peg$f113 = function(char) { return char; };
  var peg$f114 = function(chars) {
      return helpers.createNode(NodeType.Text, { content: chars.join(''), location: location() });
    };
  var peg$f115 = function(chars) { 
      const content = chars.join('');
      helpers.debug('CommandTextContent matched', { content });
      return helpers.createNode(NodeType.Text, { content, location: location() });
    };
  var peg$f116 = function() {
      // Use our helper to check if this is a command-ending bracket
      return !helpers.isCommandEndingBracket(input, peg$currPos);
    };
  var peg$f117 = function(char) { return char; };
  var peg$f118 = function(parts) {
      helpers.debug('DoubleBracketContent matched [[...]]', { 
        parts: parts,
        isArray: Array.isArray(parts),
        length: Array.isArray(parts) ? parts.length : 'not array',
        firstType: Array.isArray(parts) && parts.length > 0 ? parts[0].type : 'none'
      });
      
      // Return only the content within double brackets, not the brackets themselves
      return parts;
    };
  var peg$f119 = function(parts) {
      helpers.debug('DoubleBracketContent matched {{var}}', { 
        parts: parts,
        type: parts ? parts.type : 'unknown'
      });
      
      return [parts];
    };
  var peg$f120 = function(parts) {
      return parts;
    };
  var peg$f121 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      const node = helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
      helpers.debug('CreateVAR in UnquotedPath', { id: normalizedId, node, fields: fields });
      return node;
    };
  var peg$f122 = function(chars) {
      helpers.debug('UnquotedPathText matched', { chars });
      return helpers.createNode(NodeType.Text, { content: chars, location: location() });
    };
  var peg$f123 = function(parts) {
      return parts;
    };
  var peg$f124 = function(content) { 
      // In code context, everything is literal - no @ processing, no escapes
      return [helpers.createNode(NodeType.Text, { content, location: location() })];
    };
  var peg$f125 = function(content) { 
      // Fallback for unbracketed code - must consume at least one character
      return [helpers.createNode(NodeType.Text, { content, location: location() })];
    };
  var peg$f126 = function(parts) {
      return parts.join('');
    };
  var peg$f127 = function(inner) {
      // Preserve brackets in code
      return '[' + inner + ']';
    };
  var peg$f128 = function(char) { return char; };
  var peg$f129 = function(rule) {
      helpers.debug('TemplateStyleInterpolation matched InterpolatedTemplateContent', { 
        rule, 
        isArray: Array.isArray(rule),
        length: Array.isArray(rule) ? rule.length : 'not array',
        hasType: rule && typeof rule === 'object' && 'type' in rule
      });
      
      // Check if this is actually a double-bracketed section
      if (rule && typeof rule === 'object' && !Array.isArray(rule) && rule.type === 'doubleBracketSection') {
        return rule; // Pass through the section structure
      }
      
      return {
        content: rule,
        wrapperType: 'doubleBracket'
      };
    };
  var peg$f130 = function(rule) {
      helpers.debug('TemplateStyleInterpolation matched LiteralOnlyContent', { rule });
      
      return {
        content: rule,
        wrapperType: 'literal'
      };
    };
  var peg$f131 = function() {
      // Double brackets = template content
      helpers.debug('SemanticTextContent detected [[');
      return { type: 'template', lookahead: '[[' };
    };
  var peg$f132 = function(ahead) {
      // Look for # to determine if it's a section
      return ahead.includes(' # ');
    };
  var peg$f133 = function(ahead) {
      helpers.debug('SemanticTextContent detected [ with section');
      return { type: 'section', lookahead: '[' };
    };
  var peg$f134 = function() {
      // Single bracket without section = path
      helpers.debug('SemanticTextContent detected [');
      return { type: 'path', lookahead: '[' };
    };
  var peg$f135 = function() {
      // Run reference
      helpers.debug('SemanticTextContent detected @run');
      return { type: 'run', lookahead: '@run' };
    };
  var peg$f136 = function() {
      // Quoted literal
      helpers.debug('SemanticTextContent detected "');
      return { type: 'literal', lookahead: '"' };
    };
  var peg$f137 = function() {
      // Quoted literal
      helpers.debug('SemanticTextContent detected \'');
      return { type: 'literal', lookahead: '\'' };
    };
  var peg$f138 = function(content) {
      // PathStyleInterpolation already handles brackets
      const rawString = helpers.reconstructRawString(content);
      
      return {
        parts: content,
        raw: rawString
      };
    };
  var peg$f139 = function(content) {
      helpers.debug('WrappedTemplateContent matched', { 
        contentType: typeof content,
        isArray: Array.isArray(content),
        contentLength: Array.isArray(content) ? content.length : 'not array',
        contentHasType: content && content.type,
        wrapperType: content && content.wrapperType
      });
      
      // Regular template content
      const rawString = helpers.reconstructRawString(content.content);
      
      return {
        parts: content.content,
        raw: rawString,
        wrapperType: content.wrapperType
      };
    };
  var peg$f140 = function(content) {
      // Construct raw string from the content nodes
      const rawString = helpers.reconstructRawString(content);
      
      return {
        parts: content,
        raw: rawString
      };
    };
  var peg$f141 = function(content) {
      // Construct raw string from the content nodes
      const rawString = helpers.reconstructRawString(content);
      
      return {
        parts: content,
        raw: rawString
      };
    };
  var peg$f142 = function(field) {
      return { type: 'field', name: field };
    };
  var peg$f143 = function(index) {
      return { type: 'numericField', index };
    };
  var peg$f144 = function(index) {
      return { type: 'arrayIndex', index };
    };
  var peg$f145 = function(index) {
      return { type: 'stringIndex', name: index };
    };
  var peg$f146 = function(path, section) {
      helpers.debug('UnifiedSectionPath matched', { path, section });
      
      // Determine if this is a URL or file path based on content
      const isUrl = path.values.protocol !== undefined;
      
      if (isUrl) {
        return {
          type: 'path',
          subtype: 'urlSectionPath',
          values: { 
            url: path.values.url,
            protocol: path.values.protocol,
            parts: path.values.parts,
            section: [helpers.createNode(NodeType.Text, { content: section, location: location() })]
          },
          raw: { 
            url: path.raw.url || path.raw.path,
            protocol: path.values.protocol,
            section
          },
          meta: helpers.createUrlMetadata(path.values.protocol, path.values.parts, true)
        };
      } else {
        return {
          type: 'path',
          subtype: 'fileSectionPath',
          values: { 
            path: path.values.path,
            section: [helpers.createNode(NodeType.Text, { content: section, location: location() })]
          },
          raw: { 
            path: path.raw.path,
            section
          },
          meta: {
            ...path.meta,
            hasSection: true
          }
        };
      }
    };
  var peg$f147 = function(path) {
      helpers.debug('UnifiedPath matched', { path });
      
      // Analyze the raw content to determine if this is a URL or file path
      const rawContent = path.raw;
      const urlMatch = rawContent.match(/^(https?|file):\/\//);
      
      if (urlMatch) {
        // This is a URL - parse it as such
        const protocol = urlMatch[1];
        const fullUrl = rawContent;
        
        helpers.debug('UnifiedPath detected URL', { protocol, fullUrl });
        
        return {
          type: 'path',
          subtype: 'urlPath',
          values: { 
            url: [helpers.createNode(NodeType.Text, { content: fullUrl, location: location() })],
            protocol: [helpers.createNode(NodeType.Text, { content: protocol, location: location() })],
            parts: path.parts
          },
          raw: { 
            url: fullUrl,
            protocol
          },
          meta: helpers.createUrlMetadata(protocol, path.parts)
        };
      } else {
        // This is a file path
        helpers.debug('UnifiedPath detected file path', { rawContent });
        
        return {
          type: 'path',
          subtype: 'filePath',
          values: { 
            path: path.parts 
          },
          raw: { 
            path: path.raw 
          },
          meta: helpers.createPathMetadata(path.raw, path.parts)
        };
      }
    };
  var peg$f148 = function(proto) {
      return proto;
    };
  var peg$f149 = function(parts) {
      const raw = "//" + parts.map(p => {
        if (p.type === NodeType.VariableReference) {
          return '@' + p.identifier;
        }
        return p.content || p;
      }).join('');
      
      return { parts, raw };
    };
  var peg$f150 = function(parts) {
      return parts;
    };
  var peg$f151 = function() {
      return helpers.createNode(NodeType.Text, { 
        content: '\\', 
        location: location() 
      });
    };
  var peg$f152 = function() {
      return helpers.createNode(NodeType.Text, { 
        content: '@', 
        location: location() 
      });
    };
  var peg$f153 = function(varName) {
      return helpers.createVariableReferenceNode('url', { 
        identifier: varName,
        location: location()
      });
    };
  var peg$f154 = function(chars) {
      return helpers.createNode(NodeType.Text, { 
        content: chars, 
        location: location() 
      });
    };
  var peg$f155 = function() {
      const pos = offset();
      return helpers.isRHSContext(input, pos);
    };
  var peg$f156 = function() {
      // Handle nested @run directive
      helpers.debug('TextRHS matched @run reference');
      return { type: 'directive', directive: 'run' };
    };
  var peg$f157 = function() {
      // Handle nested @add directive
      helpers.debug('TextRHS matched @add reference');
      return { type: 'directive', directive: 'add' };
    };
  var peg$f158 = function(section) {
      // Handle section extraction (e.g., "## Setup" from [file.md])
      helpers.debug('TextRHS matched section extraction', { section });
      return { 
        type: 'section',
        section: section.section,
        path: section.path,
        rename: section.rename,
        meta: section.meta
      };
    };
  var peg$f159 = function(path) {
      // Handle direct path content (e.g., [file.md] or https://example.com/file.md)
      helpers.debug('TextRHS matched path content', { path });
      return { 
        type: 'path',
        path: path
      };
    };
  var peg$f160 = function(content) {
      // Handle template content
      helpers.debug('TextRHS matched template content');
      return { 
        type: 'template', 
        content: content.parts,
        raw: content.raw
      };
    };
  var peg$f161 = function() {
      // Handle nested @run directive
      return { type: 'directive', directive: 'run' };
    };
  var peg$f162 = function(properties) {
      // Handle object literal
      return { 
        type: 'object',
        properties: properties || []
      };
    };
  var peg$f163 = function(items) {
      // Handle array literal
      return { 
        type: 'array',
        items: items || []
      };
    };
  var peg$f164 = function(value) {
      // Handle primitive values
      return { 
        type: 'literal',
        value
      };
    };
  var peg$f165 = function(first, prop) { return prop; };
  var peg$f166 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f167 = function(key, value) {
      return { key, value };
    };
  var peg$f168 = function(key, value) {
      return { key, value };
    };
  var peg$f169 = function(first, item) { return item; };
  var peg$f170 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f171 = function(value) { return value; };
  var peg$f172 = function(value) { return value; };
  var peg$f173 = function(value) { return value; };
  var peg$f174 = function(value) { return value; };
  var peg$f175 = function(command) {
      return {
        type: 'command',
        command: command.parts,
        raw: command.raw
      };
    };
  var peg$f176 = function(code) {
      return {
        type: 'code',
        code: code.parts,
        raw: code.raw
      };
    };
  var peg$f177 = function(ttl, t) { return t; };
  var peg$f178 = function(ttl, trust) {
      return {
        ...(ttl ? { ttl } : {}),
        ...(trust ? { trust } : {})
      };
    };
  var peg$f179 = function(trust) {
      return { trust };
    };
  var peg$f180 = function(value) {
      return value;
    };
  var peg$f181 = function(duration) { return { type: 'duration', ...duration }; };
  var peg$f182 = function(special) { return { type: 'special', value: special }; };
  var peg$f183 = function(num, unit) {
      const seconds = helpers.ttlToSeconds(num, unit);
      return { value: num, unit, seconds };
    };
  var peg$f184 = function() { return "seconds"; };
  var peg$f185 = function() { return "minutes"; };
  var peg$f186 = function() { return "hours"; };
  var peg$f187 = function() { return "days"; };
  var peg$f188 = function() { return "weeks"; };
  var peg$f189 = function() { return "live"; };
  var peg$f190 = function() { return "static"; };
  var peg$f191 = function(level) {
      return level;
    };
  var peg$f192 = function() { return "always"; };
  var peg$f193 = function() { return "verify"; };
  var peg$f194 = function() { return "never"; };
  var peg$f195 = function(digits) {
      return parseInt(digits.join(''), 10);
    };
  var peg$f196 = function(pipeline, op, next) { 
      return { operator: op, pipeline: next }; 
    };
  var peg$f197 = function(pipeline, rest) {
      // Build command structure with all pipelines
      const allCommands = [];
      const allBases = [];
      
      // Process first pipeline
      pipeline.commands.forEach(cmd => {
        allCommands.push(cmd);
        if (cmd.base) {
          allBases.push(cmd.base);
        }
      });
      
      // Process chained pipelines
      rest.forEach(item => {
        allCommands.push({
          type: 'operator',
          operator: item.operator
        });
        
        item.pipeline.commands.forEach(cmd => {
          allCommands.push(cmd);
          if (cmd.base) {
            allBases.push(cmd.base);
          }
        });
      });
      
      return {
        commands: allCommands,
        commandBases: allBases
      };
    };
  var peg$f198 = function() { return '&&'; };
  var peg$f199 = function() { return '||'; };
  var peg$f200 = function() { return ';'; };
  var peg$f201 = function(first, cmd) { return cmd; };
  var peg$f202 = function(first, rest) {
      const commands = [first];
      
      if (rest.length > 0) {
        // Add pipe operators between commands
        rest.forEach((cmd, i) => {
          commands.push({ type: 'operator', operator: '|' });
          commands.push(cmd);
        });
      }
      
      return { commands };
    };
  var peg$f203 = function(cmd, arg) { return arg; };
  var peg$f204 = function(cmd, args) {
      // Detect command base patterns
      const cmdText = cmd.content || cmd.identifier || '';
      let base = null;
      let hasScriptRunner = false;
      
      // Check for script runner patterns
      if (args.length >= 1 && ['npm', 'yarn', 'pnpm', 'bun'].includes(cmdText)) {
        const firstArg = args[0];
        if (firstArg.type === 'Text' && firstArg.content === 'run' && args[1]) {
          // Script runner detected
          const script = args[1].type === 'Text' ? args[1].content : args[1].identifier;
          base = helpers.createNode(NodeType.CommandBase, {
            command: cmdText + ' run',
            script: script,
            isScriptRunner: true,
            location: cmd.location
          });
          hasScriptRunner = true;
        }
      } else if (cmdText === 'npx' && args[0]) {
        // npx pattern
        const pkg = args[0].type === 'Text' ? args[0].content : args[0].identifier;
        base = helpers.createNode(NodeType.CommandBase, {
          command: 'npx',
          package: pkg,
          isPackageRunner: true,
          location: cmd.location
        });
      } else if (cmdText === 'python' && args[0]?.content === '-m' && args[1]) {
        // python -m pattern
        const mod = args[1].type === 'Text' ? args[1].content : args[1].identifier;
        base = helpers.createNode(NodeType.CommandBase, {
          command: 'python -m',
          module: mod,
          location: cmd.location
        });
      } else {
        // Regular command
        base = helpers.createNode(NodeType.CommandBase, {
          command: cmdText,
          location: cmd.location
        });
      }
      
      return {
        type: 'command',
        command: cmd,
        arguments: args,
        base: base,
        hasScriptRunner: hasScriptRunner
      };
    };
  var peg$f205 = function(word) {
      return helpers.createNode(NodeType.Text, { 
        content: word, 
        location: location() 
      });
    };
  var peg$f206 = function(word) {
      return helpers.createNode(NodeType.Text, { 
        content: word, 
        location: location() 
      });
    };
  var peg$f207 = function(id) {
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: id,
        location: location()
      });
    };
  var peg$f208 = function(content) {
      const text = content.map(c => c.content || c.identifier || c).join('');
      return helpers.createNode(NodeType.Text, { 
        content: text, 
        location: location() 
      });
    };
  var peg$f209 = function(content) {
      const text = content.join('');
      return helpers.createNode(NodeType.Text, { 
        content: text, 
        location: location() 
      });
    };
  var peg$f210 = function(chars) { return { content: chars }; };
  var peg$f211 = function(chars) { return chars; };
  var peg$f212 = function(content) {
      helpers.debug('UnifiedCodeBrackets matched', { content });
      return {
        content: content.trim(),
        isMultiLine: content.includes('\n')
      };
    };
  var peg$f213 = function(parts) {
      helpers.debug('UnifiedCommandBrackets matched', { parts });
      
      const rawCommand = helpers.reconstructRawString(parts);
      
      // Extract command bases
      let commandBases = [];
      let rawBases = [];
      
      // Simple command base detection from first text segment
      if (parts.length > 0 && parts[0].type === NodeType.Text) {
        const cmdMatch = parts[0].content.match(/^(\S+)/);
        if (cmdMatch) {
          commandBases.push(helpers.createNode(NodeType.CommandBase, {
            command: cmdMatch[1],
            location: parts[0].location
          }));
          rawBases.push(cmdMatch[1]);
        }
      }
      
      return {
        type: 'command',
        subtype: 'runCommand',
        values: {
          command: parts,
          commandBases: commandBases
        },
        raw: {
          command: rawCommand,
          commandBases: rawBases
        },
        meta: {
          isMultiLine: rawCommand.includes('\n'),
          commandCount: commandBases.length,
          hasScriptRunner: false // TODO: Detect script runners
        }
      };
    };
  var peg$f214 = function(content) {
      helpers.debug('UnifiedRunContent matched', { content });
      return content;
    };
  var peg$f215 = function(lang, ws, rest) {
      // Language detected -> Code execution
      helpers.debug('UnifiedRunContentInner detected code', { lang, rest });
      
      const langNode = helpers.createNode(NodeType.Text, { content: lang, location: location() });
      const codeNode = helpers.createNode(NodeType.Text, { content: rest.trim(), location: location() });
      
      return {
        type: 'code',
        subtype: 'runCode',
        values: {
          lang: [langNode],
          args: [], // TODO: Could support args in future like [(js(x, y) return x + y)]
          code: [codeNode]
        },
        raw: {
          lang: lang,
          args: [],
          code: rest.trim()
        },
        meta: {
          isMultiLine: rest.includes('\n'),
          language: lang,
          hasVariables: false // Code blocks don't support variable interpolation
        }
      };
    };
  var peg$f216 = function(parts) {
      // No language -> Command execution
      helpers.debug('UnifiedRunContentInner detected command', { parts });
      
      const rawCommand = helpers.reconstructRawString(parts);
      
      // Extract command bases
      let commandBases = [];
      let rawBases = [];
      
      // Simple command base detection from first text segment
      if (parts.length > 0 && parts[0].type === NodeType.Text) {
        const cmdMatch = parts[0].content.match(/^(\S+)/);
        if (cmdMatch) {
          commandBases.push(helpers.createNode(NodeType.CommandBase, {
            command: cmdMatch[1],
            location: parts[0].location
          }));
          rawBases.push(cmdMatch[1]);
        }
      }
      
      return {
        type: 'command',
        subtype: 'runCommand',
        values: {
          command: parts,
          commandBases: commandBases
        },
        raw: {
          command: rawCommand,
          commandBases: rawBases
        },
        meta: {
          isMultiLine: rawCommand.includes('\n'),
          commandCount: commandBases.length,
          hasScriptRunner: false // TODO: Detect script runners
        }
      };
    };
  var peg$f217 = function(parts) {
      return parts;
    };
  var peg$f218 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
    };
  var peg$f219 = function(chars) {
      const content = chars.join('');
      return helpers.createNode(NodeType.Text, { content, location: location() });
    };
  var peg$f220 = function(inner) {
      // Preserve brackets in commands
      return '[' + inner + ']';
    };
  var peg$f221 = function(char) { return char; };
  var peg$f222 = function(chars) {
      return chars.join('');
    };
  var peg$f223 = function(inner) {
      // Handle deeply nested brackets
      return '[' + inner + ']';
    };
  var peg$f224 = function(char) { return char; };
  var peg$f225 = function(chars) {
      return chars.join('');
    };
  var peg$f226 = function(inner) {
      // Preserve brackets in code
      return '[' + inner + ']';
    };
  var peg$f227 = function(char) { return char; };
  var peg$f228 = function(chars) {
      return chars.join('');
    };
  var peg$f229 = function(inner) {
      // Handle deeply nested brackets
      return '[' + inner + ']';
    };
  var peg$f230 = function(char) { return char; };
  var peg$f231 = function() {
      // @. is always PROJECTPATH
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: 'PROJECTPATH',
        isSpecial: true,
        originalForm: '@.'
      }, location());
    };
  var peg$f232 = function(id) {
      // Normalize to uppercase and handle deprecations
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: id.normalized,
        isSpecial: true,
        originalCase: id.original,
        ...(id.deprecated ? { deprecated: true } : {})
      }, location());
    };
  var peg$f233 = function(id) { return { original: id, normalized: 'TIME' }; };
  var peg$f234 = function(id) { return { original: id, normalized: 'PROJECTPATH' }; };
  var peg$f235 = function(id) { return { original: id, normalized: 'INPUT' }; };
  var peg$f236 = function(id) { return { original: id, normalized: 'DEBUG' }; };
  var peg$f237 = function(id) { return { original: id, normalized: 'INPUT', deprecated: true }; };
  var peg$f238 = function(chars) { return chars.join(''); };
  var peg$f239 = function(chars) { return chars.join(''); };
  var peg$f240 = function(chars) { return chars.join(''); };
  var peg$f241 = function(chars) { return chars.join(''); };
  var peg$f242 = function(chars) { return chars.join(''); };
  var peg$f243 = function(id) {
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: 'frontmatter',
        fields: id.fields
      }, location());
    };
  var peg$f244 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      const node = helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
      helpers.debug('CreateVAR', { rule: 'AtVar', node, fields: fields });
      return node;
    };
  var peg$f245 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      const node = helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        fields: fields
      }, location());
      helpers.debug('CreateVAR', { rule: 'AtVar with bracket', node, fields: fields });
      return node;
    };
  var peg$f246 = function(id, format) {
      const node = helpers.createVariableReferenceNode('varInterpolation', {
        identifier: id.normalized,
        isSpecial: true,
        originalCase: id.original,
        ...(format ? { format } : {}),
        ...(id.deprecated ? { deprecated: true } : {})
      }, location());
      helpers.debug('CreateVAR', { rule: 'InterpolationSpecialVar', node });
      return node;
    };
  var peg$f247 = function(id, format) {
      const node = helpers.createVariableReferenceNode('varInterpolation', {
        identifier: id,
        ...(format ? { format } : {})
      }, location());
      helpers.debug('CreateVAR', { rule: 'InterpolationSimpleVar', node });
      return node;
    };
  var peg$f248 = function(id, fields, format) {
      const node = helpers.createVariableReferenceNode('varInterpolation', {
        identifier: id,
        fields: fields || [],
        ...(format ? { format } : {})
      }, location());
      helpers.debug('CreateVAR', { rule: 'InterpolationDataVar', node });
      return node;
    };
  var peg$f249 = function(format) {
      return format;
    };
  var peg$f250 = function(field, rest) {
      return {
        fields: [
          { type: 'dot', value: field },
          ...rest
        ]
      };
    };
  var peg$f251 = function(object) {
      helpers.debug('WithClause matched', { object });
      return object;
    };
  var peg$f252 = function(props) {
      const result = {};
      if (props) {
        for (const [key, value] of props) {
          result[key] = value;
        }
      }
      return result;
    };
  var peg$f253 = function(first, prop) { return prop; };
  var peg$f254 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f255 = function(pipeline) {
      return ["pipeline", pipeline];
    };
  var peg$f256 = function(needs) {
      return ["needs", needs];
    };
  var peg$f257 = function(commands) {
      return commands || [];
    };
  var peg$f258 = function(first, cmd) { return cmd; };
  var peg$f259 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f260 = function(ref) {
      helpers.debug('PipelineCommand matched', { ref });
      return {
        identifier: ref.identifier,
        args: ref.args || [],
        fields: ref.fields || [],
        rawIdentifier: ref.rawIdentifier,
        rawArgs: ref.rawArgs || []
      };
    };
  var peg$f261 = function(langs) {
      const result = {};
      if (langs) {
        for (const [lang, packages] of langs) {
          result[lang] = packages;
        }
      }
      return result;
    };
  var peg$f262 = function(first, entry) { return entry; };
  var peg$f263 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f264 = function(lang, packages) {
      return [lang, packages];
    };
  var peg$f265 = function(packages) {
      const result = {};
      if (packages) {
        for (const [pkg, version] of packages) {
          result[pkg] = version;
        }
      }
      return result;
    };
  var peg$f266 = function(first, entry) { return entry; };
  var peg$f267 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f268 = function(pkg, version) {
      return [pkg, version];
    };
  var peg$f269 = function(path) {
      helpers.debug('AddPathCore matched path', { path });
      
      return {
        type: 'addPath',
        values: { path: path.values.path || path.values.url },
        raw: { path: path.raw.path || path.raw.url },
        meta: {
          ...path.meta,
          pathSubtype: path.subtype // Preserve the specific path type
        }
      };
    };
  var peg$f270 = function(template) {
      helpers.debug('AddTemplateCore matched template', { template });
      
      return {
        type: 'addTemplate',
        values: { content: template.values.content },
        raw: { content: template.raw.content },
        meta: template.meta
      };
    };
  var peg$f271 = function(varRef) {
      helpers.debug('AddVariableCore matched variable', { varRef });
      
      return {
        type: 'addVariable',
        values: { variable: [varRef] },
        raw: { variable: `@${varRef.identifier}` },
        meta: {
          hasFieldAccess: !!(varRef.fields && varRef.fields.length > 0)
        }
      };
    };
  var peg$f272 = function(id, args) {
      helpers.debug('AddTemplateInvocationCore matched', { id, args });
      
      const processedArgs = args || [];
      
      return {
        type: 'addTemplateInvocation',
        values: {
          templateName: [helpers.createNode(NodeType.Text, { content: id, location: location() })],
          arguments: processedArgs
        },
        raw: {
          templateName: id,
          arguments: processedArgs.map(arg => {
            if (arg.type === 'string') return `"${arg.value}"`;
            if (arg.type === 'variable') return `@${arg.value.identifier}`;
            return arg.value || '';
          })
        },
        meta: {
          argumentCount: processedArgs.length
        }
      };
    };
  var peg$f273 = function(sectionTitle, path, rename) {
      helpers.debug('AddPathSectionCore matched', { sectionTitle, path, rename });
      
      return {
        type: 'addPathSection',
        values: {
          sectionTitle: sectionTitle,
          path: path.values.path || path.values.url,
          ...(rename ? { newTitle: rename } : {})
        },
        raw: {
          sectionTitle: sectionTitle[0].content,
          path: path.raw.path || path.raw.url,
          ...(rename ? { newTitle: rename[0].content } : {})
        },
        meta: {
          hasRename: !!rename,
          ...path.meta,
          pathSubtype: path.subtype // Preserve the specific path type
        }
      };
    };
  var peg$f274 = function(pathText, sectionText, rename) {
      helpers.debug('AddPathSectionCore matched bracketed', { pathText, sectionText, rename });
      
      const rawPath = pathText.trim();
      const pathParts = [helpers.createNode(NodeType.Text, { content: rawPath, location: location() })];
      
      return {
        type: 'addPathSection',
        values: {
          sectionTitle: [helpers.createNode(NodeType.Text, { content: sectionText.trim(), location: location() })],
          path: pathParts,
          ...(rename ? { newTitle: rename } : {})
        },
        raw: {
          sectionTitle: sectionText.trim(),
          path: rawPath,
          ...(rename ? { newTitle: rename[0].content } : {})
        },
        meta: {
          hasRename: !!rename,
          hasVariables: false,
          isAbsolute: rawPath.startsWith('/'),
          hasExtension: /\.[a-zA-Z0-9]+$/.test(rawPath),
          extension: rawPath.match(/\.([a-zA-Z0-9]+)$/)?.[1] || null
        }
      };
    };
  var peg$f275 = function(code) {
      helpers.debug('CodeCore matched code block', { code });
    
      // Extract language hint if present in brackets
      let language = null;
      let codeContent = code.raw;
      
      // Check for language hint in format [language: code]
      const langMatch = code.raw.match(/^\s*\[([a-zA-Z0-9_+#.]+)\s*:\s*([\s\S]*)\]\s*$/);
      if (langMatch) {
        language = langMatch[1];
        codeContent = langMatch[2];
      }
    
      // Structure for outputting a code block
      return {
        type: 'code',
        subtype: 'codeBlock',
        values: { 
          code: code.parts,
          ...(language ? { language: [helpers.createNode(NodeType.Text, { content: language, location: location() })] } : {})
        },
        raw: { 
          code: codeContent,
          ...(language ? { language } : {})
        },
        meta: {
          hasLanguage: !!language,
          language: language || 'text',
          hasVariables: false,  // Code blocks don't support variable interpolation
          isMultiLine: codeContent.includes('\n')
        }
      };
    };
  var peg$f276 = function(language, code) {
      helpers.debug('LanguageCodeCore matched', { language, code });
    
      // Structure for outputting language-specific code
      return {
        type: 'code',
        subtype: 'languageCode',
        values: { 
          language: [helpers.createNode(NodeType.Text, { content: language, location: location() })],
          code: code.parts
        },
        raw: { 
          language,
          code: code.raw
        },
        meta: {
          hasLanguage: true,
          language,
          hasVariables: false,  // Code blocks don't support variable interpolation
          isMultiLine: code.raw.includes('\n')
        }
      };
    };
  var peg$f277 = function(language, args, code) {
      helpers.debug('RunLanguageCodeCore matched', { language, args, code });
      
      // Create language node
      const langNode = helpers.createNode(NodeType.Text, { content: language, location: location() });
      
      // Process code content - get from bracketed content
      const codeContent = code[0].content;
      
      // Build values and raw objects
      const values = {
        lang: [langNode],
        args: args || [],
        code: code
      };
      
      const raw = {
        lang: language,
        args: args ? args.map(arg => arg.identifier || '') : [],
        code: codeContent
      };
      
      // Add metadata
      const meta = {
        isMultiLine: codeContent.includes('\n'),
        language: language,
        hasVariables: false  // Code blocks don't support variable interpolation
      };
      
      // Return a structured result that can be used by both directives
      return {
        type: 'runCode',
        values,
        raw,
        meta,
        location: location()
      };
    };
  var peg$f278 = function(lang) {
      return lang;
    };
  var peg$f279 = function(language) {
      return language;
    };
  var peg$f280 = function(args) {
      return args || [];
    };
  var peg$f281 = function(first, arg) { return arg; };
  var peg$f282 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f283 = function(varName) {
      return helpers.createVariableReferenceNode('varInterpolation', { identifier: varName }, location());
    };
  var peg$f284 = function(command) {
      helpers.debug('CommandCore matched command', { command });
      
      // Try to parse the command string with the shell parser to extract command bases
      let commandBases = [];
      let rawBases = [];
      let hasScriptRunner = false;
      
      // First, try to use the shell parser on the raw command string
      try {
        // We need to parse the raw command string to detect pipes and command bases
        const rawCommandString = command.raw;
        
        // Use a simplified regex-based approach to detect command bases
        // This handles pipes, &&, ||, and ; operators
        const commandSegments = rawCommandString.split(/\s*(\||&&|\|\||;)\s*/);
        
        for (let i = 0; i < commandSegments.length; i += 2) {
          const segment = commandSegments[i].trim();
          if (!segment) continue;
          
          // Extract the first word as the command base
          const match = segment.match(/^(\S+)/);
          if (match) {
            const cmdBase = match[1];
            
            // Check for script runner patterns
            const runnerMatch = segment.match(/^(npm|yarn|pnpm|bun)\s+run\s+(\S+)/);
            if (runnerMatch) {
              commandBases.push(helpers.createNode(NodeType.CommandBase, {
                command: runnerMatch[1] + ' run',
                script: runnerMatch[2],
                isScriptRunner: true,
                location: location()
              }));
              rawBases.push(runnerMatch[1] + ' run');
              hasScriptRunner = true;
            } else if (segment.match(/^npx\s+(\S+)/)) {
              const npxMatch = segment.match(/^npx\s+(\S+)/);
              commandBases.push(helpers.createNode(NodeType.CommandBase, {
                command: 'npx',
                package: npxMatch[1],
                isPackageRunner: true,
                location: location()
              }));
              rawBases.push('npx');
              hasScriptRunner = true;
            } else if (segment.match(/^python\s+-m\s+(\S+)/)) {
              const pythonMatch = segment.match(/^python\s+-m\s+(\S+)/);
              commandBases.push(helpers.createNode(NodeType.CommandBase, {
                command: 'python -m',
                module: pythonMatch[1],
                location: location()
              }));
              rawBases.push('python -m');
            } else {
              // Regular command
              commandBases.push(helpers.createNode(NodeType.CommandBase, {
                command: cmdBase,
                location: location()
              }));
              rawBases.push(cmdBase);
            }
          }
        }
      } catch (e) {
        // Fallback to simple detection if parsing fails
        helpers.debug('Shell parsing failed, using simple detection', { error: e.message });
        
        if (command.parts && command.parts.length > 0) {
          const firstPart = command.parts[0];
          if (firstPart.type === NodeType.Text && firstPart.content) {
            const cmdText = firstPart.content.trim();
            commandBases.push(helpers.createNode(NodeType.CommandBase, {
              command: cmdText,
              location: firstPart.location
            }));
            rawBases.push(cmdText);
          }
        }
      }
    
      // Structure for outputting a shell command with command bases
      return {
        type: 'command',
        subtype: 'shellCommand',
        values: { 
          command: command.parts,
          commandBases: commandBases
        },
        raw: { 
          command: command.raw,
          commandBases: rawBases
        },
        meta: {
          ...helpers.createCommandMetadata(command.parts),
          commandCount: commandBases.length,
          hasScriptRunner: hasScriptRunner
        }
      };
    };
  var peg$f285 = function(command, params) {
      helpers.debug('ParameterizedCommandCore matched', { command, params });
      
      // Use the same command base detection logic
      const commandBases = [];
      const rawBases = [];
      let hasScriptRunner = false;
      
      if (command.parts && command.parts.length > 0) {
        const firstPart = command.parts[0];
        if (firstPart.type === NodeType.Text && firstPart.content) {
          const cmdText = firstPart.content.trim();
          commandBases.push(helpers.createNode(NodeType.CommandBase, {
            command: cmdText,
            location: firstPart.location
          }));
          rawBases.push(cmdText);
        }
      }
    
      // Structure for outputting a command with parameters
      return {
        type: 'command',
        subtype: 'parametrizedCommand',
        values: { 
          command: command.parts,
          commandBases: commandBases,
          ...(params ? { params: params.values } : {})
        },
        raw: { 
          command: command.raw,
          commandBases: rawBases,
          ...(params ? { params: params.raw } : {})
        },
        meta: {
          ...helpers.createCommandMetadata(command.parts),
          commandCount: commandBases.length,
          hasScriptRunner: hasScriptRunner,
          hasParams: !!params
        }
      };
    };
  var peg$f286 = function(params) {
      return params;
    };
  var peg$f287 = function(first, param) { return param; };
  var peg$f288 = function(first, rest) {
      const allParams = [first, ...rest];
      
      // Extract values and raw representation
      const values = allParams.reduce((acc, param) => {
        acc[param.key] = param.value;
        return acc;
      }, {});
      
      const raw = allParams.map(param => 
        `${param.key}=${typeof param.value === 'string' ? 
          JSON.stringify(param.value) : param.value}`
      ).join(',');
      
      return { values, raw };
    };
  var peg$f289 = function(key, value) {
      return { key, value };
    };
  var peg$f290 = function(path) {
      helpers.debug('PathCore matched path', { path });
    
      // Structure for outputting a filesystem path
      return {
        type: 'path',
        subtype: 'filesystemPath',
        values: { 
          path: path.parts 
        },
        raw: { 
          path: path.raw 
        },
        meta: helpers.createPathMetadata(path.raw, path.parts)
      };
    };
  var peg$f291 = function(path, section) {
      helpers.debug('SectionPathCore matched', { path, section });
      
      // Path with section marker for specific imports
      return {
        type: 'path',
        subtype: 'sectionPath',
        values: { 
          path: path.parts,
          section: [helpers.createNode(NodeType.Text, { content: section, location: location() })]
        },
        raw: { 
          path: path.raw,
          section
        },
        meta: {
          ...helpers.createPathMetadata(path.raw, path.parts),
          hasSection: true
        }
      };
    };
  var peg$f292 = function(protocol, rest) {
      const fullUrl = `${protocol}:${rest}`;
      helpers.debug('URLPathCore matched', { fullUrl });
      
      // URL path with protocol
      return {
        type: 'path',
        subtype: 'urlPath',
        values: { 
          url: [helpers.createNode(NodeType.Text, { content: fullUrl, location: location() })],
          protocol: [helpers.createNode(NodeType.Text, { content: protocol, location: location() })]
        },
        raw: { 
          url: fullUrl,
          protocol
        },
        meta: {
          isUrl: true,
          protocol
        }
      };
    };
  var peg$f293 = function(proto) {
      return proto;
    };
  var peg$f294 = function(content) {
      return content;
    };
  var peg$f295 = function(commandRef) {
      helpers.debug('RunExecCore matched command reference', { commandRef });
      
      return {
        type: 'runExec',
        values: {
          identifier: commandRef.identifier,
          args: commandRef.args || []
        },
        raw: {
          identifier: commandRef.rawIdentifier,
          args: commandRef.rawArgs || []
        },
        meta: {
          argumentCount: commandRef.args ? commandRef.args.length : 0
        }
      };
    };
  var peg$f296 = function(section, path, rename) {
      const result = {
        section: section,
        path: path.values.path || path.values.url,
        pathSubtype: path.subtype
      };
      
      if (rename) {
        result.rename = rename;
      }
      
      result.meta = {
        hasRename: !!rename,
        pathSubtype: path.subtype
      };
      
      return result;
    };
  var peg$f297 = function(template) {
      helpers.debug('TemplateCore matched template', { template });
    
      // Determine if this content has variables
      const hasVariables = template.parts.some(part => 
        part && part.type === NodeType.VariableReference
      );
      
      // Use wrapper type to determine if this is template content
      // Double brackets [[...]] always indicate template content
      // For now, use direct string comparison rather than WrapperType constant
      const isTemplateContent = template.wrapperType === 'doubleBracket';
    
      // Structure for outputting a template
      return {
        type: 'template',
        subtype: 'standardTemplate',
        values: { 
          content: template.parts 
        },
        raw: { 
          content: template.raw 
        },
        meta: {
          ...helpers.createTemplateMetadata(template.parts, template.wrapperType),
          wrapperType: template.wrapperType
        }
      };
    };
  var peg$f298 = function(template, options) {
      helpers.debug('RichTemplateCore matched rich template', { template, options });
    
      // Structure for outputting a rich template with options
      return {
        type: 'template',
        subtype: 'richTemplate',
        values: { 
          content: template.parts,
          ...(options ? { options } : {})
        },
        raw: { 
          content: template.raw,
          ...(options ? { options: options.raw } : {})
        },
        meta: {
          ...helpers.createTemplateMetadata(template.parts, template.wrapperType),
          hasOptions: !!options
        }
      };
    };
  var peg$f299 = function(options) {
      return options;
    };
  var peg$f300 = function(first, option) { return option; };
  var peg$f301 = function(first, rest) {
      const allOptions = [first, ...rest];
      const optionsObj = allOptions.reduce((acc, opt) => {
        acc[opt.key] = opt.value;
        return acc;
      }, {});
      
      return {
        options: optionsObj,
        raw: allOptions.map(opt => `${opt.key}=${opt.value}`).join(',')
      };
    };
  var peg$f302 = function(key, value) {
      return { key, value };
    };
  var peg$f303 = function(content) { return content.type === 'doubleBracketSection'; };
  var peg$f304 = function(content, rename) {
      helpers.debug('AtAdd matched double-bracketed path section', { content, rename });
      
      const rawPath = content.raw.split(' # ')[0];
      const sectionText = content.section;
      
      // Create values object
      const values = {
        sectionTitle: [helpers.createNode(NodeType.Text, { content: sectionText, location: location() })],
        path: content.parts
      };
      
      // Add new title if provided
      if (rename) {
        values.newTitle = rename;
      }
      
      // Create raw object
      const raw = {
        sectionTitle: sectionText,
        path: rawPath
      };
      
      // Add new title to raw if present
      if (rename) {
        raw.newTitle = rename[0].content;
      }
      
      // Create meta object with path metadata
      const meta = {
        path: helpers.createPathMetadata(rawPath, content.parts)
      };
      
      return helpers.createStructuredDirective(
        'add', 
        'addPathSection', 
        values, 
        raw, 
        meta, 
        location(),
        'section'  // Added source parameter
      );
    };
  var peg$f305 = function(content) { return content.type === 'sectionPath'; };
  var peg$f306 = function(content, rename) {
      helpers.debug('AtAdd matched bracketed path section', { content, rename });
      
      const rawPath = content.raw.split(' # ')[0];
      const sectionText = content.section;
      
      // Create values object
      const values = {
        sectionTitle: [helpers.createNode(NodeType.Text, { content: sectionText, location: location() })],
        path: content.parts
      };
      
      // Add new title if provided
      if (rename) {
        values.newTitle = rename;
      }
      
      // Create raw object
      const raw = {
        sectionTitle: sectionText,
        path: rawPath
      };
      
      // Add new title to raw if present
      if (rename) {
        raw.newTitle = rename[0].content;
      }
      
      // Create meta object with path metadata
      const meta = {
        path: helpers.createPathMetadata(rawPath, content.parts)
      };
      
      return helpers.createStructuredDirective(
        'add', 
        'addPathSection', 
        values, 
        raw, 
        meta, 
        location(),
        'section'  // Added source parameter
      );
    };
  var peg$f307 = function(sectionTitle, path, s) { return s; };
  var peg$f308 = function(sectionTitle, path, security, asTitle) {
      // This rule should match section syntax FIRST before the template rule below
      helpers.debug('AtAdd matched section', { sectionTitle, path, asTitle, security });
      
      // Process the section title and path
      const sectionTitleNode = sectionTitle[0]; // Get the first node from the array
      
      // Create values object
      const values = {
        sectionTitle: sectionTitle,
        path: path.values.path || path.values.url
      };
      
      // Add new title if provided
      if (asTitle) {
        values.newTitle = asTitle;
      }
      
      // Create raw object
      const raw = {
        sectionTitle: sectionTitleNode.content,
        path: path.raw.path || path.raw.url
      };
      
      // Add new title to raw if present
      if (asTitle) {
        raw.newTitle = asTitle[0].content;
      }
      
      // Create meta object with path metadata
      const meta = {
        path: {
          ...path.meta,
          pathSubtype: path.subtype // Preserve the specific path type
        },
        ...helpers.createSecurityMeta(security)
      };
      
      return helpers.createStructuredDirective(
        'add', 
        'addPathSection', 
        values, 
        raw, 
        meta, 
        location(),
        'section'  // Added source parameter
      );
    };
  var peg$f309 = function(security, template, headerLevel, underHeader) {
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtAdd matched template content', { template, headerLevel, underHeader });
      
      // Extract header level and under header if provided
      const headerLevelValue = headerLevel ? headerLevel : null;
      const underHeaderValue = underHeader ? underHeader : null;
      
      // Create values object with template content
      const values = {
        content: template.values.content
      };
      
      // Add headerLevel and underHeader if present
      if (headerLevelValue) {
        values.headerLevel = [helpers.createNode(NodeType.Number, {
          value: headerLevelValue.value,
          raw: headerLevelValue.raw,
          location: location()
        })];
      }
      
      if (underHeaderValue) {
        values.underHeader = [helpers.createNode(NodeType.Text, {
          content: underHeaderValue,
          raw: underHeaderValue,
          location: location()
        })];
      }
      
      // Create raw object with raw content string
      const raw = {
        content: template.raw.content
      };
      
      // Add headerLevel and underHeader to raw if present
      if (headerLevelValue) {
        raw.headerLevel = headerLevelValue.raw;
      }
      
      if (underHeaderValue) {
        raw.underHeader = underHeaderValue;
      }
      
      // Create meta object with isTemplateContent flag and security
      const meta = {
        isTemplateContent: true,
        ...template.meta,
        ...helpers.createSecurityMeta(securityOptions)
      };
      
      return helpers.createStructuredDirective(
        'add', 
        'addTemplate', 
        values, 
        raw, 
        meta, 
        location(),
        'template'  // Added source parameter
      );
    };
  var peg$f310 = function(id, args, headerLevel, underHeader) {
      helpers.debug('AtAdd matched template invocation', { id, args, headerLevel, underHeader });
      
      // Process arguments
      const processedArgs = args || [];
      
      // Extract header level and under header if provided
      const headerLevelValue = headerLevel ? headerLevel : null;
      const underHeaderValue = underHeader ? underHeader : null;
      
      // Create values object with template name and arguments
      const values = {
        templateName: [helpers.createNode(NodeType.Text, { content: id, location: location() })],
        arguments: processedArgs
      };
      
      // Add headerLevel and underHeader if present
      if (headerLevelValue) {
        values.headerLevel = [helpers.createNode(NodeType.Number, {
          value: headerLevelValue.value,
          raw: headerLevelValue.raw,
          location: location()
        })];
      }
      
      if (underHeaderValue) {
        values.underHeader = [helpers.createNode(NodeType.Text, {
          content: underHeaderValue,
          raw: underHeaderValue,
          location: location()
        })];
      }
      
      // Create raw object with template invocation syntax
      const raw = {
        templateName: id,
        arguments: processedArgs.map(arg => {
          if (arg.type === 'string') return `"${arg.value}"`;
          if (arg.type === 'variable') return `@${arg.value.identifier}`;
          return arg.value || '';
        })
      };
      
      // Add headerLevel and underHeader to raw if present
      if (headerLevelValue) {
        raw.headerLevel = headerLevelValue.raw;
      }
      
      if (underHeaderValue) {
        raw.underHeader = underHeaderValue;
      }
      
      // Create meta object for template invocation
      const meta = {
        isTemplateInvocation: true,
        argumentCount: processedArgs.length
      };
      
      return helpers.createStructuredDirective(
        'add', 
        'addTemplateInvocation', 
        values, 
        raw, 
        meta, 
        location(),
        'templateInvocation'
      );
    };
  var peg$f311 = function(security, varRef, headerLevel, underHeader) {
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtAdd matched variable reference', { varRef, headerLevel, underHeader });
      
      // Extract variable reference information
      const id = varRef.identifier;
      
      // Extract header level and under header if provided
      const headerLevelValue = headerLevel ? headerLevel : null;
      const underHeaderValue = underHeader ? underHeader : null;
      
      // Create values object with variable node array
      const values = {
        variable: [varRef]
      };
      
      // Add headerLevel and underHeader if present
      if (headerLevelValue) {
        values.headerLevel = [helpers.createNode(NodeType.Number, {
          value: headerLevelValue.value,
          raw: headerLevelValue.raw,
          location: location()
        })];
      }
      
      if (underHeaderValue) {
        values.underHeader = [helpers.createNode(NodeType.Text, {
          content: underHeaderValue,
          raw: underHeaderValue,
          location: location()
        })];
      }
      
      // Create raw object with raw variable string
      const raw = {
        variable: `@${id}`
      };
      
      // Add headerLevel and underHeader to raw if present
      if (headerLevelValue) {
        raw.headerLevel = headerLevelValue.raw;
      }
      
      if (underHeaderValue) {
        raw.underHeader = underHeaderValue;
      }
      
      // Create meta object with security options
      const meta = {
        ...helpers.createSecurityMeta(securityOptions)
      };
      
      return helpers.createStructuredDirective(
        'add', 
        'addVariable', 
        values, 
        raw, 
        meta, 
        location(),
        'variable'  // Added source parameter
      );
    };
  var peg$f312 = function(security, content, headerLevel, underHeader) {
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtAdd matched quoted string', { content, headerLevel, underHeader, securityOptions });
      
      // Create path structure
      const path = {
        type: 'path',
        subtype: 'filePath',
        values: { 
          path: [helpers.createNode(NodeType.Text, { content, location: location() })]
        },
        raw: { 
          path: content
        },
        meta: helpers.createPathMetadata(content, [helpers.createNode(NodeType.Text, { content, location: location() })])
      };
      
      // Extract header level and under header if provided
      const headerLevelValue = headerLevel ? headerLevel : null;
      const underHeaderValue = underHeader ? underHeader : null;
      
      // Create values object with path parts
      const values = {
        path: path.values.path
      };
      
      // Add headerLevel and underHeader if present
      if (headerLevelValue) {
        values.headerLevel = [helpers.createNode(NodeType.Number, {
          value: headerLevelValue.value,
          raw: headerLevelValue.raw,
          location: location()
        })];
      }
      
      if (underHeaderValue) {
        values.underHeader = [helpers.createNode(NodeType.Text, {
          content: underHeaderValue,
          raw: underHeaderValue,
          location: location()
        })];
      }
      
      // Create raw object with raw path string
      const raw = {
        path: content
      };
      
      // Add headerLevel and underHeader to raw if present
      if (headerLevelValue) {
        raw.headerLevel = headerLevelValue.raw;
      }
      
      if (underHeaderValue) {
        raw.underHeader = underHeaderValue;
      }
      
      // Create meta object with path metadata and security
      const meta = {
        path: path.meta,
        ...helpers.createSecurityMeta(securityOptions)
      };
      
      return helpers.createStructuredDirective(
        'add', 
        'addPath', 
        values, 
        raw, 
        meta, 
        location(),
        'path'
      );
    };
  var peg$f313 = function(path, s) { return s; };
  var peg$f314 = function(path, security, headerLevel, underHeader) {
      helpers.debug('AtAdd matched path', { path, headerLevel, underHeader, security });
      
      // Extract header level and under header if provided
      const headerLevelValue = headerLevel ? headerLevel : null;
      const underHeaderValue = underHeader ? underHeader : null;
      
      // Create values object with path parts
      const values = {
        path: path.values.path || path.values.url
      };
      
      // Add headerLevel and underHeader if present
      if (headerLevelValue) {
        values.headerLevel = [helpers.createNode(NodeType.Number, {
          value: headerLevelValue.value,
          raw: headerLevelValue.raw,
          location: location()
        })];
      }
      
      if (underHeaderValue) {
        values.underHeader = [helpers.createNode(NodeType.Text, {
          content: underHeaderValue,
          raw: underHeaderValue,
          location: location()
        })];
      }
      
      // Create raw object with raw path string
      const raw = {
        path: path.raw.path || path.raw.url
      };
      
      // Add headerLevel and underHeader to raw if present
      if (headerLevelValue) {
        raw.headerLevel = headerLevelValue.raw;
      }
      
      if (underHeaderValue) {
        raw.underHeader = underHeaderValue;
      }
      
      // Create meta object with path metadata
      const meta = {
        path: {
          ...path.meta,
          pathSubtype: path.subtype // Preserve the specific path type
        },
        ...helpers.createSecurityMeta(security)
      };
      
      return helpers.createStructuredDirective(
        'add', 
        'addPath', 
        values, 
        raw, 
        meta, 
        location(),
        'path'  // Added source parameter
      );
    };
  var peg$f315 = function(path) {
      return {
        subtype: 'addPath',
        values: { path: path.parts },
        raw: { path: path.raw },
        meta: { 
          path: helpers.createPathMetadata(path.raw, path.parts)
        }
      };
    };
  var peg$f316 = function(path) {
      // Fallback for simple path text
      return {
        subtype: 'addPath',
        values: { path: [helpers.createNode(NodeType.Text, { content: path, location: location() })] },
        raw: { path },
        meta: {}
      };
    };
  var peg$f317 = function(id, accessElements) {
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: id,
        ...(accessElements.length > 0 ? { fields: accessElements } : {})
      }, location());
    };
  var peg$f318 = function(content) {
        return [helpers.createNode(NodeType.Text, { content, location: location() })];
      };
  var peg$f319 = function(content) {
        return [helpers.createNode(NodeType.Text, { content, location: location() })];
      };
  var peg$f320 = function(level) {
    const value = level.length;
    const raw = level.join('');
    return { 
      value: value,
      raw: raw
    };
  };
  var peg$f321 = function(header) {
    return header.trim();
  };
  var peg$f322 = function(title) {
      return title;
    };
  var peg$f323 = function(first, arg) { return arg; };
  var peg$f324 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f325 = function(str) {
      return { type: 'string', value: str };
    };
  var peg$f326 = function(varRef) {
      return { type: 'variable', value: varRef };
    };
  var peg$f327 = function(content) { return content; };
  var peg$f328 = function(content) { return content; };
  var peg$f329 = function(first, id) { return "." + id; };
  var peg$f330 = function(first, rest) {
      return first + rest.join('');
    };
  var peg$f331 = function(id, securityOptions, value) {
      helpers.debug('AtData matched', { id, valueType: value.type });
      
      // Create variable reference node for identifier
      const idNode = helpers.createVariableReferenceNode('identifier', { identifier: id });
      
      // Capture raw text
      const rawIdentifier = id;
      const rawValue = value.rawText || '';
      
      // Create structured values object
      const values = {
        identifier: [idNode]
      };
      
      // Handle different types of values
      if (value.type === "nestedDirective" && value.directive) {
        // Use the full directive node directly
        values.value = value.directive;
      } else if (value.type === "object") {
        // Create a data object structure with nested properties
        values.value = {
          type: 'object',
          properties: value.value
        };
      } else if (value.type === "array") {
        // Create a data array structure
        values.value = {
          type: 'array',
          items: value.value
        };
      } else if (value.type === "template") {
        // Template content - array of content nodes
        values.value = value.value;
      } else if (value.type === "variableReference") {
        // Variable reference - wrap in array
        values.value = [value.value];
      } else if (value.type === "literalPath") {
        // Literal path content - array of content nodes
        values.value = value.value.parts;
      } else {
        // For primitive values, ensure it's a ContentNodeArray
        values.value = Array.isArray(value.value) ? value.value : [value.value];
      }
      
      // Determine the source based on the value type
      let source = null;
      let metaObj = {};
      
      if (value.type === "nestedDirective" && value.directive) {
        source = value.directive.subtype || 'directive';
        metaObj = { nestedDirective: { kind: value.directive.kind } };
      } else if (value.type === "object") {
        source = 'object';
        metaObj = { objectData: { propCount: Object.keys(value.value).length } };
      } else if (value.type === "array") {
        source = 'array';
        metaObj = { arrayData: { itemCount: value.value.length } };
      } else if (value.type === "template") {
        source = 'template';
        metaObj = { templateData: helpers.createTemplateMetadata(value.value, 'quote') };
      } else if (value.type === "variableReference") {
        source = 'variable';
        metaObj = { variableData: { 
          identifier: value.value.identifier,
          hasFieldAccess: !!(value.value.fields && value.value.fields.length > 0)
        } };
      } else if (value.type === "literalPath") {
        source = 'literalPath';
        metaObj = { literalPathData: { 
          raw: value.value.raw,
          hasVariables: value.value.parts.some(p => p.type === NodeType.VariableReference)
        } };
      } else if (value.type === "primitive") {
        source = 'literal';
        // Detect the specific primitive type
        const primitiveValue = value.value;
        if (typeof primitiveValue === 'string') {
          metaObj = { primitiveType: 'string' };
        } else if (typeof primitiveValue === 'number') {
          metaObj = { primitiveType: 'number' };
        } else if (typeof primitiveValue === 'boolean') {
          metaObj = { primitiveType: 'boolean' };
        } else if (primitiveValue === null) {
          metaObj = { primitiveType: 'null' };
        } else if (primitiveValue && primitiveValue.type === NodeType.Null) {
          metaObj = { primitiveType: 'null' };
        } else if (primitiveValue && primitiveValue.type === NodeType.VariableReference) {
          metaObj = { primitiveType: 'variable' };
        }
      }
      
      // Include security options in metadata if present
      if (securityOptions) {
        metaObj.security = securityOptions;
      }
      
      // Return the directive node
      return helpers.createStructuredDirective(
        'data',
        'dataAssignment',
        values,
        {
          identifier: rawIdentifier,
          value: rawValue,
          ...(securityOptions ? { securityOptions: JSON.stringify(securityOptions) } : {})
        },
        metaObj,
        location(),
        source  // Use the determined source type
      );
    };
  var peg$f332 = function(object) {
      return {
        type: "object",
        value: object,
        rawText: JSON.stringify(object, null, 2)
      };
    };
  var peg$f333 = function(array) {
      return {
        type: "array",
        value: array,
        rawText: JSON.stringify(array, null, 2)
      };
    };
  var peg$f334 = function(value) {
      const rawText = typeof value === 'object' && value.type === NodeType.VariableReference ?
                     `@${value.identifier}` :
                     value === null ? 'null' : JSON.stringify(value);
      
      return {
        type: "primitive",
        value,
        rawText
      };
    };
  var peg$f335 = function(parts) {
      const rawCommand = helpers.reconstructRawString(parts);
      
      // Extract command bases
      let commandBases = [];
      let rawBases = [];
      if (parts.length > 0 && parts[0].type === NodeType.Text) {
        const cmdMatch = parts[0].content.match(/^(\S+)/);
        if (cmdMatch) {
          commandBases.push(helpers.createNode(NodeType.CommandBase, {
            command: cmdMatch[1],
            location: parts[0].location
          }));
          rawBases.push(cmdMatch[1]);
        }
      }
      
      const runDirective = helpers.createStructuredDirective(
        'run',
        'runCommand',
        {
          command: parts,
          commandBases: commandBases
        },
        {
          command: rawCommand,
          commandBases: rawBases
        },
        { 
          isDataValue: true,
          isMultiLine: rawCommand.includes('\n'),
          commandCount: commandBases.length,
          hasScriptRunner: false
        },
        location()
      );
      
      return {
        type: "nestedDirective",
        directive: runDirective,
        rawText: "@run [" + rawCommand + "]"
      };
    };
  var peg$f336 = function(exec) {
      const runDirective = helpers.createStructuredDirective(
        'run',
        'runExec',
        exec.values,
        exec.raw,
        {
          ...exec.meta,
          isDataValue: true
        },
        location(),
        'exec'
      );
      
      return {
        type: "nestedDirective",
        directive: runDirective,
        rawText: "@run @" + exec.raw.identifier
      };
    };
  var peg$f337 = function(content) {
      // Map the core type to the appropriate directive subtype
      const subtypeMap = {
        'addPath': 'addPath',
        'addTemplate': 'addTemplate',
        'addVariable': 'addVariable',
        'addTemplateInvocation': 'addTemplateInvocation',
        'addPathSection': 'addPathSection'
      };
      
      const subtype = subtypeMap[content.type] || 'add';
      
      const addDirective = helpers.createStructuredDirective(
        'add',
        subtype,
        content.values,
        content.raw,
        {
          ...content.meta,
          isDataValue: true
        },
        location(),
        content.type === 'addPath' ? 'path' : 
        content.type === 'addTemplate' ? 'template' :
        content.type === 'addVariable' ? 'variable' :
        content.type === 'addTemplateInvocation' ? 'templateInvocation' :
        'section'
      );
      
      return {
        type: "nestedDirective",
        directive: addDirective,
        rawText: "@add " + (content.raw && content.raw.path ? content.raw.path : 
                   content.raw && content.raw.content ? content.raw.content :
                   content.raw && content.raw.variable ? content.raw.variable :
                   content.raw && content.raw.templateName ? 
                     "@" + content.raw.templateName + "(" + (content.raw.arguments || []).join(", ") + ")" :
                   "")
      };
    };
  var peg$f338 = function(id, accessElements) {
      const normalizedId = helpers.normalizePathVar(id);
      const node = helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(accessElements.length > 0 ? { fields: accessElements } : {})
      }, location());
      
      return {
        type: "variableReference",
        value: node,
        rawText: "@" + normalizedId + (accessElements ? accessElements.map(f => 
          f.type === 'dotAccess' ? '.' + f.field : '[' + f.index + ']'
        ).join('') : '')
      };
    };
  var peg$f339 = function(content) {
      return {
        type: "template",
        value: content.parts,
        rawText: content.raw
      };
    };
  var peg$f340 = function(props) {
      const result = {};
      
      // Process properties into a structured format
      if (props) {
        for (const [key, value] of props) {
          // Handle nested directives
          if (value.type === "nestedDirective" && value.directive) {
            result[key] = value.directive;
          } 
          // Handle nested objects
          else if (value.type === "object") {
            result[key] = {
              type: 'object',
              properties: value.value
            };
          } 
          // Handle nested arrays
          else if (value.type === "array") {
            result[key] = {
              type: 'array',
              items: value.value
            };
          }
          // Handle template values
          else if (value.type === "template") {
            result[key] = value.value; // Array of content nodes
          }
          // Handle variable references
          else if (value.type === "variableReference") {
            result[key] = value.value; // Variable reference node
          }
          // Handle literal paths
          else if (value.type === "literalPath") {
            result[key] = value.value.parts; // Array of content nodes
          }
          // Handle primitive values
          else {
            result[key] = value.value || value;
          }
        }
      }
      
      return result;
    };
  var peg$f341 = function(first, p) { return p; };
  var peg$f342 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f343 = function(key, value) {
      return [key, value];
    };
  var peg$f344 = function(id) { return id; };
  var peg$f345 = function(str) { return str; };
  var peg$f346 = function(value) {
      return value;
    };
  var peg$f347 = function(items) {
      const itemsArray = items || [];
      return itemsArray.map(item => {
        if (item.type === "nestedDirective" && item.directive) {
          return item.directive;
        } else if (item.type === "object") {
          return {
            type: 'object',
            properties: item.value
          };
        } else if (item.type === "array") {
          return {
            type: 'array',
            items: item.value
          };
        } else if (item.type === "template") {
          return item.value; // Array of content nodes
        } else if (item.type === "variableReference") {
          return item.value; // Variable reference node
        } else if (item.type === "literalPath") {
          return item.value.parts; // Array of content nodes
        } else {
          return item.value || item;
        }
      });
    };
  var peg$f348 = function(first, v) { return v; };
  var peg$f349 = function(first, rest, trailingComma) {
      return [first, ...rest];
    };
  var peg$f350 = function(value) { return value; };
  var peg$f351 = function(value) { return value; };
  var peg$f352 = function(value) { return value; };
  var peg$f353 = function() { 
      // Return a proper node instead of raw null to avoid AST processing errors
      return helpers.createNode('Null', { value: null }, location());
    };
  var peg$f354 = function(varRef) { return varRef; };
  var peg$f355 = function(path) {
      return {
        type: "literalPath",
        value: path,
        rawText: "[" + (path.raw || "") + "]"
      };
    };
  var peg$f356 = function(parts) {
      const raw = parts.map(p => {
        if (p.type === NodeType.Text) {
          return p.content;
        } else if (p.type === NodeType.VariableReference) {
          return '@' + p.identifier;
        }
        return p.content || p;
      }).join('');
      
      return {
        parts,
        raw
      };
    };
  var peg$f357 = function() {
      return helpers.createNode(NodeType.Text, { 
        content: '@', 
        location: location() 
      });
    };
  var peg$f358 = function(varName) {
      return helpers.createVariableReferenceNode('literalPath', { 
        identifier: varName,
        location: location()
      });
    };
  var peg$f359 = function(chars) {
      return helpers.createNode(NodeType.Text, { 
        content: chars, 
        location: location() 
      });
    };
  var peg$f360 = function(cmd, arrays) {
      helpers.debug('ForeachCommandExpression matched', { cmd, arrays });
      
      return {
        type: "foreach-command",
        value: {
          type: 'foreach-command',
          command: cmd,
          arrays: arrays
        },
        rawText: text()
      };
    };
  var peg$f361 = function(identifier, fields) {
      return {
        type: 'commandRef',
        identifier: identifier,
        fields: fields || []
      };
    };
  var peg$f362 = function(first, arr) { return arr; };
  var peg$f363 = function(first, rest) {
      return [first].concat(rest || []);
    };
  var peg$f364 = function(identifier, fields) {
      const normalizedId = helpers.normalizePathVar(identifier);
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
    };
  var peg$f365 = function(parts) {
      return parts;
    };
  var peg$f366 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
    };
  var peg$f367 = function(chars) {
      return helpers.createNode(NodeType.Text, { content: chars, location: location() });
    };
  var peg$f368 = function(id, meta, params, lang, args, code, withClause, t) { return t; };
  var peg$f369 = function(id, meta, params, lang, args, code, withClause, trust) {
      // Language + code syntax: @exec fn() = @run language [(code)]
      helpers.debug('AtExec matched with language + code', { id, params, lang, code, trust });
      
      // Create identifier node
      const identifierNode = helpers.createNode(NodeType.Text, { content: id, location: location() });
      
      // Process parameters
      const processedParams = params || [];
      
      // Build values and raw objects
      const langNode = helpers.createNode(NodeType.Text, { content: lang, location: location() });
      const codeNode = helpers.createNode(NodeType.Text, { content: code.content, location: location() });
      
      const values = {
        identifier: [identifierNode],
        params: processedParams,
        lang: [langNode],
        args: args || [],
        code: [codeNode]
      };
      
      const raw = {
        identifier: id,
        params: processedParams,
        lang: lang,
        args: args ? args.map(arg => arg.identifier || '') : [],
        code: code.content
      };
      
      // Metadata
      const metaObj = {
        isMultiLine: code.content.includes('\n'),
        language: lang,
        hasVariables: false, // Code blocks don't support variable interpolation
        parameterCount: processedParams.length,
        ...helpers.createSecurityMeta({ trust }),
        ...(meta ? { riskLevel: meta } : {})
      };
      
      // Add metadata if present
      if (meta) {
        values.metadata = [helpers.createNode(NodeType.Text, { content: meta, location: location() })];
        raw.metadata = meta;
        metaObj.metadata = { type: meta };
      }
      
      // Add with clause if present
      if (withClause) {
        values.withClause = withClause;
        raw.withClause = withClause;
        metaObj.withClause = withClause;
      }
      
      return helpers.createStructuredDirective(
        'exec',
        'execCode',
        values,
        raw,
        metaObj,
        location(),
        'code'
      );
    };
  var peg$f370 = function(id, meta, params, content, withClause, t) { return t; };
  var peg$f371 = function(id, meta, params, content, withClause, trust) {
      // Command syntax: @exec cmd() = @run [(command)]
      helpers.debug('AtExec matched with command', { id, params, content, trust });
      
      // Create identifier node
      const identifierNode = helpers.createNode(NodeType.Text, { content: id, location: location() });
      
      // Process parameters
      const processedParams = params || [];
      
      // Build values and raw objects
      const values = {
        identifier: [identifierNode],
        params: processedParams,
        command: content.values.command,
        commandBases: content.values.commandBases
      };
      
      const raw = {
        identifier: id,
        params: processedParams,
        command: content.raw.command,
        commandBases: content.raw.commandBases
      };
      
      // Metadata
      const metaObj = {
        ...content.meta,
        parameterCount: processedParams.length,
        ...helpers.createSecurityMeta({ trust }),
        ...(meta ? { riskLevel: meta } : {})
      };
      
      // Add metadata if present
      if (meta) {
        values.metadata = [helpers.createNode(NodeType.Text, { content: meta, location: location() })];
        raw.metadata = meta;
        metaObj.metadata = { type: meta };
      }
      
      // Add with clause if present
      if (withClause) {
        values.withClause = withClause;
        raw.withClause = withClause;
        metaObj.withClause = withClause;
      }
      
      return helpers.createStructuredDirective(
        'exec',
        'execCommand',
        values,
        raw,
        metaObj,
        location(),
        'command'
      );
    };
  var peg$f372 = function(id, meta, params, commandRef, withClause, t) { return t; };
  var peg$f373 = function(id, meta, params, commandRef, withClause, trust) {
      helpers.debug('AtExec matched command reference', { id, params, commandRef, trust });
      
      // Create identifier node
      const identifierNode = helpers.createNode(NodeType.Text, { content: id, location: location() });
      
      // Process parameters
      const processedParams = params || [];
      const rawParams = processedParams; // params are now strings
      
      // Build values and raw objects
      const values = {
        identifier: [identifierNode],
        params: processedParams,
        commandRef: Array.isArray(commandRef.identifier) ? commandRef.identifier : [helpers.createNode(NodeType.Text, { content: commandRef.identifier, location: location() })],
        args: commandRef.args || []
      };
      
      const raw = {
        identifier: id,
        params: rawParams,
        commandRef: commandRef.name,
        args: commandRef.args ? commandRef.args.map(arg => arg.value || '') : []
      };
      
      // Create meta object
      const metaObj = {
        parameterCount: processedParams.length,
        argumentCount: commandRef.args ? commandRef.args.length : 0,
        isCommandRef: true,
        ...helpers.createSecurityMeta({ trust })
      };
      
      // Add metadata if present
      if (meta) {
        values.metadata = [helpers.createNode(NodeType.Text, { content: meta, location: location() })];
        raw.metadata = meta;
        metaObj.metadata = { type: meta };
      }
      
      // Add with clause if present
      if (withClause) {
        values.withClause = withClause;
        raw.withClause = withClause;
        metaObj.withClause = withClause;
      }
      
      return helpers.createStructuredDirective(
        'exec',
        'execCommand',
        values,
        raw,
        metaObj,
        location(),
        'reference'  // Added source parameter
      );
    };
  var peg$f374 = function(field) {
    return field;
  };
  var peg$f375 = function(params) {
      return params || [];
    };
  var peg$f376 = function(first, param) { return param; };
  var peg$f377 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f378 = function(paramName) {
      return paramName; // Just return the parameter name as a string
    };
  var peg$f379 = function(security, path) {
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtImportShorthand matched', { path, securityOptions });
      
      // Shorthand always imports all (*)
      const imports = ["*"];
      const importsRaw = "*";
      
      // Create values object with variable references
      const values = {
        imports: [helpers.createVariableReferenceNode('import', { 
          identifier: '*'
        })],
        path: path.values?.path || path.values?.module || (typeof path === 'string' ? [helpers.createNode(NodeType.Text, { content: path, location: location() })] : path) // Handle different path formats
      };
      
      // Create raw object with text segments
      const raw = {
        imports: importsRaw,
        path: path.raw?.path || path.raw?.module || path // Handle string paths like @input
      };
      
      // Create meta object with path metadata and security
      const meta = {
        path: path.meta || {},
        ...helpers.createSecurityMeta(securityOptions)
      };
      
      return helpers.createStructuredDirective(
        'import',
        'importAll',
        values,
        raw,
        meta,
        location(),
        'path'
      );
    };
  var peg$f380 = function(security, imports, path) {
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtImport matched', { imports, path, securityOptions });
      
      // Get the raw imports text
      const importsRaw = imports.map(item => {
        if (typeof item === 'string') {
          return item;
        } else {
          return `${item.original} as ${item.alias}`;
        }
      }).join(", ");
      
      // Determine subtype (importAll or importSelected)
      let subtype;
      if (imports.length === 1 && imports[0] === '*') {
        subtype = 'importAll';
      } else {
        subtype = 'importSelected';
      }
      
      // Create values object with variable references
      const values = {
        imports: imports.map(item => {
          if (typeof item === 'string') {
            return helpers.createVariableReferenceNode('import', { 
              identifier: item
            });
          } else {
            return helpers.createVariableReferenceNode('import', { 
              identifier: item.original,
              alias: item.alias
            });
          }
        }),
        path: path.values?.path || path.values?.module || path.values?.url || (typeof path === 'string' ? [helpers.createNode(NodeType.Text, { content: path, location: location() })] : path) // Handle file, module, and URL paths
      };
      
      // Create raw object with text segments
      const raw = {
        imports: importsRaw,
        path: path.raw?.path || path.raw?.module || path.raw?.url || path // Handle file, module, and URL paths
      };
      
      // Create meta object with path metadata and security
      const meta = {
        path: path.meta || { 
          isSpecial: typeof path === 'string',
          pathSubtype: path.subtype 
        },
        ...helpers.createSecurityMeta(securityOptions)
      };
      
      return helpers.createStructuredDirective(
        'import',
        subtype,
        values,
        raw,
        meta,
        location(),
        'path'  // Source parameter
      );
    };
  var peg$f381 = function() {
      helpers.debug('ImportPath matched @input');
      return {
        type: 'path',
        subtype: 'inputPath',
        values: { 
          path: [helpers.createNode(NodeType.Text, { content: '@input', location: location() })]
        },
        raw: { 
          path: '@input'
        },
        meta: {
          isSpecial: true,
          source: 'stdin'  // Keep as 'stdin' internally for compatibility
        }
      };
    };
  var peg$f382 = function() {  // Keep for backward compatibility
      helpers.debug('ImportPath matched @stdin (deprecated)');
      return {
        type: 'path',
        subtype: 'inputPath',
        values: { 
          path: [helpers.createNode(NodeType.Text, { content: '@stdin', location: location() })]
        },
        raw: { 
          path: '@stdin'
        },
        meta: {
          isSpecial: true,
          source: 'stdin',
          deprecated: true
        }
      };
    };
  var peg$f383 = function(parts) {
      helpers.debug('BracketImportPath matched', { parts });
      const rawPath = helpers.reconstructRawString(parts);
      return {
        type: 'path',
        subtype: 'filePath',
        values: { 
          path: parts
        },
        raw: { 
          path: rawPath
        },
        meta: helpers.createPathMetadata(rawPath, parts)
      };
    };
  var peg$f384 = function(content) {
      helpers.debug('QuotedPath matched', { content });
      return {
        type: 'path',
        subtype: 'filePath',
        values: { 
          path: [helpers.createNode(NodeType.Text, { content, location: location() })]
        },
        raw: { 
          path: content
        },
        meta: helpers.createPathMetadata(content, [helpers.createNode(NodeType.Text, { content, location: location() })])
      };
    };
  var peg$f385 = function(id) {
      const rawModule = `@${id.namespace}${id.path.length > 0 ? '/' + id.path.join('/') : ''}/${id.name}${id.hash ? '@' + id.hash : ''}`;
      return {
        type: 'module',
        subtype: 'moduleReference',
        values: {
          module: [helpers.createNode(NodeType.Text, { content: rawModule, location: location() })]
        },
        raw: {
          module: rawModule
        },
        meta: {
          isModule: true,
          namespace: id.namespace,
          path: id.path,
          name: id.name,
          ...(id.hash ? { hash: id.hash } : {})
        }
      };
    };
  var peg$f386 = function(namespace, pathAndName, h) { return h; };
  var peg$f387 = function(namespace, pathAndName, hash) {
      return {
        namespace,
        path: pathAndName.path,
        name: pathAndName.name,
        ...(hash ? { hash } : {})
      };
    };
  var peg$f388 = function(segment) { return segment; };
  var peg$f389 = function(segments, name) {
      return {
        path: segments,
        name: name
      };
    };
  var peg$f390 = function(first, rest) {
      return first + rest.join('');
    };
  var peg$f391 = function(chars) { return chars.length >= 4; };
  var peg$f392 = function(chars) {
      return chars.join('');
    };
  var peg$f393 = function() {
      // * means import all variables with their original names - cannot be aliased
      return ["*"];
    };
  var peg$f394 = function(first, item) { return item; };
  var peg$f395 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f396 = function() {
      return [];
    };
  var peg$f397 = function(name, aliasName) { return aliasName; };
  var peg$f398 = function(name, alias) {
      if (alias) {
        return { original: name, alias: alias };
      }
      return name;
    };
  var peg$f399 = function(parts) {
      return parts;
    };
  var peg$f400 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
    };
  var peg$f401 = function(source, path) {
      helpers.debug('AtOutput with source matched', { source, path });
      
      const values = {
        source: source.values,
        path: path.parts  // Use .parts, not .values
      };
      
      const raw = {
        source: source.raw,
        path: path.raw
      };
      
      const meta = {
        sourceType: source.type,
        hasSource: true
      };
      
      return helpers.createStructuredDirective(
        'output',
        source.subtype,
        values,
        raw,
        meta,
        location()
      );
    };
  var peg$f402 = function(path) {
      helpers.debug('AtOutput without source matched', { path });
      
      const values = {
        path: path.parts  // Use .parts, not .values
      };
      
      const raw = {
        path: path.raw
      };
      
      const meta = {
        hasSource: false
      };
      
      return helpers.createStructuredDirective(
        'output',
        'outputDocument',
        values,
        raw,
        meta,
        location()
      );
    };
  var peg$f403 = function(identifier, fields, args) {
      const hasArgs = args && args.length > 0;
      const isTemplate = hasArgs; // With args, it's a template/command invocation
      
      const values = {
        identifier: [helpers.createNode(NodeType.Text, { content: identifier, location: location() })],
        ...(fields && fields.length > 0 ? { fields } : {}),
        ...(hasArgs ? { args } : {})
      };
      
      const raw = {
        identifier,
        ...(fields && fields.length > 0 ? { fields: fields.map(f => f.value) } : {}),
        ...(hasArgs ? { args: args.map(arg => helpers.reconstructRawString([arg])) } : {})
      };
      
      return {
        type: 'variable',
        subtype: hasArgs ? 'outputInvocation' : 'outputVariable',
        values,
        raw
      };
    };
  var peg$f404 = function(commandRef) {
      helpers.debug('OutputCommand matched', { commandRef });
      
      return {
        type: 'command',
        subtype: 'outputCommand',
        values: {
          identifier: commandRef.identifier,
          args: commandRef.args || []
        },
        raw: {
          identifier: commandRef.rawIdentifier,
          args: commandRef.rawArgs || []
        }
      };
    };
  var peg$f405 = function(str) {
      return {
        type: 'literal',
        subtype: 'outputLiteral',
        values: [helpers.createNode(NodeType.Text, { content: str, location: location() })],
        raw: str
      };
    };
  var peg$f406 = function(identifier, fields, args) {
      const processedArgs = args || [];
      const rawArgs = processedArgs.map(arg => {
        if (arg.type === 'Variable') {
          return '@' + arg.identifier;
        }
        return arg.content || '';
      });
      
      return {
        identifier: [helpers.createNode(NodeType.Text, { content: identifier, location: location() })],
        ...(fields && fields.length > 0 ? { fields } : {}),
        args: processedArgs,
        rawIdentifier: identifier,
        rawArgs: rawArgs
      };
    };
  var peg$f407 = function(args) {
      return args || [];
    };
  var peg$f408 = function(first, arg) { return arg; };
  var peg$f409 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f410 = function(str) {
      return helpers.createNode(NodeType.Text, { content: str, location: location() });
    };
  var peg$f411 = function(varRef) {
      return varRef;
    };
  var peg$f412 = function(val) {
      // Plain value (raw argument)
      return helpers.createNode(NodeType.Text, { content: val.trim(), location: location() });
    };
  var peg$f413 = function(security, id, content) {
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtPath matched quoted string', { id, content, securityOptions });
      
      // Create variable reference node for identifier
      const idNode = helpers.createVariableReferenceNode('identifier', { identifier: id });
      
      // Create path parts
      const pathParts = [helpers.createNode(NodeType.Text, { content, location: location() })];
      
      return helpers.createStructuredDirective(
        'path',
        'pathAssignment',
        {
          identifier: [idNode],
          path: pathParts
        },
        {
          identifier: id,
          path: content
        },
        {
          path: helpers.createPathMetadata(content, pathParts),
          ...helpers.createSecurityMeta(securityOptions)
        },
        location(),
        'path'
      );
    };
  var peg$f414 = function(security, id, parts) {
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtPath matched bracketed path', { id, parts });
      
      // Process special path variables in the parsed content (only @. special case)
      const processedPathParts = [];
      
      for (const part of parts) {
        if (part.type === 'Text' && part.content && part.content.includes('@.')) {
          // Handle @. in text nodes by replacing with @PROJECTPATH and re-parsing as variable
          const updatedContent = part.content.replace(/@\./g, '@PROJECTPATH');
          
          // If the replacement happened, we need to split this into text and variable parts
          if (updatedContent !== part.content) {
            // For simplicity, just replace @. with @PROJECTPATH in the text content
            // The interpreter will handle @PROJECTPATH as a special variable
            const newTextNode = helpers.createNode(NodeType.Text, { 
              content: updatedContent, 
              location: part.location 
            });
            processedPathParts.push(newTextNode);
          } else {
            processedPathParts.push(part);
          }
        } else {
          processedPathParts.push(part);
        }
      }
      
      // Reconstruct raw string from processed parts for metadata
      const rawString = helpers.reconstructRawString(processedPathParts);
      
      // Create variable reference node for identifier
      const idNode = helpers.createVariableReferenceNode('identifier', { identifier: id });
      
      return helpers.createStructuredDirective(
        'path',
        'pathAssignment',
        {
          identifier: [idNode],
          path: processedPathParts
        },
        {
          identifier: id,
          path: rawString
        },
        {
          path: helpers.createPathMetadata(rawString, processedPathParts),
          ...helpers.createSecurityMeta(securityOptions)
        },
        location(),
        'path'  // Source parameter
      );
    };
  var peg$f415 = function(id, path, s) { return s; };
  var peg$f416 = function(id, path, security) {
      helpers.debug('AtPath matched normal path', { id, path, security });
      
      // Process special path variables
      let processedPath = path.raw.path || path.raw.url;
      if (processedPath.includes('@.')) {
        processedPath = processedPath
          .replace(/@\./g, '@PROJECTPATH');
      }
      
      // Create variable reference node for identifier
      const idNode = helpers.createVariableReferenceNode('identifier', { identifier: id });
      
      // We need to also process the path parts if they contain special variables
      const processedPathParts = [...(path.values.path || path.values.parts || [])];
      for (let i = 0; i < processedPathParts.length; i++) {
        const part = processedPathParts[i];
        if (part.type === NodeType.VariableReference && part.identifier === '.') {
          // Clone the node and update identifier
          const newNode = { ...part };
          newNode.identifier = 'PROJECTPATH';
          processedPathParts[i] = newNode;
        }
      }
      
      return helpers.createStructuredDirective(
        'path',
        'pathAssignment',
        {
          identifier: [idNode],
          path: processedPathParts
        },
        {
          identifier: id,
          path: processedPath
        },
        {
          path: {
            ...path.meta,
            pathSubtype: path.subtype // Preserve the specific path type
          },
          ...helpers.createSecurityMeta(security)
        },
        location(),
        'path'  // Source parameter
      );
    };
  var peg$f417 = function(parts) {
      return parts;
    };
  var peg$f418 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
    };
  var peg$f419 = function() {
      return text();
    };
  var peg$f420 = function(security, lang, args, code, withClause, comment) {
      // Language + code syntax: @run language [(code)]
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtRun matched language + code', { lang, code, securityOptions, withClause });
      
      const langNode = helpers.createNode(NodeType.Text, { content: lang, location: location() });
      const codeNode = helpers.createNode(NodeType.Text, { content: code.content, location: location() });
      
      const values = {
        lang: [langNode],
        args: args || [],
        code: [codeNode]
      };
      
      const raw = {
        lang: lang,
        args: args ? args.map(arg => arg.identifier || '') : [],
        code: code.content
      };
      
      const meta = {
        isMultiLine: code.isMultiLine || code.content.includes('\n'),
        language: lang,
        hasVariables: false, // Code blocks don't support variable interpolation
        ...helpers.createSecurityMeta(securityOptions),
        ...(comment ? { comment } : {})
      };
      
      // Add with clause if present
      if (withClause) {
        values.withClause = withClause;
        raw.withClause = withClause;
        meta.withClause = withClause;
      }
      
      return helpers.createStructuredDirective(
        'run',
        'runCode',
        values,
        raw,
        meta,
        location(),
        'code'
      );
    };
  var peg$f421 = function(security, content, withClause, comment) {
      // Command syntax: @run [(command)]
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtRun matched command', { content, securityOptions, withClause });
      
      const meta = {
        ...content.meta,
        ...helpers.createSecurityMeta(securityOptions),
        ...(comment ? { comment } : {})
      };
      
      const values = content.values;
      const raw = content.raw;
      
      // Add with clause if present
      if (withClause) {
        values.withClause = withClause;
        raw.withClause = withClause;
        meta.withClause = withClause;
      }
      
      return helpers.createStructuredDirective(
        'run',
        content.subtype,
        values,
        raw,
        meta,
        location(),
        content.type
      );
    };
  var peg$f422 = function(security, commandRef, withClause, comment) {
      // @ detected -> Command reference (exec)
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtRun matched command reference', { commandRef, securityOptions, withClause });
      
      const values = {
        identifier: commandRef.identifier,
        args: commandRef.args || []
      };
      
      const raw = {
        identifier: commandRef.rawIdentifier,
        args: commandRef.rawArgs || []
      };
      
      const meta = {
        argumentCount: commandRef.args ? commandRef.args.length : 0,
        ...helpers.createSecurityMeta(securityOptions),
        ...(comment ? { comment } : {})
      };
      
      // Add with clause if present
      if (withClause) {
        values.withClause = withClause;
        raw.withClause = withClause;
        meta.withClause = withClause;
      }
      
      return helpers.createStructuredDirective(
        'run',
        'runExec',
        values,
        raw,
        meta,
        location(),
        'exec'
      );
    };
  var peg$f423 = function(lang, args, code) {
      // Language + code syntax in RHS: language [(code)]
      helpers.debug('RunDirectiveRef matched language + code in RHS', { lang, code });
      
      const langNode = helpers.createNode(NodeType.Text, { content: lang, location: location() });
      const codeNode = helpers.createNode(NodeType.Text, { content: code.content, location: location() });
      
      return helpers.createStructuredDirective(
        'run',
        'runCode',
        {
          lang: [langNode],
          args: args || [],
          code: [codeNode]
        },
        {
          lang: lang,
          args: args ? args.map(arg => arg.identifier || '') : [],
          code: code.content
        },
        { 
          isMultiLine: code.isMultiLine || code.content.includes('\n'),
          language: lang,
          hasVariables: false,
          isRHSRef: true
        },
        location()
      );
    };
  var peg$f424 = function(content) {
      helpers.debug('RunDirectiveRef matched command in RHS', { content });
      
      return helpers.createStructuredDirective(
        'run',
        content.subtype,
        content.values,
        content.raw,
        { 
          ...content.meta,
          isRHSRef: true
        },
        location()
      );
    };
  var peg$f425 = function(identifier, fields, args) {
      // Process arguments if present
      const processedArgs = args || [];
      const rawArgs = processedArgs.map(arg => {
        if (arg.type === NodeType.Text) return arg.content;
        if (arg.type === NodeType.VariableReference) return arg.identifier;
        return '';
      });
      
      // Create a variable reference node with field access support
      const varRef = helpers.createVariableReferenceNode('varIdentifier', {
        identifier: identifier,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
      
      return {
        identifier: [varRef],
        rawIdentifier: identifier,
        fields: fields,
        args: processedArgs,
        rawArgs: rawArgs
      };
    };
  var peg$f426 = function(args) {
      return args || [];
    };
  var peg$f427 = function(first, arg) { return arg; };
  var peg$f428 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f429 = function(str) {
      return helpers.createNode(NodeType.Text, { content: str, location: location() });
    };
  var peg$f430 = function(varRef) {
      return varRef;
    };
  var peg$f431 = function(val) {
      // Plain value (raw argument)
      return helpers.createNode(NodeType.Text, { content: val.trim(), location: location() });
    };
  var peg$f432 = function(security, id, content) {
      const securityOptions = security ? security[0] : null;
      helpers.debug('AtText matched literal string', { id, content, securityOptions });
      
      const subtype = 'textAssignment';
      const sourceType = 'literal';
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        {
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          content: [helpers.createNode(NodeType.Text, { content, location: location() })]
        },
        {
          identifier: id,
          content
        },
        {
          sourceType,
          hasVariables: false,
          isTemplateContent: false,
          ...helpers.createSecurityMeta(securityOptions)
        },
        location(),
        sourceType
      );
    };
  var peg$f433 = function(id, content) { return content.type === 'doubleBracketSection'; };
  var peg$f434 = function(id, content, rename) {
      helpers.debug('AtText matched double-bracketed path section', { id, content, rename });
      
      const subtype = 'textPathSection';
      const sourceType = 'section';
      
      const rawPath = content.raw.split(' # ')[0];
      const sectionText = content.section;
      
      // Create values object with section and path
      const values = {
        identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
        path: content.parts,
        sectionTitle: [helpers.createNode(NodeType.Text, { content: sectionText, location: location() })]
      };
      
      // Add new title if provided
      if (rename) {
        values.newTitle = rename;
      }
      
      // Create raw object
      const raw = {
        identifier: id,
        path: rawPath,
        sectionTitle: sectionText
      };
      
      // Add new title to raw if present
      if (rename) {
        raw.newTitle = rename[0].content;
      }
      
      const meta = {
        sourceType,
        hasVariables: false,
        isTemplateContent: false,
        path: helpers.createPathMetadata(rawPath, content.parts)
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        values,
        raw,
        meta,
        location(),
        sourceType
      );
    };
  var peg$f435 = function(id, parts, s) { return s; };
  var peg$f436 = function(id, parts, section, rename) {
      helpers.debug('AtText matched bracketed path', { id, parts, section, rename });
      
      const rawPath = helpers.reconstructRawString(parts);
      const hasSectionExtraction = !!section;
      const subtype = hasSectionExtraction ? 'textPathSection' : 'textPath';
      const sourceType = hasSectionExtraction ? 'section' : 'path';
      
      // Create values object
      const values = {
        identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
        path: parts
      };
      
      if (hasSectionExtraction) {
        values.sectionTitle = [helpers.createNode(NodeType.Text, { content: section, location: location() })];
      }
      
      // Add new title if provided
      if (rename) {
        values.newTitle = rename;
      }
      
      // Create raw object
      const raw = {
        identifier: id,
        path: rawPath
      };
      
      if (hasSectionExtraction) {
        raw.sectionTitle = section;
      }
      
      // Add new title to raw if present
      if (rename) {
        raw.newTitle = rename[0].content;
      }
      
      // Create meta object
      const meta = { 
        sourceType: sourceType,
        hasVariables: parts.some(p => p && p.type === NodeType.VariableReference),
        isTemplateContent: false,
        path: helpers.createPathMetadata(rawPath, parts)
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        values,
        raw,
        meta,
        location(),
        sourceType
      );
    };
  var peg$f437 = function(id, section) {
      helpers.debug('AtText matched section extraction', { id, section });
      
      const subtype = section.rename ? 'textPathSection' : 'textPathSection';
      const sourceType = 'section';
      
      // Create values object with section and path
      const values = {
        identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
        section: section.section,
        path: section.path
      };
      
      // Add rename if present
      if (section.rename) {
        values.rename = section.rename;
      }
      
      // Create raw object
      const raw = {
        identifier: id,
        section: helpers.reconstructRawString(section.section),
        path: helpers.reconstructRawString(section.path)
      };
      
      if (section.rename) {
        raw.rename = helpers.reconstructRawString(section.rename);
      }
      
      // Create meta object
      const meta = { 
        sourceType: sourceType,
        hasRename: !!section.rename,
        hasVariables: section.path.some(part => 
          part && part.type === NodeType.VariableReference
        )
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        values,
        raw,
        meta,
        location(),
        sourceType
      );
    };
  var peg$f438 = function(id, params, template) {
      helpers.debug('AtText matched parameterized template definition', { id, params, template });
      
      // Process parameters
      const processedParams = params || [];
      
      // Create meta object with parameter info
      const meta = { 
        sourceType: 'template',
        hasVariables: template.meta.hasVariables,
        isTemplateContent: true,
        isParameterized: true,
        parameterCount: processedParams.length
      };
      
      return helpers.createStructuredDirective(
        'text',
        'textTemplateDefinition',
        {
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          params: processedParams,
          content: template.values.content
        },
        {
          identifier: id,
          params: processedParams,
          content: template.raw.content
        },
        meta,
        location(),
        'template'
      );
    };
  var peg$f439 = function(id, template) {
      // Use both variables and template syntax for detection
      // The meta now contains both hasVariables and isTemplateContent
      
      // Determine if this is a template based on either:
      // 1. It contains variables
      // 2. It uses template syntax (e.g., [[...]])
      const isTemplate = template.meta.hasVariables || template.meta.isTemplateContent;
      
      // Set subtype and sourceType based on template detection
      const subtype = isTemplate ? 'textTemplate' : 'textAssignment';
      const sourceType = isTemplate ? 'template' : 'literal';
      
      // Create meta object with all template info
      const meta = { 
        sourceType: sourceType,
        hasVariables: template.meta.hasVariables,
        isTemplateContent: template.meta.isTemplateContent,
        // Don't include wrapperType in metadata for now
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        {
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          content: template.values.content
        },
        {
          identifier: id,
          content: template.raw.content
        },
        meta,
        location(),
        sourceType
      );
    };
  var peg$f440 = function(id, content) { return content.type === 'sectionPath'; };
  var peg$f441 = function(id, content, rename) {
      helpers.debug('AtText matched @add with bracketed path section', { id, content, rename });
      
      const subtype = 'textPathSection';
      const sourceType = 'directive';
      
      const rawPath = content.raw.split(' # ')[0];
      const sectionText = content.section;
      
      // Create values object with section and path
      const values = {
        identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
        path: content.parts,
        sectionTitle: [helpers.createNode(NodeType.Text, { content: sectionText, location: location() })]
      };
      
      // Add new title if provided
      if (rename) {
        values.newTitle = rename;
      }
      
      // Create raw object
      const raw = {
        identifier: id,
        path: rawPath,
        sectionTitle: sectionText
      };
      
      // Add new title to raw if present
      if (rename) {
        raw.newTitle = rename[0].content;
      }
      
      // Create meta object
      const meta = { 
        sourceType: sourceType,
        directive: 'add',
        hasVariables: false,
        isTemplateContent: false,
        path: helpers.createPathMetadata(rawPath, content.parts)
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        values,
        raw,
        meta,
        location(),
        sourceType
      );
    };
  var peg$f442 = function(id, section) {
      helpers.debug('AtText matched @add with section extraction', { id, section });
      
      const subtype = 'textPathSection';
      const sourceType = 'directive';
      
      // Create values object with section and path
      const values = {
        identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
        section: section.section,
        path: section.path
      };
      
      // Add rename if present
      if (section.rename) {
        values.rename = section.rename;
      }
      
      // Create raw object
      const raw = {
        identifier: id,
        section: helpers.reconstructRawString(section.section),
        path: helpers.reconstructRawString(section.path)
      };
      
      if (section.rename) {
        raw.rename = helpers.reconstructRawString(section.rename);
      }
      
      // Create meta object
      const meta = { 
        sourceType: sourceType,
        directive: 'add',
        hasRename: !!section.rename,
        hasVariables: section.path.some(part => 
          part && part.type === NodeType.VariableReference
        )
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        values,
        raw,
        meta,
        location(),
        sourceType
      );
    };
  var peg$f443 = function(id, path, s) { return s; };
  var peg$f444 = function(id, path, security) {
      helpers.debug('AtText matched @add with path', { id, path, security });
      
      const subtype = 'textPath';
      const sourceType = 'directive';
      
      // Check if the path contains variables
      const hasVariables = path.meta.hasVariables;
      
      // Create meta object
      const meta = { 
        sourceType: sourceType,
        directive: 'add',
        hasVariables: hasVariables,
        pathSubtype: path.subtype, // Preserve the specific path type
        ...helpers.createSecurityMeta(security)
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        {
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          path: path.values.path || path.values.url
        },
        {
          identifier: id,
          path: path.raw.path || path.raw.url
        },
        meta,
        location(),
        sourceType
      );
    };
  var peg$f445 = function(id, path) {
      helpers.debug('AtText matched path starting with @variable', { id, path });
      
      const subtype = 'textPath';
      const sourceType = 'path';
      
      // Check if the path contains variables
      const hasVariables = path.values.path.some(part => 
        part && part.type === NodeType.VariableReference
      );
      
      // Create meta object
      const meta = { 
        sourceType: sourceType,
        hasVariables: hasVariables
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        {
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          path: path.values.path
        },
        {
          identifier: id,
          path: path.raw.path || path.raw.url
        },
        meta,
        location(),
        sourceType
      );
    };
  var peg$f446 = function(id, commandRef) {
      helpers.debug('AtText matched command reference', { id, commandRef });
      
      const subtype = 'textAssignment';
      const sourceType = 'commandRef';
      
      const meta = { 
        sourceType: sourceType,
        hasVariables: false,
        isCommandRef: true,
        commandName: commandRef.name
      };
      
      // Create command reference syntax
      const rawContent = `@${commandRef.name}${
        commandRef.args && commandRef.args.length > 0 ? 
        `(${commandRef.args.map(arg => arg.value || '').join(', ')})` : ''
      }`;
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
          {
            identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
            content: [helpers.createNode(NodeType.Text, { content: rawContent, location: location() })]
          },
        {
          identifier: id,
          content: rawContent
        },
        meta,
        location(),
        sourceType
      );
    };
  var peg$f447 = function(id, lang, content) {
      helpers.debug('AtText matched @run with language code', { id, lang, content });
      
      // Use the proper subtype and sourceType
      const subtype = 'textAssignment';
      const sourceType = 'directive';
      
      // Create meta object with run information
      const meta = { 
        sourceType: sourceType,
        directive: 'run',
        hasVariables: false,
        run: {
          language: lang,
          isMultiLine: content.includes('\n')
        }
      };
      
      // Create raw content string
      const rawContent = `@run ${lang} [${content}]`;
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        {
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          content: [helpers.createNode(NodeType.Text, { content, location: location() })]
        },
        {
          identifier: id,
          content: rawContent
        },
        meta,
        location(),
        'run'
      );
    };
  var peg$f448 = function(id, command) {
      helpers.debug('AtText matched @run with CommandCore abstraction', { id, command });
      
      // Use the proper subtype and sourceType
      const subtype = 'textAssignment';
      const sourceType = 'directive';
      
      // Create meta object with run information
      const meta = { 
        sourceType: sourceType,
        directive: 'run',
        hasVariables: command.meta.hasVariables || false,
        run: {
          isCommand: true
        }
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        {
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          content: command.values.command // Use the command array from CommandCore
        },
        {
          identifier: id,
          content: `@run ${command.raw.command}`
        },
        meta,
        location(),
        'run'
      );
    };
  var peg$f449 = function(id, commandRef) {
      helpers.debug('AtText matched @run with command reference', { id, commandRef });
      
      // Use the proper subtype and sourceType
      const subtype = 'textAssignment';
      const sourceType = 'directive';
      
      // Create meta object with run information
      const meta = { 
        sourceType: sourceType,
        directive: 'run',
        hasVariables: false,
        run: {
          isCommandRef: true,
          commandName: commandRef.name
        }
      };
      
      // Create command reference syntax
      const rawContent = `@run @${commandRef.name}${
        commandRef.args && commandRef.args.length > 0 ? 
        `(${commandRef.args.map(arg => arg.value || '').join(', ')})` : ''
      }`;
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
          {
            identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
            content: [helpers.createNode(NodeType.Text, { content: rawContent, location: location() })]
          },
        {
          identifier: id,
          content: rawContent
        },
        meta,
        location(),
        'run'
      );
    };
  var peg$f450 = function(id, path) {
      helpers.debug('AtText matched direct path content', { id, path });
      
      const subtype = 'textPath';
      const sourceType = 'path';
      
      // Check if the path contains variables
      const hasVariables = path.values.path.some(part => 
        part && part.type === NodeType.VariableReference
      );
      
      // Create meta object
      const meta = { 
        sourceType: sourceType,
        hasVariables: hasVariables
      };
      
      return helpers.createStructuredDirective(
        'text',
        subtype,
        {
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          path: path.values.path
        },
        {
          identifier: id,
          path: path.raw.path || path.raw.url
        },
        meta,
        location(),
        sourceType
      );
    };
  var peg$f451 = function(first, param) { return param; };
  var peg$f452 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f453 = function(paramName) {
      return paramName; // Just return the parameter name as a string
    };
  var peg$f454 = function(parts) {
      return parts;
    };
  var peg$f455 = function(id, fields) {
      const normalizedId = helpers.normalizePathVar(id);
      return helpers.createVariableReferenceNode('varIdentifier', {
        identifier: normalizedId,
        ...(fields.length > 0 ? { fields: fields } : {})
      }, location());
    };
  var peg$f456 = function(condition, action) {
      helpers.debug('WhenSimpleForm matched', { condition, action });
      
      return helpers.createStructuredDirective(
        'when',
        'whenSimple',
        {
          condition: condition,
          action: action
        },
        {
          condition: helpers.reconstructRawString(condition),
          action: helpers.reconstructRawString(action)
        },
        {
          hasVariables: condition.some(n => n.type === NodeType.VariableReference)
        },
        location()
      );
    };
  var peg$f457 = function(id) { return id; };
  var peg$f458 = function(variable, modifier, conditions, a) { return a; };
  var peg$f459 = function(variable, modifier, conditions, action) {
      
      helpers.debug('WhenBlockForm matched', { variable, modifier, conditions, action });
      
      const values = {
        conditions: conditions
      };
      
      // Only add modifier if present
      if (modifier) {
        values.modifier = [helpers.createNode(NodeType.Text, { 
          content: modifier, 
          location: location() 
        })];
      }
      
      if (variable) {
        values.variable = [helpers.createVariableReferenceNode('identifier', {
          identifier: variable
        })];
      }
      
      if (action) {
        values.action = action;
      }
      
      // Create raw representation
      const raw = {
        modifier: modifier,
        conditions: conditions.map(c => ({
          condition: helpers.reconstructRawString(c.condition),
          action: c.action ? helpers.reconstructRawString(c.action) : undefined
        }))
      };
      
      if (variable) {
        raw.variable = variable;
      }
      
      if (action) {
        raw.action = helpers.reconstructRawString(action);
      }
      
      return helpers.createStructuredDirective(
        'when',
        'whenBlock',
        values,
        raw,
        {
          modifier: modifier || 'default',  // Use 'default' when no modifier specified
          conditionCount: conditions.length,
          hasVariable: !!variable
        },
        location()
      );
    };
  var peg$f460 = function(commandRef) {
      // Command reference from patterns/command-reference.peggy
      return [helpers.createVariableReferenceNode('commandRef', {
        identifier: commandRef.name,
        ...(commandRef.args && commandRef.args.length > 0 ? { args: commandRef.args } : {})
      })];
    };
  var peg$f461 = function() {
      // Variable reference from patterns/variables.peggy
      return [text()];
    };
  var peg$f462 = function(first, pair) { return pair; };
  var peg$f463 = function(first, rest) {
      return [first, ...rest];
    };
  var peg$f464 = function(condition, a) { return a; };
  var peg$f465 = function(condition, action) {
      return { condition, action };
    };
  var peg$f466 = function(first, d) { return d; };
  var peg$f467 = function(first, rest) {
      return [first, ...rest].flat();
    };
  var peg$f468 = function(content) {
      return [helpers.createNode(NodeType.Directive, {
        kind: 'add',
        subtype: 'addTemplate',
        values: { 
          content: [helpers.createNode(NodeType.Text, { 
            content: content, 
            location: location() 
          })]
        },
        raw: { content: content },
        meta: {},
        location: location()
      })];
    };
  var peg$f469 = function(id, value) {
      return [helpers.createNode(NodeType.Directive, {
        kind: 'text',
        subtype: 'textAssignment',
        values: { 
          identifier: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
          content: [helpers.createNode(NodeType.Text, { 
            content: value, 
            location: location() 
          })]
        },
        raw: {
          identifier: id,
          content: value
        },
        meta: {},
        location: location()
      })];
    };
  var peg$f470 = function(command) {
      // Use simple command parsing for actions
      return [helpers.createNode(NodeType.Directive, {
        kind: 'run',
        subtype: 'runCommand',
        values: { 
          command: [helpers.createNode(NodeType.Text, {
            content: command,
            location: location()
          })]
        },
        raw: { command: command },
        meta: {},
        location: location()
      })];
    };
  var peg$f471 = function(source, path) {
      // @output directive for when actions
      const values = {
        path: [helpers.createNode(NodeType.Text, { 
          content: path, 
          location: location() 
        })]
      };
      
      const raw = {
        path: path
      };
      
      let subtype = 'outputDocument';
      const meta = { hasSource: false };
      
      if (source) {
        values.source = source.values;
        raw.source = source.raw;
        meta.hasSource = true;
        meta.sourceType = source.type;
        subtype = source.subtype;
      }
      
      return [helpers.createNode(NodeType.Directive, {
        kind: 'output',
        subtype: subtype,
        values: values,
        raw: raw,
        meta: meta,
        location: location()
      })];
    };
  var peg$f472 = function(chars) {
      return chars.join('');
    };
  var peg$f473 = function(chars) {
      return chars.join('').trim();
    };
  var peg$f474 = function(id) {
      // Simple variable reference
      return {
        type: 'variable',
        subtype: 'outputVariable',
        values: [helpers.createVariableReferenceNode('identifier', { identifier: id })],
        raw: '@' + id
      };
    };
  var peg$f475 = function(str) {
      // Literal text
      return {
        type: 'literal',
        subtype: 'outputLiteral',
        values: [helpers.createNode(NodeType.Text, { content: str, location: location() })],
        raw: '"' + str + '"'
      };
    };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseFrontmatter();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = peg$parseLineStartComment();
    if (s3 === peg$FAILED) {
      s3 = peg$parseComment();
      if (s3 === peg$FAILED) {
        s3 = peg$parseCodeFence();
        if (s3 === peg$FAILED) {
          s3 = peg$parseDirective();
          if (s3 === peg$FAILED) {
            s3 = peg$parseVariable();
            if (s3 === peg$FAILED) {
              s3 = peg$parseInterDirectiveNewline();
              if (s3 === peg$FAILED) {
                s3 = peg$parseTextBlock();
              }
            }
          }
        }
      }
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseLineStartComment();
      if (s3 === peg$FAILED) {
        s3 = peg$parseComment();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCodeFence();
          if (s3 === peg$FAILED) {
            s3 = peg$parseDirective();
            if (s3 === peg$FAILED) {
              s3 = peg$parseVariable();
              if (s3 === peg$FAILED) {
                s3 = peg$parseInterDirectiveNewline();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseTextBlock();
                }
              }
            }
          }
        }
      }
    }
    peg$savedPos = s0;
    s0 = peg$f0(s1, s2);

    return s0;
  }

  function peg$parseInterDirectiveNewline() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
    }
    s2 = peg$parseLineTerminator();
    if (s2 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s3 = peg$f1(s1, s2);
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseContentEOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
    }
    s2 = peg$parseLineTerminator();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f3(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDirectiveEOL() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$silentFails++;
    s1 = peg$parseLineTerminator();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEOF();
    }
    peg$silentFails--;
    if (s1 !== peg$FAILED) {
      peg$currPos = s0;
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r0.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r0.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
      }
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseLineTerminator();
      if (s4 === peg$FAILED) {
        s4 = peg$parseEOF();
      }
      peg$silentFails--;
      if (s4 !== peg$FAILED) {
        peg$currPos = s3;
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLineStartComment() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f4();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCommentMarker();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseCommentContent();
        peg$savedPos = s0;
        s0 = peg$f5(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCommentMarker();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCommentContent();
      peg$savedPos = s0;
      s0 = peg$f6(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommentMarker() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseCommentContent() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r1.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r1.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
    }
    if (input.charCodeAt(peg$currPos) === 10) {
      s2 = peg$c2;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    peg$savedPos = s0;
    s0 = peg$f9(s1);

    return s0;
  }

  function peg$parseInlineComment() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseCommentMarker();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseCommentContent();
      peg$savedPos = s0;
      s0 = peg$f10(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTextBlock() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseTextPart();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseTextPart();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseTextPart();
      }
      peg$savedPos = s0;
      s0 = peg$f11(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTextPart() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f12();
    if (s1) {
      s1 = peg$FAILED;
    } else {
      s1 = undefined;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c3) {
        s3 = peg$c3;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s3 = peg$c4;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c5) {
            s3 = peg$c5;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c6) {
              s3 = peg$c6;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$parseBacktickSequence();
            }
          }
        }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$f13();
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f14(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDirective() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$f15();
    if (s1) {
      s1 = undefined;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r2.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
      }
      s3 = peg$parseAtRun();
      if (s3 === peg$FAILED) {
        s3 = peg$parseAtExec();
        if (s3 === peg$FAILED) {
          s3 = peg$parseAtText();
          if (s3 === peg$FAILED) {
            s3 = peg$parseAtImport();
            if (s3 === peg$FAILED) {
              s3 = peg$parseAtAdd();
              if (s3 === peg$FAILED) {
                s3 = peg$parseAtData();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseAtPath();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseAtOutput();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseAtWhen();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f16(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCodeFence() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseBacktickSequence();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCodeFenceLangID();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (input.charCodeAt(peg$currPos) === 10) {
        s3 = peg$c2;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$currPos;
        peg$silentFails++;
        s7 = peg$currPos;
        peg$savedPos = peg$currPos;
        s8 = peg$f17(s1, s2);
        if (s8) {
          s8 = undefined;
        } else {
          s8 = peg$FAILED;
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parseBacktickSequence();
          if (s9 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s10 = peg$f18(s1, s2, s9);
            if (s10) {
              s10 = undefined;
            } else {
              s10 = peg$FAILED;
            }
            if (s10 !== peg$FAILED) {
              s8 = [s8, s9, s10];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        peg$silentFails--;
        if (s7 === peg$FAILED) {
          s6 = undefined;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f19(s1, s2, s7);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$currPos;
          peg$silentFails++;
          s7 = peg$currPos;
          peg$savedPos = peg$currPos;
          s8 = peg$f17(s1, s2);
          if (s8) {
            s8 = undefined;
          } else {
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parseBacktickSequence();
            if (s9 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s10 = peg$f18(s1, s2, s9);
              if (s10) {
                s10 = undefined;
              } else {
                s10 = peg$FAILED;
              }
              if (s10 !== peg$FAILED) {
                s8 = [s8, s9, s10];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          peg$silentFails--;
          if (s7 === peg$FAILED) {
            s6 = undefined;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s7 !== peg$FAILED) {
              peg$savedPos = s5;
              s5 = peg$f19(s1, s2, s7);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parseBacktickSequence();
        if (s5 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s6 = peg$f20(s1, s2, s4, s5);
          if (s6) {
            s6 = peg$FAILED;
          } else {
            s6 = undefined;
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 10) {
              s7 = peg$c2;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f21(s1, s2, s4, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCodeFenceLangID() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r3.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r3.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDirectiveContext() {
    var s0, s1;

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f23();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }

    return s0;
  }

  function peg$parseVariableContext() {
    var s0, s1;

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f24();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }

    return s0;
  }

  function peg$parseRHSContext() {
    var s0, s1;

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f25();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parsePlainTextContext() {
    var s0, s1;

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f26();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseRunCodeBlockContext() {
    var s0, s1;

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f27();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseExecRunRHSContext() {
    var s0, s1;

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f28();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parsePathStartingWithVariableContext() {
    var s0, s1;

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f29();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseDocumentStart() {
    var s0;

    peg$savedPos = peg$currPos;
    s0 = peg$f30();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFrontmatter() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseDocumentStart();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c7) {
        s2 = peg$c7;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseHWS();
        s4 = peg$parseLineTerminator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseFrontmatterContent();
          if (input.substr(peg$currPos, 3) === peg$c7) {
            s6 = peg$c7;
            peg$currPos += 3;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseHWS();
            s8 = peg$parseLineTerminator();
            if (s8 === peg$FAILED) {
              s8 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f31(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parseFrontmatterContent() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parseFrontmatterEnd();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseFrontmatterLine();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f32(s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseFrontmatterEnd();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseFrontmatterLine();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f32(s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f33(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseFrontmatterLine() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r1.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r1.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
    }
    s2 = peg$parseLineTerminator();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f34(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFrontmatterEnd() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHWS();
      s3 = peg$parseLineTerminator();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStringLiteral() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEscapedStringContent();
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f35(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscapedSingleStringContent();
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f36(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 96) {
          s1 = peg$c10;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapedBacktickStringContent();
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c10;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f37(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    return s0;
  }

  function peg$parseNumberLiteral() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r4.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r4.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c12;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = input.charAt(peg$currPos);
        if (peg$r4.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s6 !== peg$FAILED) {
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = input.charAt(peg$currPos);
            if (peg$r4.test(s6)) {
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e27); }
            }
          }
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f38(s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseBooleanLiteral() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c14) {
        s1 = peg$c14;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f40();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }

    return s0;
  }

  function peg$parseNullLiteral() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }

    return s0;
  }

  function peg$parseMultilineTemplateLiteral() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseMultilineTemplateChar();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseMultilineTemplateChar();
      }
      if (input.substr(peg$currPos, 2) === peg$c6) {
        s3 = peg$c6;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f42(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }

    return s0;
  }

  function peg$parseMultilineTemplateChar() {
    var s0, s1, s2;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c6) {
        s2 = peg$c6;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEscapeSequence() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r5.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f44(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }

    return s0;
  }

  function peg$parseBaseTextSegment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseBaseChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseBaseChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f45(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parseBaseChar() {
    var s0, s1, s2;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = input.charAt(peg$currPos);
      if (peg$r6.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f46(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseTemplateTextSegment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTemplateChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTemplateChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f47(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parseTemplateChar() {
    var s0, s1, s2;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c3) {
        s2 = peg$c3;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s2 = peg$c4;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c5) {
            s2 = peg$c5;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c6) {
              s2 = peg$c6;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
          }
        }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f48(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseCommandTextSegment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCommandChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseCommandChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parseCommandChar() {
    var s0, s1, s2;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = input.charAt(peg$currPos);
      if (peg$r7.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f50(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePathTextSegment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsePathChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsePathChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f51(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }

    return s0;
  }

  function peg$parsePathChar() {
    var s0, s1, s2, s3;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      peg$savedPos = peg$currPos;
      s1 = peg$f52();
      if (s1) {
        s1 = undefined;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = input.charAt(peg$currPos);
        if (peg$r8.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f53(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSectionTextSegment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSectionChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSectionChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f54(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }

    return s0;
  }

  function peg$parseSectionChar() {
    var s0, s1, s2;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = input.charAt(peg$currPos);
      if (peg$r9.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f55(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEscapedStringContent() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseEscapedStringChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseEscapedStringChar();
    }
    peg$savedPos = s0;
    s1 = peg$f56(s1);
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e47); }

    return s0;
  }

  function peg$parseEscapedStringChar() {
    var s0, s1, s2;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f57(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEscapedSingleStringContent() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseEscapedSingleStringChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseEscapedSingleStringChar();
    }
    peg$savedPos = s0;
    s1 = peg$f58(s1);
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e48); }

    return s0;
  }

  function peg$parseEscapedSingleStringChar() {
    var s0, s1, s2;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c9;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f59(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEscapedBacktickStringContent() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseEscapedBacktickStringChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseEscapedBacktickStringChar();
    }
    peg$savedPos = s0;
    s1 = peg$f60(s1);
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e49); }

    return s0;
  }

  function peg$parseEscapedBacktickStringChar() {
    var s0, s1, s2;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 96) {
        s2 = peg$c10;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f61(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePathSeparator() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f62();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }

    return s0;
  }

  function peg$parseDotSeparator() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f63();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parseSectionMarker() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f64();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parseBaseIdentifier() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r10.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r11.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r11.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f65(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }

    return s0;
  }

  function peg$parseSpecialPathChar() {
    var s0, s1;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r12.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }

    return s0;
  }

  function peg$parsePathSeparatorToken() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f66();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }

    return s0;
  }

  function peg$parseDotSeparatorToken() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f67();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }

    return s0;
  }

  function peg$parseSectionMarkerToken() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r2.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r2.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
    }
    if (input.charCodeAt(peg$currPos) === 35) {
      s2 = peg$c18;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f68();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }

    return s0;
  }

  function peg$parseBacktickSequence() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 96) {
      s2 = peg$c10;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 96) {
          s2 = peg$c10;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f69(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f70(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }

    return s0;
  }

  function peg$parseReservedDirective() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 5) === peg$c19) {
      s0 = peg$c19;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c20) {
        s0 = peg$c20;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c21) {
          s0 = peg$c21;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c22) {
            s0 = peg$c22;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e68); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c23) {
              s0 = peg$c23;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e69); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c24) {
                s0 = peg$c24;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e70); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c25) {
                  s0 = peg$c25;
                  peg$currPos += 5;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e71); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c26) {
                    s0 = peg$c26;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e72); }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r13.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r13.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e74); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e73); }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r14.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = input.charAt(peg$currPos);
        if (peg$r14.test(s1)) {
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e76); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }

    return s0;
  }

  function peg$parseHWS() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r15.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r15.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e78); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e77); }

    return s0;
  }

  function peg$parseLineTerminator() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c27) {
        s0 = peg$c27;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s0 === peg$FAILED) {
        s0 = input.charAt(peg$currPos);
        if (peg$r16.test(s0)) {
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e80); }
        }
      }
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTextUntilNewline() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r17.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r17.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f71(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEndOfLine() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r0.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
    }
    s2 = peg$parseLineTerminator();
    if (s2 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s3 = peg$f72(s1, s2);
      if (s3) {
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f73(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = input.charAt(peg$currPos);
      if (peg$r0.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r0.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
      }
      s2 = peg$parseLineTerminator();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f74(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = input.charAt(peg$currPos);
        if (peg$r0.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = input.charAt(peg$currPos);
          if (peg$r0.test(s2)) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e0); }
          }
        }
        peg$savedPos = peg$currPos;
        s2 = peg$f75(s1);
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f76(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseCommandWithBases() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCommandSegmentList();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f77(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommandSegmentList() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseCommandPipeline();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommandOperator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseCommandPipeline();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f78(s1, s4, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommandOperator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseCommandPipeline();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f78(s1, s4, s6);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f79(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommandOperator() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c28;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c29) {
        s2 = peg$c29;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c30) {
          s2 = peg$c30;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e84); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s2 = peg$c31;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e85); }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f80(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommandPipeline() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseCommandBaseDetection();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCommandArguments();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f81(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommandArguments() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseCommandArgumentParts();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f82(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommandArgumentParts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCommandVariableRef();
    if (s2 === peg$FAILED) {
      s2 = peg$parseCommandArgumentText();
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseCommandVariableRef();
        if (s2 === peg$FAILED) {
          s2 = peg$parseCommandArgumentText();
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f83(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommandVariableRef() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f84(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommandArgumentText() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = [];
    s4 = input.charAt(peg$currPos);
    if (peg$r2.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = input.charAt(peg$currPos);
      if (peg$r2.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
    }
    s4 = [];
    s5 = input.charAt(peg$currPos);
    if (peg$r18.test(s5)) {
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r18.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e87); }
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = [];
      s6 = input.charAt(peg$currPos);
      if (peg$r2.test(s6)) {
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e10); }
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = input.charAt(peg$currPos);
        if (peg$r2.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
      }
      s3 = [s3, s4, s5];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommandBaseDetection() {
    var s0;

    s0 = peg$parseScriptRunnerCommand();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSpecialCommand();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSimpleCommand();
      }
    }

    return s0;
  }

  function peg$parseScriptRunnerCommand() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePackageManager();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 3) === peg$c33) {
        s3 = peg$c33;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseScriptName();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f86(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c34) {
        s1 = peg$c34;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parsePackageName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f87(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePackageManager() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c35) {
      s0 = peg$c35;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e90); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c36) {
        s0 = peg$c36;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e91); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c37) {
          s0 = peg$c37;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e92); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c38) {
            s0 = peg$c38;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e93); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseScriptName() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r19.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r19.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s5 = peg$c39;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = input.charAt(peg$currPos);
        if (peg$r19.test(s7)) {
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = input.charAt(peg$currPos);
            if (peg$r19.test(s7)) {
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e94); }
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c39;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = input.charAt(peg$currPos);
          if (peg$r19.test(s7)) {
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e94); }
          }
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = input.charAt(peg$currPos);
              if (peg$r19.test(s7)) {
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e94); }
              }
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsePackageName() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s2 = peg$c32;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r19.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r19.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e94); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c17;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = input.charAt(peg$currPos);
          if (peg$r19.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e94); }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = input.charAt(peg$currPos);
              if (peg$r19.test(s6)) {
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e94); }
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = input.charAt(peg$currPos);
      if (peg$r19.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = input.charAt(peg$currPos);
          if (peg$r19.test(s2)) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e94); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseSpecialCommand() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePythonCommand();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c40) {
        s3 = peg$c40;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e96); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseCommandModuleName();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f88(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseShellCommand();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseInlineFlag();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f89(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBuildTool();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseBuildTarget();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f90(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsePythonCommand() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c41) {
      s0 = peg$c41;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c42) {
        s0 = peg$c42;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e98); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c43) {
          s0 = peg$c43;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e99); }
        }
      }
    }

    return s0;
  }

  function peg$parseCommandModuleName() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r10.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r11.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e57); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r11.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
      }
      s4 = [];
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s6 = peg$c12;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s6 !== peg$FAILED) {
        s7 = input.charAt(peg$currPos);
        if (peg$r10.test(s7)) {
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
        if (s7 !== peg$FAILED) {
          s8 = [];
          s9 = input.charAt(peg$currPos);
          if (peg$r11.test(s9)) {
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e57); }
          }
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = input.charAt(peg$currPos);
            if (peg$r11.test(s9)) {
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
          }
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c12;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s6 !== peg$FAILED) {
          s7 = input.charAt(peg$currPos);
          if (peg$r10.test(s7)) {
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = input.charAt(peg$currPos);
            if (peg$r11.test(s9)) {
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = input.charAt(peg$currPos);
              if (peg$r11.test(s9)) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e57); }
              }
            }
            s6 = [s6, s7, s8];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseShellCommand() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c44) {
      s0 = peg$c44;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c45) {
        s0 = peg$c45;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c46) {
          s0 = peg$c46;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e102); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c47) {
            s0 = peg$c47;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e103); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c48) {
              s0 = peg$c48;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e104); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c49) {
                s0 = peg$c49;
                peg$currPos += 4;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e105); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseInlineFlag() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c50) {
      s0 = peg$c50;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c51) {
        s0 = peg$c51;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e107); }
      }
    }

    return s0;
  }

  function peg$parseBuildTool() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c52) {
      s0 = peg$c52;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c53) {
        s0 = peg$c53;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c54) {
          s0 = peg$c54;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e110); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c55) {
            s0 = peg$c55;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c56) {
              s0 = peg$c56;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e112); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c57) {
                s0 = peg$c57;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e113); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c58) {
                  s0 = peg$c58;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e114); }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBuildTarget() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r20.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e115); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r20.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e115); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseSimpleCommand() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCommandWord();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f91(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommandWord() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r21.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e116); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r21.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e116); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseCommandReference() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCommandArgs();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f92(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e117); }
    }

    return s0;
  }

  function peg$parseCommandArgs() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCommandArgumentList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c60;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f93(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e118); }
    }

    return s0;
  }

  function peg$parseCommandArgumentList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseCommandArgument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseCommandArgument();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f94(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseCommandArgument();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f94(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f95(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e121); }
    }

    return s0;
  }

  function peg$parseCommandArgument() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f96(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f97(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseRawArgChar();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseRawArgChar();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f98(s1);
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e123); }
    }

    return s0;
  }

  function peg$parseRawArgChar() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = input.charAt(peg$currPos);
    if (peg$r22.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e124); }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f99(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralContent() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEscapedStringContent();
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f100(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscapedSingleStringContent();
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f101(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 96) {
          s1 = peg$c10;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapedBacktickStringContent();
          if (input.charCodeAt(peg$currPos) === 96) {
            s3 = peg$c10;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f102(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e125); }
    }

    return s0;
  }

  function peg$parseSemanticPathContent() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePathParts();
      if (input.charCodeAt(peg$currPos) === 93) {
        s3 = peg$c63;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f103(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e126); }
    }

    return s0;
  }

  function peg$parsePathParts() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSpecialVariable();
    if (s2 === peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePathTextSegment();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePathSeparator();
        }
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseSpecialVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parseVariable();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePathTextSegment();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePathSeparator();
          }
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f104(s1);
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e129); }

    return s0;
  }

  function peg$parseSectionName() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 93) {
      s5 = peg$c63;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    peg$silentFails--;
    if (s5 === peg$FAILED) {
      s4 = undefined;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c63;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f105(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e130); }
    }

    return s0;
  }

  function peg$parseBracketContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseSemanticPathContent();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e131); }
    }

    return s0;
  }

  function peg$parseSemanticCommandBracketContent() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSpecialVariable();
      if (s3 === peg$FAILED) {
        s3 = peg$parseCommandContextVariable();
        if (s3 === peg$FAILED) {
          s3 = peg$parseQuotedCommandString();
          if (s3 === peg$FAILED) {
            s3 = peg$parseCommandTextContent();
          }
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSpecialVariable();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCommandContextVariable();
          if (s3 === peg$FAILED) {
            s3 = peg$parseQuotedCommandString();
            if (s3 === peg$FAILED) {
              s3 = peg$parseCommandTextContent();
            }
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 93) {
        s3 = peg$c63;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f106(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e132); }
    }

    return s0;
  }

  function peg$parseCommandBracketContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseSemanticCommandBracketContent();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e133); }
    }

    return s0;
  }

  function peg$parseCommandContextVariable() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f107(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e134); }
    }

    return s0;
  }

  function peg$parseQuotedCommandString() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDoubleQuotedCommandContent();
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f108(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSingleQuotedCommandContent();
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f109(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e135); }
    }

    return s0;
  }

  function peg$parseDoubleQuotedCommandContent() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSpecialVariable();
    if (s2 === peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parseDoubleQuotedText();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseSpecialVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parseVariable();
        if (s2 === peg$FAILED) {
          s2 = peg$parseDoubleQuotedText();
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f110(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseSingleQuotedCommandContent() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 39) {
      s4 = peg$c9;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f111(s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s4 = peg$c9;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f111(s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s1 = peg$f112(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseDoubleQuotedText() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = input.charAt(peg$currPos);
    if (peg$r23.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e136); }
    }
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = undefined;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f113(s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = input.charAt(peg$currPos);
        if (peg$r23.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e136); }
        }
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s2 = peg$f113(s4);
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f114(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommandTextContent() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCommandBracketChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseCommandBracketChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f115(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }

    return s0;
  }

  function peg$parseCommandBracketChar() {
    var s0, s1, s2, s3;

    s0 = peg$parseEscapeSequence();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c32;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$f116();
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f117(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDoubleBracketContent() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseInterpolationVar();
      if (s3 === peg$FAILED) {
        s3 = peg$parseTemplateTextSegment();
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseInterpolationVar();
        if (s3 === peg$FAILED) {
          s3 = peg$parseTemplateTextSegment();
        }
      }
      if (input.substr(peg$currPos, 2) === peg$c6) {
        s3 = peg$c6;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f118(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseInterpolationVar();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f119(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e138); }
    }

    return s0;
  }

  function peg$parseUnquotedPath() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUnquotedPathPart();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseUnquotedPathPart();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f120(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e139); }
    }

    return s0;
  }

  function peg$parseUnquotedPathPart() {
    var s0;

    s0 = peg$parsePathSeparator();
    if (s0 === peg$FAILED) {
      s0 = peg$parseUnquotedPathVar();
      if (s0 === peg$FAILED) {
        s0 = peg$parseUnquotedPathText();
      }
    }

    return s0;
  }

  function peg$parseUnquotedPathVar() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f121(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnquotedPathText() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$currPos;
    peg$silentFails++;
    s5 = input.charAt(peg$currPos);
    if (peg$r24.test(s5)) {
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e141); }
    }
    peg$silentFails--;
    if (s5 === peg$FAILED) {
      s4 = undefined;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = input.charAt(peg$currPos);
        if (peg$r24.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e141); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f122(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e140); }
    }

    return s0;
  }

  function peg$parseUnquotedCommand() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseAtVar();
    if (s2 === peg$FAILED) {
      s2 = peg$parseBaseTextSegment();
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseAtVar();
        if (s2 === peg$FAILED) {
          s2 = peg$parseBaseTextSegment();
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f123(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e142); }
    }

    return s0;
  }

  function peg$parseSemanticCodeContent() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCodeLiteralContent();
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 93) {
        s3 = peg$c63;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f124(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e143); }
    }

    return s0;
  }

  function peg$parseDirectCodeContent() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$parseSemanticCodeContent();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r25.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e145); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r25.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e145); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f125(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e144); }
    }

    return s0;
  }

  function peg$parseCodeLiteralContent() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCodeLiteralPart();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseCodeLiteralPart();
    }
    peg$savedPos = s0;
    s1 = peg$f126(s1);
    s0 = s1;
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e146); }

    return s0;
  }

  function peg$parseCodeLiteralPart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCodeLiteralContent();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f127(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f128(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLiteralOnlyContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseLiteralContent();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }

    return s0;
  }

  function peg$parseInterpolatedPathContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseBracketContent();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }

    return s0;
  }

  function peg$parseInterpolatedTemplateContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseDoubleBracketContent();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }

    return s0;
  }

  function peg$parsePathStyleInterpolation() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseInterpolatedPathContent();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }

    return s0;
  }

  function peg$parseTemplateStyleInterpolation() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseInterpolatedTemplateContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f129(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLiteralOnlyContent();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f130(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e151); }
    }

    return s0;
  }

  function peg$parseCommandStyleInterpolation() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseLiteralOnlyContent();
    if (s0 === peg$FAILED) {
      s0 = peg$parseInterpolatedPathContent();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInterpolatedTemplateContent();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e152); }
    }

    return s0;
  }

  function peg$parseSemanticTextContent() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f131();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c62;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e127); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r26.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e154); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r26.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e154); }
          }
        }
        s2 = input.substring(s2, peg$currPos);
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$f132(s2);
          if (s4) {
            s4 = undefined;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f133(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c62;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e127); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f134();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c21) {
            s1 = peg$c21;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e67); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f135();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
              s1 = peg$c8;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f136();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c9;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f137();
              }
              s0 = s1;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e153); }
    }

    return s0;
  }

  function peg$parseWrappedPathContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsePathStyleInterpolation();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f138(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e155); }
    }

    return s0;
  }

  function peg$parseWrappedTemplateContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseTemplateStyleInterpolation();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f139(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }

    return s0;
  }

  function peg$parseWrappedCommandContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseCommandContentInterpolation();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f140(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }

    return s0;
  }

  function peg$parseCommandContentInterpolation() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseLiteralOnlyContent();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCommandBracketContent();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInterpolatedTemplateContent();
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e158); }
    }

    return s0;
  }

  function peg$parseWrappedCodeContent() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseDirectCodeContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f141(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e159); }
    }

    return s0;
  }

  function peg$parseFieldAccess() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDotSeparator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f142(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNumericFieldAccess() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseDotSeparator();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseNumberLiteral();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f143(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArrayAccess() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseNumberLiteral();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c63;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f144(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c62;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e127); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseBaseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c63;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e128); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f145(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseAnyFieldAccess() {
    var s0;

    s0 = peg$parseFieldAccess();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNumericFieldAccess();
      if (s0 === peg$FAILED) {
        s0 = peg$parseArrayAccess();
      }
    }

    return s0;
  }

  function peg$parseCommaSpace() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c61;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e122); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e160); }
    }

    return s0;
  }

  function peg$parseSemicolonSpace() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 59) {
      s2 = peg$c31;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e161); }
    }

    return s0;
  }

  function peg$parsePathExpression() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseUnifiedSectionPath();
    if (s0 === peg$FAILED) {
      s0 = peg$parseUnifiedPath();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }

    return s0;
  }

  function peg$parseUnifiedSectionPath() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseUnifiedPath();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 35) {
        s3 = peg$c18;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseBaseIdentifier();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f146(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e163); }
    }

    return s0;
  }

  function peg$parseUnifiedPath() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseWrappedPathContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f147(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e164); }
    }

    return s0;
  }

  function peg$parseURLProtocolType() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c64) {
      s3 = peg$c64;
      peg$currPos += 4;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 115) {
        s4 = peg$c65;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e167); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c66) {
        s2 = peg$c66;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e168); }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f148(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e165); }
    }

    return s0;
  }

  function peg$parseURLRest() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseURLParts();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f149(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e169); }
    }

    return s0;
  }

  function peg$parseURLParts() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseURLEscapedBackslash();
    if (s2 === peg$FAILED) {
      s2 = peg$parseURLEscapedAt();
      if (s2 === peg$FAILED) {
        s2 = peg$parseURLVariableRef();
        if (s2 === peg$FAILED) {
          s2 = peg$parseURLSegment();
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseURLEscapedBackslash();
        if (s2 === peg$FAILED) {
          s2 = peg$parseURLEscapedAt();
          if (s2 === peg$FAILED) {
            s2 = peg$parseURLVariableRef();
            if (s2 === peg$FAILED) {
              s2 = peg$parseURLSegment();
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f150(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e171); }
    }

    return s0;
  }

  function peg$parseURLEscapedBackslash() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e173); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f151();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }

    return s0;
  }

  function peg$parseURLEscapedAt() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e175); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f152();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e174); }
    }

    return s0;
  }

  function peg$parseURLVariableRef() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f153(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e176); }
    }

    return s0;
  }

  function peg$parseURLSegment() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r27.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r27.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e178); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f154(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e177); }
    }

    return s0;
  }

  function peg$parseIsInRHS() {
    var s0, s1;

    peg$silentFails++;
    peg$savedPos = peg$currPos;
    s0 = peg$f155();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e179); }
    }

    return s0;
  }

  function peg$parseTextRHS() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRunDirectiveRef();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f156();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseAddDirectiveRef();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f157();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSectionExtractionCore();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f158(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePathExpression();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f159(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseWrappedTemplateContent();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f160(s1);
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDataRHS() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIsInRHS();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseRunDirectiveRef();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f161();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c70;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e180); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseDataProperties();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c71;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e181); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f162(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c62;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e127); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseDataItems();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c63;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e128); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f163(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDataLiteral();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f164(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseDataProperties() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseDataProperty();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseDataProperty();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f165(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseDataProperty();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f165(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f166(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataProperty() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c39;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseDataValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f167(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBaseIdentifier();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c39;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseDataValue();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f168(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDataItems() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseDataValue();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseDataValue();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f169(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseDataValue();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f169(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f170(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f171(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNumberLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f172(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBooleanLiteral();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f173(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNullLiteral();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f174(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseRunRHS() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWrappedCommandContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f175(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseWrappedCodeContent();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f176(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseSecurityOptions() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseTTLOption();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      s4 = peg$parseTrustOption();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f177(s1, s4);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f178(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTrustOption();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f179(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }

    return s0;
  }

  function peg$parseTTLOption() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTTLValue();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c60;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e120); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f180(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e183); }
    }

    return s0;
  }

  function peg$parseTTLValue() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseTTLDuration();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f181(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTTLSpecial();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f182(s1);
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e184); }
    }

    return s0;
  }

  function peg$parseTTLDuration() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTTLUnit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f183(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }

    return s0;
  }

  function peg$parseTTLUnit() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 115) {
      s1 = peg$c65;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e167); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f184();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 109) {
        s1 = peg$c72;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e187); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f185();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 104) {
          s1 = peg$c73;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e188); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f186();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 100) {
            s1 = peg$c74;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e189); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f187();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 119) {
              s1 = peg$c75;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e190); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f188();
            }
            s0 = s1;
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }

    return s0;
  }

  function peg$parseTTLSpecial() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c76) {
      s1 = peg$c76;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e192); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f189();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c77) {
        s1 = peg$c77;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e193); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f190();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e191); }
    }

    return s0;
  }

  function peg$parseTrustOption() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c78) {
      s1 = peg$c78;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e195); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTrustLevel();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f191(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e194); }
    }

    return s0;
  }

  function peg$parseTrustLevel() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c79) {
      s1 = peg$c79;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e197); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f192();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e198); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f193();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c81) {
          s1 = peg$c81;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e199); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f194();
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e196); }
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r4.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r4.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f195(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e200); }
    }

    return s0;
  }

  function peg$parseShellCommandLine() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsePipeline();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseChainOperator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsePipeline();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f196(s1, s4, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseChainOperator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parsePipeline();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f196(s1, s4, s6);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f197(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChainOperator() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f198();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c30) {
        s1 = peg$c30;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f199();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s1 = peg$c31;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e85); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f200();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parsePipeline() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseShellSimpleCommand();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 124) {
        s5 = peg$c28;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e82); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseShellSimpleCommand();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f201(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 124) {
          s5 = peg$c28;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e82); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseShellSimpleCommand();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f201(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f202(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShellSimpleCommand() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseShellCommandName();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseShellCommandArgument();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f203(s1, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseShellCommandArgument();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f203(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f204(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShellCommandName() {
    var s0, s1;

    s0 = peg$parseShellVariable();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUnquotedWord();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f205(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseShellCommandArgument() {
    var s0, s1;

    s0 = peg$parseQuotedString();
    if (s0 === peg$FAILED) {
      s0 = peg$parseShellVariable();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseUnquotedWord();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f206(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseShellVariable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f207(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuotedString() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDoubleQuotedContent();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDoubleQuotedContent();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f208(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSingleQuotedContent();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSingleQuotedContent();
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f209(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDoubleQuotedContent() {
    var s0, s1, s2, s3;

    s0 = peg$parseShellVariable();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r28.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e201); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r28.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e201); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f210(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseSingleQuotedContent() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r29.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e202); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r29.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e202); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f211(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUnquotedWord() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r30.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e203); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r30.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e203); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseUnifiedCodeBrackets() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseUnifiedCodeContent();
      s3 = input.substring(s3, peg$currPos);
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c83) {
        s5 = peg$c83;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e206); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f212(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e204); }
    }

    return s0;
  }

  function peg$parseUnifiedCommandBrackets() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseUnifiedCommandParts();
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c83) {
        s5 = peg$c83;
        peg$currPos += 2;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e206); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f213(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e207); }
    }

    return s0;
  }

  function peg$parseUnifiedRunContent() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c82) {
      s1 = peg$c82;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e205); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseUnifiedRunContentInner();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c83) {
          s5 = peg$c83;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e206); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f214(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e208); }
    }

    return s0;
  }

  function peg$parseUnifiedRunContentInner() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseRunCodeLanguage();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      s4 = peg$parseUnifiedCodeContent();
      s3 = input.substring(s3, peg$currPos);
      peg$savedPos = s0;
      s0 = peg$f215(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUnifiedCommandParts();
      peg$savedPos = s0;
      s1 = peg$f216(s1);
      s0 = s1;
    }

    return s0;
  }

  function peg$parseUnifiedCommandParts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUnifiedCommandVariable();
    if (s2 === peg$FAILED) {
      s2 = peg$parseUnifiedCommandText();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseUnifiedCommandVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parseUnifiedCommandText();
      }
    }
    peg$savedPos = s0;
    s1 = peg$f217(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseUnifiedCommandVariable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f218(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseSpecialVariable();
    }

    return s0;
  }

  function peg$parseUnifiedCommandText() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUnifiedCommandChar();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseUnifiedCommandChar();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f219(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseUnifiedCommandChar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnifiedCommandInnerContent();
      if (input.charCodeAt(peg$currPos) === 93) {
        s3 = peg$c63;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f220(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c32;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c83) {
          s3 = peg$c83;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e206); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f221(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseUnifiedCommandInnerContent() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUnifiedCommandInnerChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseUnifiedCommandInnerChar();
    }
    peg$savedPos = s0;
    s1 = peg$f222(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseUnifiedCommandInnerChar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnifiedCommandInnerContent();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f223(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f224(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseUnifiedCodeContent() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUnifiedCodeChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseUnifiedCodeChar();
    }
    peg$savedPos = s0;
    s1 = peg$f225(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseUnifiedCodeChar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnifiedCodeInnerContent();
      if (input.charCodeAt(peg$currPos) === 93) {
        s3 = peg$c63;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f226(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c83) {
        s2 = peg$c83;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e206); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f227(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseUnifiedCodeInnerContent() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseUnifiedCodeInnerChar();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseUnifiedCodeInnerChar();
    }
    peg$savedPos = s0;
    s1 = peg$f228(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseUnifiedCodeInnerChar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseUnifiedCodeInnerContent();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f229(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 93) {
        s2 = peg$c63;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = undefined;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f230(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0;

    s0 = peg$parseSpecialVariable();
    if (s0 === peg$FAILED) {
      s0 = peg$parseInterpolationVar();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAtVar();
      }
    }

    return s0;
  }

  function peg$parseSpecialVariable() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c84) {
      s1 = peg$c84;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e210); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f231();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c32;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSpecialVariableName();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f232(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e209); }
    }

    return s0;
  }

  function peg$parseSpecialVariableName() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCaseInsensitiveTime();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f233(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCaseInsensitiveProjectPath();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f234(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCaseInsensitiveInput();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f235(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCaseInsensitiveDebug();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f236(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseCaseInsensitiveStdin();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f237(s1);
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseCaseInsensitiveTime() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r31.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e211); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r32.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e212); }
      }
      if (s3 !== peg$FAILED) {
        s4 = input.charAt(peg$currPos);
        if (peg$r33.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e213); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r34.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e214); }
          }
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f238(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCaseInsensitiveProjectPath() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r35.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e215); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r36.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e216); }
      }
      if (s3 !== peg$FAILED) {
        s4 = input.charAt(peg$currPos);
        if (peg$r37.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e217); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r38.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e218); }
          }
          if (s5 !== peg$FAILED) {
            s6 = input.charAt(peg$currPos);
            if (peg$r34.test(s6)) {
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e214); }
            }
            if (s6 !== peg$FAILED) {
              s7 = input.charAt(peg$currPos);
              if (peg$r39.test(s7)) {
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e219); }
              }
              if (s7 !== peg$FAILED) {
                s8 = input.charAt(peg$currPos);
                if (peg$r31.test(s8)) {
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e211); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = input.charAt(peg$currPos);
                  if (peg$r35.test(s9)) {
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e215); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = input.charAt(peg$currPos);
                    if (peg$r40.test(s10)) {
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e220); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = input.charAt(peg$currPos);
                      if (peg$r31.test(s11)) {
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e211); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = input.charAt(peg$currPos);
                        if (peg$r41.test(s12)) {
                          peg$currPos++;
                        } else {
                          s12 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e221); }
                        }
                        if (s12 !== peg$FAILED) {
                          s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12];
                          s1 = s2;
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f239(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCaseInsensitiveInput() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r32.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e212); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r42.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e222); }
      }
      if (s3 !== peg$FAILED) {
        s4 = input.charAt(peg$currPos);
        if (peg$r35.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e215); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r43.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e223); }
          }
          if (s5 !== peg$FAILED) {
            s6 = input.charAt(peg$currPos);
            if (peg$r31.test(s6)) {
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e211); }
            }
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f240(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCaseInsensitiveDebug() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r44.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e224); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r34.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e214); }
      }
      if (s3 !== peg$FAILED) {
        s4 = input.charAt(peg$currPos);
        if (peg$r45.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e225); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r43.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e223); }
          }
          if (s5 !== peg$FAILED) {
            s6 = input.charAt(peg$currPos);
            if (peg$r46.test(s6)) {
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e226); }
            }
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f241(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCaseInsensitiveStdin() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = input.charAt(peg$currPos);
    if (peg$r47.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e227); }
    }
    if (s2 !== peg$FAILED) {
      s3 = input.charAt(peg$currPos);
      if (peg$r31.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e211); }
      }
      if (s3 !== peg$FAILED) {
        s4 = input.charAt(peg$currPos);
        if (peg$r44.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e224); }
        }
        if (s4 !== peg$FAILED) {
          s5 = input.charAt(peg$currPos);
          if (peg$r32.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e212); }
          }
          if (s5 !== peg$FAILED) {
            s6 = input.charAt(peg$currPos);
            if (peg$r42.test(s6)) {
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e222); }
            }
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f242(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAtVar() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseVariableContext();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFrontmatterAccess();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f243(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c32;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVariableContext();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBaseIdentifier();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseAnyFieldAccess();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseAnyFieldAccess();
            }
            peg$savedPos = s0;
            s0 = peg$f244(s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s1 = peg$c32;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e86); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseBaseIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c62;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e127); }
            }
            peg$silentFails--;
            if (s4 !== peg$FAILED) {
              peg$currPos = s3;
              s3 = undefined;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseAnyFieldAccess();
              if (s5 !== peg$FAILED) {
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parseAnyFieldAccess();
                }
              } else {
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f245(s2, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseInterpolationVar() {
    var s0;

    s0 = peg$parseInterpolationSpecialVar();
    if (s0 === peg$FAILED) {
      s0 = peg$parseInterpolationSimpleVar();
      if (s0 === peg$FAILED) {
        s0 = peg$parseInterpolationDataVar();
      }
    }

    return s0;
  }

  function peg$parseInterpolationSpecialVar() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseSpecialVariableName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseVarFormat();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s6 = peg$c4;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f246(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterpolationSimpleVar() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseBaseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseVarFormat();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s6 = peg$c4;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f247(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInterpolationDataVar() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseBaseIdentifier();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseAnyFieldAccess();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseAnyFieldAccess();
        }
        s5 = peg$parseVarFormat();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s7 = peg$c4;
          peg$currPos += 2;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f248(s3, s4, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseVarFormat() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f249(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFrontmatterAccess() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c85) {
      s1 = peg$c85;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e228); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e229); }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c12;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBaseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseAnyFieldAccess();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseAnyFieldAccess();
          }
          peg$savedPos = s0;
          s0 = peg$f250(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWithClause() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c87) {
      s2 = peg$c87;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e230); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseWithObject();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f251(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWithObject() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c70;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseWithProperties();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c71;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f252(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWithProperties() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseWithProperty();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseWithProperty();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f253(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWithProperty();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f253(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f254(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWithProperty() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c88) {
      s1 = peg$c88;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e231); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c39;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePipelineArray();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f255(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e232); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c39;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$parseNeedsObject();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f256(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsePipelineArray() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePipelineCommandList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c63;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f257(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePipelineCommandList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePipelineCommand();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsePipelineCommand();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f258(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsePipelineCommand();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f258(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f259(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePipelineCommand() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRunCommandReference();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f260(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNeedsObject() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c70;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseNeedsLanguageList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c71;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f261(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNeedsLanguageList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNeedsLanguageEntry();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseNeedsLanguageEntry();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f262(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseNeedsLanguageEntry();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f262(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f263(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNeedsLanguageEntry() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c39;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePackagesObject();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f264(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePackagesObject() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c70;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsePackagesList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c71;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f265(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePackagesList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsePackageEntry();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsePackageEntry();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f266(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsePackageEntry();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f266(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f267(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePackageEntry() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c39;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseStringLiteral();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f268(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAddPathCore() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsePathExpression();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f269(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAddTemplateCore() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTemplateCore();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f270(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAddVariableCore() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseVariableReference();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f271(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAddTemplateInvocationCore() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c59;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseTemplateArgumentList();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c60;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e120); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f272(s2, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAddPathSectionCore() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseQuotedContent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c90) {
        s3 = peg$c90;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e233); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePathExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseAsNewTitle();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f273(s1, s5, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c62;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e127); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r48.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e234); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = input.charAt(peg$currPos);
            if (peg$r48.test(s4)) {
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e234); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 35) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            s5 = peg$currPos;
            s6 = [];
            s7 = input.charAt(peg$currPos);
            if (peg$r26.test(s7)) {
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e154); }
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = input.charAt(peg$currPos);
                if (peg$r26.test(s7)) {
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e154); }
                }
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              s5 = input.substring(s5, peg$currPos);
            } else {
              s5 = s6;
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s6 = peg$c63;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e128); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAsNewTitle();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f274(s2, s5, s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseAddCore() {
    var s0;

    s0 = peg$parseAddPathSectionCore();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAddTemplateInvocationCore();
      if (s0 === peg$FAILED) {
        s0 = peg$parseAddTemplateCore();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAddVariableCore();
          if (s0 === peg$FAILED) {
            s0 = peg$parseAddPathCore();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseCodeCore() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWrappedCodeContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f275(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLanguageCodeCore() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCodeLanguage();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseWrappedCodeContent();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f276(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRunLanguageCodeCore() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRunCodeLanguage();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRunCodeArguments();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseDirectCodeContent();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f277(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCodeLanguage() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parseBaseIdentifier();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s6 = peg$c12;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseBaseIdentifier();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c12;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseBaseIdentifier();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f278(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRunCodeLanguage() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c91) {
      s1 = peg$c91;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e235); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c92) {
        s1 = peg$c92;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e236); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c41) {
          s1 = peg$c41;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e97); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c93) {
            s1 = peg$c93;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e237); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c46) {
              s1 = peg$c46;
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e102); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c45) {
                s1 = peg$c45;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e101); }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f279(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRunCodeArguments() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRunArgumentList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c60;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f280(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRunArgumentList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseRunArgument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseRunArgument();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f281(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseRunArgument();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f281(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f282(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRunArgument() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f283(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommandCore() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWrappedCommandContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f284(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseParameterizedCommandCore() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseWrappedCommandContent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCommandParameters();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f285(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommandParameters() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c39;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCommandParameterList();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f286(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommandParameterList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseCommandParameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseCommandParameter();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f287(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseCommandParameter();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f287(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f288(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommandParameter() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c94;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e238); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseStringLiteral();
        if (s5 === peg$FAILED) {
          s5 = peg$parseNumberLiteral();
          if (s5 === peg$FAILED) {
            s5 = peg$parseBooleanLiteral();
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f289(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePathCore() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWrappedPathContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f290(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSectionPathCore() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseWrappedPathContent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 35) {
        s3 = peg$c18;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseBaseIdentifier();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f291(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseURLPathCore() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseURLProtocol();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c39;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseURLContent();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f292(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseURLProtocol() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c64) {
      s3 = peg$c64;
      peg$currPos += 4;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e166); }
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 115) {
        s4 = peg$c65;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e167); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c66) {
        s2 = peg$c66;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e168); }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f293(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseURLContent() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c67) {
      s3 = peg$c67;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e170); }
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r49.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e239); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r49.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e239); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f294(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRunExecCore() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRunCommandReference();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f295(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSectionExtractionCore() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseLiteralContent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 4) === peg$c90) {
        s3 = peg$c90;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e233); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePathExpression();
        if (s5 !== peg$FAILED) {
          s6 = peg$parseAsNewTitle();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f296(s1, s5, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e240); }
    }

    return s0;
  }

  function peg$parseTemplateCore() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWrappedTemplateContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f297(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRichTemplateCore() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseWrappedTemplateContent();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseTemplateOptions();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f298(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateOptions() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c39;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTemplateOptionsList();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f299(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateOptionsList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseTemplateOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseTemplateOption();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f300(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseTemplateOption();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f300(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f301(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateOption() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c94;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e238); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseStringLiteral();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f302(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAtAdd() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c22) {
        s2 = peg$c22;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e68); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseWrappedTemplateContent();
        if (s4 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s5 = peg$f303(s4);
          if (s5) {
            s5 = undefined;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseAsNewTitle();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f304(s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDirectiveContext();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c22) {
          s2 = peg$c22;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseWrappedPathContent();
          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s5 = peg$f305(s4);
            if (s5) {
              s5 = undefined;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAsNewTitle();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f306(s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDirectiveContext();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c22) {
            s2 = peg$c22;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e68); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parseQuotedContent();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.substr(peg$currPos, 4) === peg$c90) {
                s6 = peg$c90;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e233); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                s8 = peg$parsePathExpression();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_();
                  s11 = peg$parseSecurityOptions();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s9 = peg$f307(s4, s8, s11);
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  s10 = peg$parse_();
                  s11 = peg$parseAsNewTitle();
                  if (s11 === peg$FAILED) {
                    s11 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f308(s4, s8, s9, s11);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDirectiveContext();
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c22) {
              s2 = peg$c22;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              s4 = peg$currPos;
              s5 = peg$parseSecurityOptions();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              s5 = peg$parseTemplateCore();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseHeaderLevel();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s8 = peg$parseUnderHeader();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f309(s4, s5, s7, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDirectiveContext();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c22) {
                s2 = peg$c22;
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e68); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 64) {
                  s4 = peg$c32;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e86); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseBaseIdentifier();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s7 = peg$c59;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e119); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      s9 = peg$parseTemplateArgumentList();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      s10 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s11 = peg$c60;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e120); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parse_();
                        s13 = peg$parseHeaderLevel();
                        if (s13 === peg$FAILED) {
                          s13 = null;
                        }
                        s14 = peg$parseUnderHeader();
                        if (s14 === peg$FAILED) {
                          s14 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f310(s5, s9, s13, s14);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDirectiveContext();
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c22) {
                  s2 = peg$c22;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e68); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  s4 = peg$currPos;
                  s5 = peg$parseSecurityOptions();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 64) {
                    s5 = peg$c32;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e86); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseVariableReference();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      s8 = peg$parseHeaderLevel();
                      if (s8 === peg$FAILED) {
                        s8 = null;
                      }
                      s9 = peg$parseUnderHeader();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f311(s4, s6, s8, s9);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDirectiveContext();
                if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c22) {
                    s2 = peg$c22;
                    peg$currPos += 4;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e68); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    s4 = peg$currPos;
                    s5 = peg$parseSecurityOptions();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    if (input.charCodeAt(peg$currPos) === 34) {
                      s5 = peg$c8;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e22); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$currPos;
                      s7 = [];
                      s8 = input.charAt(peg$currPos);
                      if (peg$r50.test(s8)) {
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e241); }
                      }
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = input.charAt(peg$currPos);
                        if (peg$r50.test(s8)) {
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e241); }
                        }
                      }
                      s6 = input.substring(s6, peg$currPos);
                      if (input.charCodeAt(peg$currPos) === 34) {
                        s7 = peg$c8;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e22); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        s9 = peg$parseHeaderLevel();
                        if (s9 === peg$FAILED) {
                          s9 = null;
                        }
                        s10 = peg$parseUnderHeader();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f312(s4, s6, s9, s10);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseDirectiveContext();
                  if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c22) {
                      s2 = peg$c22;
                      peg$currPos += 4;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e68); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parse_();
                      s4 = peg$currPos;
                      peg$silentFails++;
                      if (input.substr(peg$currPos, 2) === peg$c5) {
                        s5 = peg$c5;
                        peg$currPos += 2;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e7); }
                      }
                      peg$silentFails--;
                      if (s5 === peg$FAILED) {
                        s4 = undefined;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$currPos;
                        peg$silentFails++;
                        s6 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 91) {
                          s7 = peg$c62;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e127); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = [];
                          s9 = input.charAt(peg$currPos);
                          if (peg$r48.test(s9)) {
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e234); }
                          }
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = input.charAt(peg$currPos);
                            if (peg$r48.test(s9)) {
                              peg$currPos++;
                            } else {
                              s9 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e234); }
                            }
                          }
                          if (input.charCodeAt(peg$currPos) === 35) {
                            s9 = peg$c18;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e54); }
                          }
                          if (s9 !== peg$FAILED) {
                            s7 = [s7, s8, s9];
                            s6 = s7;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                        peg$silentFails--;
                        if (s6 === peg$FAILED) {
                          s5 = undefined;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parsePathExpression();
                          if (s6 !== peg$FAILED) {
                            s7 = peg$currPos;
                            s8 = peg$parse_();
                            s9 = peg$parseSecurityOptions();
                            if (s9 !== peg$FAILED) {
                              peg$savedPos = s7;
                              s7 = peg$f313(s6, s9);
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                            if (s7 === peg$FAILED) {
                              s7 = null;
                            }
                            s8 = peg$parse_();
                            s9 = peg$parseHeaderLevel();
                            if (s9 === peg$FAILED) {
                              s9 = null;
                            }
                            s10 = peg$parseUnderHeader();
                            if (s10 === peg$FAILED) {
                              s10 = null;
                            }
                            peg$savedPos = s0;
                            s0 = peg$f314(s6, s7, s9, s10);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAddDirectiveRef() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRHSContext();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseWrappedPathContent();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f315(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRHSContext();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$currPos;
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r17.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e81); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r17.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e81); }
          }
        }
        s3 = input.substring(s3, peg$currPos);
        peg$savedPos = s0;
        s0 = peg$f316(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseVariableReference() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseAnyFieldAccess();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseAnyFieldAccess();
      }
      peg$savedPos = s0;
      s0 = peg$f317(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuotedContent() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s6 = peg$c8;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 34) {
          s6 = peg$c8;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f318(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 39) {
          s6 = peg$c9;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 39) {
            s6 = peg$c9;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = undefined;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s2 = input.substring(s2, peg$currPos);
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f319(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseHeaderLevel() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c95) {
      s2 = peg$c95;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e242); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      if (input.charCodeAt(peg$currPos) === 35) {
        s5 = peg$c18;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (input.charCodeAt(peg$currPos) === 35) {
            s5 = peg$c18;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f320(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnderHeader() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5) === peg$c96) {
      s2 = peg$c96;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e243); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseTextUntilNewline();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f321(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAsNewTitle() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c95) {
      s2 = peg$c95;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e242); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseLiteralContent();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f322(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateArgumentList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTemplateArgument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseTemplateArgument();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f323(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTemplateArgument();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f323(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f324(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateArgument() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseQuotedStringContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f325(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c32;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseVariableReference();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f326(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseQuotedStringContent() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s6 = peg$c8;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 34) {
          s6 = peg$c8;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f327(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 39) {
          s6 = peg$c9;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 39) {
            s6 = peg$c9;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = undefined;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        s2 = input.substring(s2, peg$currPos);
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f328(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDottedIdentifier() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c12;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseBaseIdentifier();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f329(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c12;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseBaseIdentifier();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f329(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f330(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e244); }
    }

    return s0;
  }

  function peg$parseAtData() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c19) {
        s2 = peg$c19;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e65); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseDottedIdentifier();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseSecurityOptions();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s8 = peg$c94;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e238); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseDataValue();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f331(s4, s6, s10);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataValue() {
    var s0, s1;

    s0 = peg$parseForeachCommandExpression();
    if (s0 === peg$FAILED) {
      s0 = peg$parseDirectiveValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTemplateValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseVariableReferenceValue();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDataObjectLiteral();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f332(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDataArrayLiteral();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f333(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$parseLiteralPathValue();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseDataPrimitiveValue();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f334(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseDirectiveValue() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 91) {
        s3 = peg$c62;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e127); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseDataCommandParts();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c63;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f335(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c21) {
        s1 = peg$c21;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseRunExecCore();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f336(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c22) {
          s1 = peg$c22;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseAddCore();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f337(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseVariableReferenceValue() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReservedDirective();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c32;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBaseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseAnyFieldAccess();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseAnyFieldAccess();
          }
          peg$savedPos = s0;
          s0 = peg$f338(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTemplateValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseWrappedTemplateContent();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f339(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDataObjectLiteral() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c70;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e180); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseDataObjectProperties();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c71;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f340(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataObjectProperties() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDataObjectProperty();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseDataObjectProperty();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f341(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDataObjectProperty();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f341(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f342(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataObjectProperty() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDataPropertyKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c39;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseDataPropertyValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f343(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataPropertyKey() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f344(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseStringLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f345(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseDataPropertyValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseDataValue();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f346(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDataArrayLiteral() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseDataArrayItems();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c63;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f347(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataArrayItems() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseDataPropertyValue();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseDataPropertyValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f348(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseDataPropertyValue();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f348(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f349(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataPrimitiveValue() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f350(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseNumberLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f351(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBooleanLiteral();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f352(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseNullLiteral();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f353();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseVariable();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f354(s1);
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLiteralPathValue() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseLiteralPathContent();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c63;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f355(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralPathContent() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseLiteralPathPart();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseLiteralPathPart();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f356(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLiteralPathPart() {
    var s0;

    s0 = peg$parseLiteralPathEscapedAt();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLiteralPathVariableRef();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLiteralPathText();
      }
    }

    return s0;
  }

  function peg$parseLiteralPathEscapedAt() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e175); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f357();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLiteralPathVariableRef() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f358(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLiteralPathText() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r51.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e245); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r51.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e245); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f359(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseForeachCommandExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c97) {
      s1 = peg$c97;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e246); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseForeachCommandRef();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 40) {
          s5 = peg$c59;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e119); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseForeachArrayArgumentList();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c60;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e120); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f360(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForeachCommandRef() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f361(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForeachArrayArgumentList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseForeachVariableRef();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseForeachVariableRef();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f362(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseForeachVariableRef();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f362(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f363(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForeachVariableRef() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f364(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDataCommandParts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDataCommandVariable();
    if (s2 === peg$FAILED) {
      s2 = peg$parseDataCommandText();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseDataCommandVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parseDataCommandText();
      }
    }
    peg$savedPos = s0;
    s1 = peg$f365(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseDataCommandVariable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f366(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseSpecialVariable();
    }

    return s0;
  }

  function peg$parseDataCommandText() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 93) {
      s5 = peg$c63;
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e128); }
    }
    peg$silentFails--;
    if (s5 === peg$FAILED) {
      s4 = undefined;
    } else {
      peg$currPos = s4;
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 64) {
        s6 = peg$c32;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c63;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 64) {
            s6 = peg$c32;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e86); }
          }
          peg$silentFails--;
          if (s6 === peg$FAILED) {
            s5 = undefined;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f367(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAtExec() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c25) {
        s2 = peg$c25;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseBaseIdentifier();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseExecMetadata();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parseExecParameters();
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s8 = peg$c94;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e238); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.substr(peg$currPos, 4) === peg$c21) {
              s10 = peg$c21;
              peg$currPos += 4;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e67); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parseRunCodeLanguage();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                s14 = peg$parseRunCodeArguments();
                if (s14 === peg$FAILED) {
                  s14 = null;
                }
                s15 = peg$parse_();
                s16 = peg$parseUnifiedCodeBrackets();
                if (s16 !== peg$FAILED) {
                  s17 = peg$parseWithClause();
                  if (s17 === peg$FAILED) {
                    s17 = null;
                  }
                  s18 = peg$currPos;
                  s19 = peg$parse_();
                  s20 = peg$parseTrustOption();
                  if (s20 !== peg$FAILED) {
                    peg$savedPos = s18;
                    s18 = peg$f368(s4, s5, s6, s12, s14, s16, s17, s20);
                  } else {
                    peg$currPos = s18;
                    s18 = peg$FAILED;
                  }
                  if (s18 === peg$FAILED) {
                    s18 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f369(s4, s5, s6, s12, s14, s16, s17, s18);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDirectiveContext();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c25) {
          s2 = peg$c25;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e71); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseBaseIdentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseExecMetadata();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = peg$parseExecParameters();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s8 = peg$c94;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e238); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              if (input.substr(peg$currPos, 4) === peg$c21) {
                s10 = peg$c21;
                peg$currPos += 4;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e67); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                s12 = peg$parseUnifiedCommandBrackets();
                if (s12 !== peg$FAILED) {
                  s13 = peg$parseWithClause();
                  if (s13 === peg$FAILED) {
                    s13 = null;
                  }
                  s14 = peg$currPos;
                  s15 = peg$parse_();
                  s16 = peg$parseTrustOption();
                  if (s16 !== peg$FAILED) {
                    peg$savedPos = s14;
                    s14 = peg$f370(s4, s5, s6, s12, s13, s16);
                  } else {
                    peg$currPos = s14;
                    s14 = peg$FAILED;
                  }
                  if (s14 === peg$FAILED) {
                    s14 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f371(s4, s5, s6, s12, s13, s14);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDirectiveContext();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c25) {
            s2 = peg$c25;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e71); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parseBaseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExecMetadata();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parseExecParameters();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s7 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s8 = peg$c94;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e238); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                if (input.substr(peg$currPos, 4) === peg$c21) {
                  s10 = peg$c21;
                  peg$currPos += 4;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e67); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 64) {
                    s12 = peg$c32;
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e86); }
                  }
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parseCommandReference();
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parseWithClause();
                      if (s14 === peg$FAILED) {
                        s14 = null;
                      }
                      s15 = peg$currPos;
                      s16 = peg$parse_();
                      s17 = peg$parseTrustOption();
                      if (s17 !== peg$FAILED) {
                        peg$savedPos = s15;
                        s15 = peg$f372(s4, s5, s6, s13, s14, s17);
                      } else {
                        peg$currPos = s15;
                        s15 = peg$FAILED;
                      }
                      if (s15 === peg$FAILED) {
                        s15 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f373(s4, s5, s6, s13, s14, s15);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseExecMetadata() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c98) {
        s2 = peg$c98;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e247); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c99) {
          s2 = peg$c99;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e248); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c100) {
            s2 = peg$c100;
            peg$currPos += 8;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e249); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c101) {
              s2 = peg$c101;
              peg$currPos += 4;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e250); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c102) {
                s2 = peg$c102;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e251); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c103) {
                  s2 = peg$c103;
                  peg$currPos += 4;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e252); }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f374(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExecParameters() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c59;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseExecParameterList();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s6 = peg$c60;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f375(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExecParameterList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseExecParameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s5 = peg$c61;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e122); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseExecParameter();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f376(s1, s7);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c61;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e122); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseExecParameter();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f376(s1, s7);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f377(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExecParameter() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f378(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAtImport() {
    var s0;

    s0 = peg$parseAtImportShorthand();
    if (s0 === peg$FAILED) {
      s0 = peg$parseAtImportFull();
    }

    return s0;
  }

  function peg$parseAtImportShorthand() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c24) {
        s2 = peg$c24;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$currPos;
        s5 = peg$parseSecurityOptions();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseImportPath();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f379(s4, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAtImportFull() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c24) {
        s2 = peg$c24;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e70); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$currPos;
        s5 = peg$parseSecurityOptions();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (input.charCodeAt(peg$currPos) === 123) {
          s5 = peg$c70;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e180); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseImportsList();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s9 = peg$c71;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e181); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.substr(peg$currPos, 4) === peg$c90) {
                s11 = peg$c90;
                peg$currPos += 4;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e233); }
              }
              if (s11 !== peg$FAILED) {
                s12 = peg$parse_();
                s13 = peg$parseImportPath();
                if (s13 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f380(s4, s7, s13);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImportPath() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c104) {
      s1 = peg$c104;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e253); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f381();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c105) {
        s1 = peg$c105;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e254); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f382();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parseModuleReference();
        if (s0 === peg$FAILED) {
          s0 = peg$parseQuotedPath();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBracketImportPath();
            if (s0 === peg$FAILED) {
              s0 = peg$parsePathExpression();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBracketImportPath() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseImportPathParts();
      if (input.charCodeAt(peg$currPos) === 93) {
        s3 = peg$c63;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e128); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f383(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuotedPath() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r50.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e241); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r50.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e241); }
        }
      }
      s2 = input.substring(s2, peg$currPos);
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c8;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f384(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModuleReference() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseModuleIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f385(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModuleIdentifier() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseModuleIdentifierPart();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c17;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseModulePathAndName();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 64) {
            s5 = peg$c32;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e86); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseShortHash();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4;
              s4 = peg$f386(s1, s3, s6);
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f387(s1, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModulePathAndName() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseModuleIdentifierPart();
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s4 = peg$c17;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s2;
        s2 = peg$f388(s3);
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseModuleIdentifierPart();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s4 = peg$c17;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e51); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f388(s3);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    s2 = peg$parseModuleIdentifierPart();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f389(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseModuleIdentifierPart() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r10.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r19.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r19.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f390(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e255); }
    }

    return s0;
  }

  function peg$parseShortHash() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r52.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e256); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r52.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e256); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f391(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f392(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImportsList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c106;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e257); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f393();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseImportItem();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseImportItem();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f394(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseCommaSpace();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseImportItem();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s3 = peg$f394(s1, s5);
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f395(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        peg$savedPos = s0;
        s1 = peg$f396();
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseImportItem() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c107) {
        s3 = peg$c107;
        peg$currPos += 4;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e258); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseBaseIdentifier();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f397(s1, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f398(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseImportPathParts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseImportPathVariable();
    if (s2 === peg$FAILED) {
      s2 = peg$parsePathTextSegment();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePathSeparator();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseImportPathVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePathTextSegment();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePathSeparator();
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f399(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseImportPathVariable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f400(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseSpecialVariable();
    }

    return s0;
  }

  function peg$parseAtOutput() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c108) {
        s2 = peg$c108;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e259); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseOutputSource();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseWrappedPathContent();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f401(s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDirectiveContext();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c108) {
          s2 = peg$c108;
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e259); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseWrappedPathContent();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f402(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseOutputSource() {
    var s0;

    s0 = peg$parseOutputVariable();
    if (s0 === peg$FAILED) {
      s0 = peg$parseOutputCommand();
      if (s0 === peg$FAILED) {
        s0 = peg$parseOutputLiteral();
      }
    }

    return s0;
  }

  function peg$parseOutputVariable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        s4 = peg$parseOutputArguments();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f403(s2, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOutputCommand() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 64) {
        s3 = peg$c32;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseOutputCommandReference();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f404(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOutputLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f405(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOutputCommandReference() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseAnyFieldAccess();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseAnyFieldAccess();
      }
      s3 = peg$parse_();
      s4 = peg$parseOutputArguments();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f406(s1, s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOutputArguments() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseOutputArgumentList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c60;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f407(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOutputArgumentList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseOutputArgument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseOutputArgument();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f408(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseOutputArgument();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f408(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f409(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOutputArgument() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f410(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f411(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r53.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e260); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = input.charAt(peg$currPos);
            if (peg$r53.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e260); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f412(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseAtPath() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c23) {
        s2 = peg$c23;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$currPos;
        s5 = peg$parseSecurityOptions();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseBaseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s7 = peg$c94;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e238); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 34) {
              s9 = peg$c8;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e22); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$currPos;
              s11 = [];
              s12 = input.charAt(peg$currPos);
              if (peg$r50.test(s12)) {
                peg$currPos++;
              } else {
                s12 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e241); }
              }
              while (s12 !== peg$FAILED) {
                s11.push(s12);
                s12 = input.charAt(peg$currPos);
                if (peg$r50.test(s12)) {
                  peg$currPos++;
                } else {
                  s12 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e241); }
                }
              }
              s10 = input.substring(s10, peg$currPos);
              if (input.charCodeAt(peg$currPos) === 34) {
                s11 = peg$c8;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f413(s4, s5, s10);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDirectiveContext();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c23) {
          s2 = peg$c23;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e69); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$currPos;
          s5 = peg$parseSecurityOptions();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseBaseIdentifier();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s7 = peg$c94;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e238); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 91) {
                s9 = peg$c62;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e127); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parsePathAssignmentParts();
                if (input.charCodeAt(peg$currPos) === 93) {
                  s11 = peg$c63;
                  peg$currPos++;
                } else {
                  s11 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e128); }
                }
                if (s11 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f414(s4, s5, s10);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDirectiveContext();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c23) {
            s2 = peg$c23;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e69); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parseBaseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s6 = peg$c94;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e238); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                s8 = peg$parsePathExpression();
                if (s8 !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = peg$parse_();
                  s11 = peg$parseSecurityOptions();
                  if (s11 !== peg$FAILED) {
                    peg$savedPos = s9;
                    s9 = peg$f415(s4, s8, s11);
                  } else {
                    peg$currPos = s9;
                    s9 = peg$FAILED;
                  }
                  if (s9 === peg$FAILED) {
                    s9 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f416(s4, s8, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsePathAssignmentParts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsePathAssignmentVariable();
    if (s2 === peg$FAILED) {
      s2 = peg$parsePathTextSegment();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePathSeparator();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsePathAssignmentVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePathTextSegment();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePathSeparator();
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f417(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsePathAssignmentVariable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f418(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseSpecialVariable();
    }

    return s0;
  }

  function peg$parseSpecialPathIdentifier() {
    var s0, s1;

    if (input.substr(peg$currPos, 11) === peg$c109) {
      s0 = peg$c109;
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e261); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c12;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f419();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseAtRun() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c21) {
        s2 = peg$c21;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$currPos;
        s5 = peg$parseSecurityOptions();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseRunCodeLanguage();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseRunCodeArguments();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parse_();
          s9 = peg$parseUnifiedCodeBrackets();
          if (s9 !== peg$FAILED) {
            s10 = peg$parseWithClause();
            if (s10 === peg$FAILED) {
              s10 = null;
            }
            s11 = peg$parseInlineComment();
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f420(s4, s5, s7, s9, s10, s11);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDirectiveContext();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c21) {
          s2 = peg$c21;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$currPos;
          s5 = peg$parseSecurityOptions();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parseUnifiedCommandBrackets();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseWithClause();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseInlineComment();
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f421(s4, s5, s6, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDirectiveContext();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c21) {
            s2 = peg$c21;
            peg$currPos += 4;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e67); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$currPos;
            s5 = peg$parseSecurityOptions();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (input.charCodeAt(peg$currPos) === 64) {
              s5 = peg$c32;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e86); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseRunCommandReference();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseWithClause();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                s8 = peg$parseInlineComment();
                if (s8 === peg$FAILED) {
                  s8 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f422(s4, s6, s7, s8);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseRunDirectiveRef() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRunCodeLanguage();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRunCodeArguments();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseUnifiedCodeBrackets();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f423(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUnifiedCommandBrackets();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f424(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseRunCommandReference() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseAnyFieldAccess();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseAnyFieldAccess();
      }
      s3 = peg$parse_();
      s4 = peg$parseRunCommandArguments();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f425(s1, s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRunCommandArguments() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c59;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e119); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseRunCommandArgumentList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c60;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e120); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f426(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRunCommandArgumentList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseRunCommandArgument();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseRunCommandArgument();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f427(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseRunCommandArgument();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f427(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f428(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRunCommandArgument() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseStringLiteral();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f429(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f430(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r53.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e260); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = input.charAt(peg$currPos);
            if (peg$r53.test(s3)) {
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e260); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f431(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseAtText() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c20) {
        s2 = peg$c20;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$currPos;
        s5 = peg$parseSecurityOptions();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parseBaseIdentifier();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s7 = peg$c94;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e238); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseStringLiteral();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f432(s4, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDirectiveContext();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c20) {
          s2 = peg$c20;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          s4 = peg$parseBaseIdentifier();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 61) {
              s6 = peg$c94;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e238); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              s8 = peg$parseWrappedTemplateContent();
              if (s8 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s9 = peg$f433(s4, s8);
                if (s9) {
                  s9 = undefined;
                } else {
                  s9 = peg$FAILED;
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseAsNewTitle();
                  if (s10 === peg$FAILED) {
                    s10 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f434(s4, s8, s10);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDirectiveContext();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c20) {
            s2 = peg$c20;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e66); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            s4 = peg$parseBaseIdentifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 61) {
                s6 = peg$c94;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e238); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 91) {
                  s8 = peg$c62;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e127); }
                }
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseTextPathParts();
                  s10 = peg$parse_();
                  s11 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s12 = peg$c18;
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e54); }
                  }
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parse_();
                    s14 = peg$parseSectionName();
                    if (s14 !== peg$FAILED) {
                      peg$savedPos = s11;
                      s11 = peg$f435(s4, s9, s14);
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                  if (s11 === peg$FAILED) {
                    s11 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s12 = peg$c63;
                    peg$currPos++;
                  } else {
                    s12 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e128); }
                  }
                  if (s12 !== peg$FAILED) {
                    s13 = peg$parseAsNewTitle();
                    if (s13 === peg$FAILED) {
                      s13 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f436(s4, s9, s11, s13);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseDirectiveContext();
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c20) {
              s2 = peg$c20;
              peg$currPos += 5;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e66); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              s4 = peg$parseBaseIdentifier();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 61) {
                  s6 = peg$c94;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e238); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  s8 = peg$parseSectionExtractionCore();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f437(s4, s8);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDirectiveContext();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c20) {
                s2 = peg$c20;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e66); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                s4 = peg$parseBaseIdentifier();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 40) {
                    s6 = peg$c59;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e119); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    s8 = peg$parseTextParameterList();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    s9 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s10 = peg$c60;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e120); }
                    }
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s12 = peg$c94;
                        peg$currPos++;
                      } else {
                        s12 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e238); }
                      }
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parse_();
                        if (input.substr(peg$currPos, 4) === peg$c22) {
                          s14 = peg$c22;
                          peg$currPos += 4;
                        } else {
                          s14 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e68); }
                        }
                        if (s14 !== peg$FAILED) {
                          s15 = peg$parse_();
                          s16 = peg$parseTemplateCore();
                          if (s16 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f438(s4, s8, s16);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseDirectiveContext();
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c20) {
                  s2 = peg$c20;
                  peg$currPos += 5;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e66); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  s4 = peg$parseBaseIdentifier();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s6 = peg$c94;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e238); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      s8 = peg$parseTemplateCore();
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f439(s4, s8);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseDirectiveContext();
                if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c20) {
                    s2 = peg$c20;
                    peg$currPos += 5;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e66); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    s4 = peg$parseBaseIdentifier();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s6 = peg$c94;
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e238); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parse_();
                        if (input.substr(peg$currPos, 4) === peg$c22) {
                          s8 = peg$c22;
                          peg$currPos += 4;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e68); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          s10 = peg$parseWrappedPathContent();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = peg$currPos;
                            s11 = peg$f440(s4, s10);
                            if (s11) {
                              s11 = undefined;
                            } else {
                              s11 = peg$FAILED;
                            }
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parseAsNewTitle();
                              if (s12 === peg$FAILED) {
                                s12 = null;
                              }
                              peg$savedPos = s0;
                              s0 = peg$f441(s4, s10, s12);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseDirectiveContext();
                  if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c20) {
                      s2 = peg$c20;
                      peg$currPos += 5;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e66); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parse_();
                      s4 = peg$parseBaseIdentifier();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s6 = peg$c94;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e238); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parse_();
                          if (input.substr(peg$currPos, 4) === peg$c22) {
                            s8 = peg$c22;
                            peg$currPos += 4;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e68); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parse_();
                            s10 = peg$parseSectionExtractionCore();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f442(s4, s10);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseDirectiveContext();
                    if (s1 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c20) {
                        s2 = peg$c20;
                        peg$currPos += 5;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e66); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        s4 = peg$parseBaseIdentifier();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 61) {
                            s6 = peg$c94;
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e238); }
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = peg$parse_();
                            if (input.substr(peg$currPos, 4) === peg$c22) {
                              s8 = peg$c22;
                              peg$currPos += 4;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e68); }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parse_();
                              s10 = peg$parsePathExpression();
                              if (s10 !== peg$FAILED) {
                                s11 = peg$currPos;
                                s12 = peg$parse_();
                                s13 = peg$parseSecurityOptions();
                                if (s13 !== peg$FAILED) {
                                  peg$savedPos = s11;
                                  s11 = peg$f443(s4, s10, s13);
                                } else {
                                  peg$currPos = s11;
                                  s11 = peg$FAILED;
                                }
                                if (s11 === peg$FAILED) {
                                  s11 = null;
                                }
                                peg$savedPos = s0;
                                s0 = peg$f444(s4, s10, s11);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseDirectiveContext();
                      if (s1 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c20) {
                          s2 = peg$c20;
                          peg$currPos += 5;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e66); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parse_();
                          s4 = peg$parseBaseIdentifier();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 61) {
                              s6 = peg$c94;
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e238); }
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parse_();
                              s8 = peg$parsePathStartingWithVariableContext();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parsePathExpression();
                                if (s9 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f445(s4, s9);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseDirectiveContext();
                        if (s1 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c20) {
                            s2 = peg$c20;
                            peg$currPos += 5;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e66); }
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parse_();
                            s4 = peg$parseBaseIdentifier();
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parse_();
                              if (input.charCodeAt(peg$currPos) === 61) {
                                s6 = peg$c94;
                                peg$currPos++;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e238); }
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 64) {
                                  s8 = peg$c32;
                                  peg$currPos++;
                                } else {
                                  s8 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e86); }
                                }
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$currPos;
                                  peg$silentFails++;
                                  s10 = peg$currPos;
                                  if (input.substr(peg$currPos, 3) === peg$c33) {
                                    s11 = peg$c33;
                                    peg$currPos += 3;
                                  } else {
                                    s11 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e88); }
                                  }
                                  if (s11 !== peg$FAILED) {
                                    s12 = peg$parse_();
                                    s11 = [s11, s12];
                                    s10 = s11;
                                  } else {
                                    peg$currPos = s10;
                                    s10 = peg$FAILED;
                                  }
                                  if (s10 === peg$FAILED) {
                                    s10 = peg$currPos;
                                    if (input.substr(peg$currPos, 3) === peg$c110) {
                                      s11 = peg$c110;
                                      peg$currPos += 3;
                                    } else {
                                      s11 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e262); }
                                    }
                                    if (s11 !== peg$FAILED) {
                                      s12 = peg$parse_();
                                      s11 = [s11, s12];
                                      s10 = s11;
                                    } else {
                                      peg$currPos = s10;
                                      s10 = peg$FAILED;
                                    }
                                  }
                                  peg$silentFails--;
                                  if (s10 === peg$FAILED) {
                                    s9 = undefined;
                                  } else {
                                    peg$currPos = s9;
                                    s9 = peg$FAILED;
                                  }
                                  if (s9 !== peg$FAILED) {
                                    s10 = peg$parseCommandReference();
                                    if (s10 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f446(s4, s10);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseDirectiveContext();
                          if (s1 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 5) === peg$c20) {
                              s2 = peg$c20;
                              peg$currPos += 5;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e66); }
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parse_();
                              s4 = peg$parseBaseIdentifier();
                              if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (input.charCodeAt(peg$currPos) === 61) {
                                  s6 = peg$c94;
                                  peg$currPos++;
                                } else {
                                  s6 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e238); }
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parse_();
                                  if (input.substr(peg$currPos, 4) === peg$c21) {
                                    s8 = peg$c21;
                                    peg$currPos += 4;
                                  } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e67); }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parse_();
                                    s10 = peg$parseRunCodeLanguage();
                                    if (s10 !== peg$FAILED) {
                                      s11 = peg$parse_();
                                      if (input.charCodeAt(peg$currPos) === 91) {
                                        s12 = peg$c62;
                                        peg$currPos++;
                                      } else {
                                        s12 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e127); }
                                      }
                                      if (s12 !== peg$FAILED) {
                                        s13 = peg$currPos;
                                        s14 = peg$parseCodeLiteralContent();
                                        s13 = input.substring(s13, peg$currPos);
                                        if (input.charCodeAt(peg$currPos) === 93) {
                                          s14 = peg$c63;
                                          peg$currPos++;
                                        } else {
                                          s14 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e128); }
                                        }
                                        if (s14 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f447(s4, s10, s13);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseDirectiveContext();
                            if (s1 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 5) === peg$c20) {
                                s2 = peg$c20;
                                peg$currPos += 5;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e66); }
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parse_();
                                s4 = peg$parseBaseIdentifier();
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parse_();
                                  if (input.charCodeAt(peg$currPos) === 61) {
                                    s6 = peg$c94;
                                    peg$currPos++;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e238); }
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (input.substr(peg$currPos, 4) === peg$c21) {
                                      s8 = peg$c21;
                                      peg$currPos += 4;
                                    } else {
                                      s8 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e67); }
                                    }
                                    if (s8 !== peg$FAILED) {
                                      s9 = peg$parse_();
                                      s10 = peg$parseCommandCore();
                                      if (s10 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f448(s4, s10);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseDirectiveContext();
                              if (s1 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 5) === peg$c20) {
                                  s2 = peg$c20;
                                  peg$currPos += 5;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e66); }
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parse_();
                                  s4 = peg$parseBaseIdentifier();
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parse_();
                                    if (input.charCodeAt(peg$currPos) === 61) {
                                      s6 = peg$c94;
                                      peg$currPos++;
                                    } else {
                                      s6 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$e238); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                      s7 = peg$parse_();
                                      if (input.substr(peg$currPos, 4) === peg$c21) {
                                        s8 = peg$c21;
                                        peg$currPos += 4;
                                      } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e67); }
                                      }
                                      if (s8 !== peg$FAILED) {
                                        s9 = peg$parse_();
                                        if (input.charCodeAt(peg$currPos) === 64) {
                                          s10 = peg$c32;
                                          peg$currPos++;
                                        } else {
                                          s10 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$e86); }
                                        }
                                        if (s10 !== peg$FAILED) {
                                          s11 = peg$parseCommandReference();
                                          if (s11 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s0 = peg$f449(s4, s11);
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseDirectiveContext();
                                if (s1 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 5) === peg$c20) {
                                    s2 = peg$c20;
                                    peg$currPos += 5;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e66); }
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parse_();
                                    s4 = peg$parseBaseIdentifier();
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parse_();
                                      if (input.charCodeAt(peg$currPos) === 61) {
                                        s6 = peg$c94;
                                        peg$currPos++;
                                      } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$e238); }
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s7 = peg$parse_();
                                        s8 = peg$parsePathExpression();
                                        if (s8 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s0 = peg$f450(s4, s8);
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTextParameterList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTextParameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseCommaSpace();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseTextParameter();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f451(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseCommaSpace();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseTextParameter();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f451(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f452(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTextParameter() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBaseIdentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f453(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTextPathParts() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTextPathVariable();
    if (s2 === peg$FAILED) {
      s2 = peg$parsePathTextSegment();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePathSeparator();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseTextPathVariable();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePathTextSegment();
        if (s2 === peg$FAILED) {
          s2 = peg$parsePathSeparator();
        }
      }
    }
    peg$savedPos = s0;
    s1 = peg$f454(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseTextPathVariable() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseAnyFieldAccess();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseAnyFieldAccess();
        }
        peg$savedPos = s0;
        s0 = peg$f455(s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseSpecialVariable();
    }

    return s0;
  }

  function peg$parseAtWhen() {
    var s0;

    s0 = peg$parseWhenSimpleForm();
    if (s0 === peg$FAILED) {
      s0 = peg$parseWhenBlockForm();
    }

    return s0;
  }

  function peg$parseWhenSimpleForm() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c26) {
        s2 = peg$c26;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseWhenConditionExpression();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (input.substr(peg$currPos, 2) === peg$c111) {
            s6 = peg$c111;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e263); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parseWhenAction();
            if (s8 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f456(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhenBlockForm() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;

    s0 = peg$currPos;
    s1 = peg$parseDirectiveContext();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c26) {
        s2 = peg$c26;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e72); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
          s5 = peg$c32;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e86); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseBaseIdentifier();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f457(s6);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        s6 = peg$parseWhenModifier();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s8 = peg$c39;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e95); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 91) {
            s10 = peg$c62;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e127); }
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$parseWhenConditionList();
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 93) {
                s14 = peg$c63;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e128); }
              }
              if (s14 !== peg$FAILED) {
                s15 = peg$parse_();
                s16 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c111) {
                  s17 = peg$c111;
                  peg$currPos += 2;
                } else {
                  s17 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e263); }
                }
                if (s17 !== peg$FAILED) {
                  s18 = peg$parse_();
                  s19 = peg$parseWhenAction();
                  if (s19 !== peg$FAILED) {
                    peg$savedPos = s16;
                    s16 = peg$f458(s4, s6, s12, s19);
                  } else {
                    peg$currPos = s16;
                    s16 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s16;
                  s16 = peg$FAILED;
                }
                if (s16 === peg$FAILED) {
                  s16 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f459(s4, s6, s12, s16);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhenModifier() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c112) {
      s0 = peg$c112;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e264); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c113) {
        s0 = peg$c113;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e265); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c114) {
          s0 = peg$c114;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e266); }
        }
      }
    }

    return s0;
  }

  function peg$parseWhenConditionExpression() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCommandReference();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f460(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f461();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseWhenConditionList() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseWhenConditionPair();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseWhenConditionPair();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s3;
        s3 = peg$f462(s1, s5);
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseWhenConditionPair();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f462(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f463(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhenConditionPair() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseWhenConditionExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c111) {
        s4 = peg$c111;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e263); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseWhenAction();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f464(s1, s6);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f465(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhenAction() {
    var s0;

    s0 = peg$parseWhenActionBlock();
    if (s0 === peg$FAILED) {
      s0 = peg$parseWhenActionDirective();
    }

    return s0;
  }

  function peg$parseWhenActionBlock() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c62;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e127); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseWhenActionDirective();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        s7 = peg$parseWhenActionDirective();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s5;
          s5 = peg$f466(s3, s7);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$parseWhenActionDirective();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f466(s3, s7);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c63;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e128); }
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f467(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWhenActionDirective() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseStringLiteral();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f468(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c20) {
        s1 = peg$c20;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e66); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseBaseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c94;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e238); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseStringLiteral();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f469(s3, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c21) {
          s1 = peg$c21;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e67); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 91) {
            s3 = peg$c62;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e127); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWhenCommandText();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c63;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e128); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f470(s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c108) {
            s1 = peg$c108;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e259); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseWhenOutputSource();
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 91) {
              s5 = peg$c62;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e127); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWhenPathText();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s7 = peg$c63;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e128); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f471(s3, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseWhenCommandText() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r26.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r26.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e154); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f472(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWhenPathText() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r26.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e154); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r26.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e154); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f473(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWhenOutputSource() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseBaseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f474(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseStringLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f475(s1);
      }
      s0 = s1;
    }

    return s0;
  }


  // NodeType, DirectiveKind, and helpers are injected via parser-dependencies
  
  // Initialize options for context tracking
  if (typeof options !== 'undefined') {
    options.rhsDirectiveType = '';
    options.afterDirectiveType = '';
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  StartRules: ["Start"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};

// Add exports for CommonJS compatibility
module.exports = {
  parse: peg$parse,
  SyntaxError: peg$SyntaxError,
  StartRules: peg$allowedStartRules
};
