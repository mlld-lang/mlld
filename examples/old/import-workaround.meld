# Import Path Resolution Workaround Example

@text info = "This file demonstrates a workaround for import path resolution issues"

## The Problem

Meld currently has issues with import path resolution. The following import syntaxes are not working:

```
@import [$~/dev/meld/examples/example-import.meld]
@import [$./examples/example-import.meld]
@import [example-import.meld]
```

## The Workaround

The workaround is to define a path variable with the correct path using special variables and then
use that variable in the import statement.

@path example_import = "$PROJECTPATH/examples/example-import.meld"

@import [$example_import]

## Verification

If the import worked correctly, you should see these variables defined:
- {{imported_title}} (text variable from example-import.meld)
- {{role.architect}} (data variable from example-import.meld)
- {{task.code_review}} (data variable from example-import.meld)

And you should be able to run this command:
@run [$echo("Import successful!")]

## Explanation

This workaround works because:
1. Path variables require the use of special path prefixes ($PROJECTPATH, $HOMEPATH, etc.)
2. The system properly resolves these special path variables when used in a path variable definition
3. When the resolved path variable is used in an import statement, the file path is fully resolved and absolute

## Alternative Syntaxes

Other path variable syntaxes that might work:

@path alt_example_import = "$./examples/example-import.meld"
@path home_example_import = "$~/dev/meld/examples/example-import.meld"

You could try these by uncommenting and using:
<!-- @import [$alt_example_import] -->
<!-- @import [$home_example_import] --> 