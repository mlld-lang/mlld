# Core configuration
project:
  name: "Meld Type System Redesign"
  directives:
    - name: "embed"
      description: "Directive for embedding content"
    - name: "run"
      description: "Directive for running commands"
    - name: "define"
      description: "Directive for defining variables"

# Common context for all prompts
common:
  documents:
    - path: "docs/dev/DI-ARCHITECTURE.md"
      alias: "architecture"
    - path: "docs/dev/PIPELINE.md"
      alias: "pipeline"
  system_prompt: "You lead the dev team responsible for meld's {{serviceName}}. You are extremely knowledgeable about strong typing, type safety, and architecture. Your goal is to provide clear feedback about type requirements from your service's perspective."

# Service-specific context
services:
  - name: "ParserService"
    description: "Responsible for parsing source files into AST nodes"
    context: "Your service is the entry point for the pipeline, transforming raw text into structured AST nodes."
    documents:
      - path: "services/pipeline/ParserService/README.md"
      - path: "services/pipeline/ParserService/docs/types.md"
    code:
      - path: "services/pipeline/ParserService/index.ts"
      - path: "services/pipeline/ParserService/MeldParserService.ts"
      - path: "services/pipeline/ParserService/ParserClient.ts"
  
  - name: "DirectiveService"
    description: "Handles the registration and routing of directive handlers"
    context: "Your service maintains the registry of directive handlers and routes directives to appropriate handlers."
    documents:
      - path: "services/pipeline/DirectiveService/README.md"
    code:
      - path: "services/pipeline/DirectiveService/index.ts"
      - path: "services/pipeline/DirectiveService/DirectiveHandlerRegistry.ts"
      - path: "services/pipeline/DirectiveService/handlers/embed/*.ts"
  
  - name: "InterpreterService"
    description: "Processes directives and transforms AST"
    context: "Your service is responsible for interpreting directives and transforming the AST during processing."
    documents:
      - path: "services/pipeline/InterpreterService/README.md"
    code:
      - path: "services/pipeline/InterpreterService/index.ts"
      - path: "services/pipeline/InterpreterService/transformation/*.ts"
  
  - name: "StateService"
    description: "Manages state across the interpretation process"
    context: "Your service maintains state throughout the pipeline, handling variable scopes and inheritance."
    documents:
      - path: "services/state/StateService/README.md"
    code:
      - path: "services/state/StateService/index.ts"
      - path: "services/state/StateService/StateClient.ts"
  
  - name: "ResolutionService"
    description: "Resolves variables and references in content"
    context: "Your service handles variable resolution, path expansion, and reference resolution."
    documents:
      - path: "services/resolution/ResolutionService/README.md"
    code:
      - path: "services/resolution/ResolutionService/index.ts"
      - path: "services/resolution/ResolutionService/VariableResolver.ts"
  
  - name: "ValidationService"
    description: "Validates directive syntax and constraints"
    context: "Your service ensures directives meet syntax requirements and business rules."
    documents:
      - path: "services/resolution/ValidationService/README.md"
    code:
      - path: "services/resolution/ValidationService/index.ts"
      - path: "services/resolution/ValidationService/validators/*.ts"
  
  - name: "OutputService"
    description: "Generates final output from processed AST"
    context: "Your service generates the final output format (markdown, XML, etc.) from processed AST."
    documents:
      - path: "services/pipeline/OutputService/README.md"
    code:
      - path: "services/pipeline/OutputService/index.ts"
      - path: "services/pipeline/OutputService/formatters/*.ts"

# Prompts for service dev teams
service_prompts:
  round1:
    prompt: |
      We're redesigning our type system for {{directiveName}} directives to be more strict and maintainable.
      
      Please review the following architectural documents:
      {{commonDocs}}
      
      Based on your service's responsibilities and the existing code:
      
      1. What core fields must exist in a {{directiveName}} directive type?
      2. What metadata would your service need to process {{directiveName}} directives?
      3. What type discriminators or patterns would make processing more robust?
      4. How would you structure subtypes for different {{directiveName}} variants?
      
      Include specific examples from your code where the current approach causes problems.
      Write a detailed memo with your proposed type design, focusing on what your service needs.
    output_format: "markdown"
    output_filename: "_dev/cleanup/{{directiveName}}/round-1/{{serviceName}}-type-feedback.md"
  
  round2:
    prompt: |
      Thank you for your initial feedback on the {{directiveName}} directive type system.
      
      Based on feedback from all service teams, our architect has created this draft specification:
      {{draftSpec}}
      
      Please provide detailed feedback on this specification:
      
      1. Does it address the core needs you identified?
      2. Are there missing fields your service would require?
      3. Would this design create implementation challenges?
      4. Are there optimizations or improvements you'd suggest?
      
      Be specific about how your service would use these types and any concerns about the design.
    output_format: "markdown"
    output_filename: "_dev/cleanup/{{directiveName}}/round-2/{{serviceName}}-type-feedback.md"

# Prompts for the architect
architect_prompts:
  create_draft:
    prompt: |
      You are the lead architect tasked with designing a new type system for {{directiveName}} directives in Meld.
      
      Review the following feedback from all service teams:
      {{servicesFeedback}}
      
      Create a comprehensive type specification that:
      1. Addresses the needs of all services
      2. Uses TypeScript's type system effectively
      3. Maintains clean separation of concerns
      4. Supports the pipeline flow described in the architecture
      
      Your specification should include:
      - Base types and interfaces
      - Subtype discriminators
      - Service-specific metadata interfaces
      - Utility types and factory patterns
      
      Format your response as a TypeScript interface definition file with comprehensive comments.
    output_format: "markdown"
    output_filename: "_dev/cleanup/{{directiveName}}/draft-1/{{directiveName}}-types-spec.md"
  
  refine_draft:
    prompt: |
      You are the lead architect refining the type system for {{directiveName}} directives in Meld.
      
      Review the second round of feedback from all service teams:
      {{servicesFeedback}}
      
      Your original draft specification:
      {{draftSpec}}
      
      Create an updated type specification that:
      1. Addresses concerns raised in the feedback
      2. Makes appropriate tradeoffs between competing requirements
      3. Maintains architectural integrity
      4. Clarifies implementation guidance
      
      Explain key architectural decisions and tradeoffs you made.
      
      Format your response as a TypeScript interface definition file with comprehensive comments.
    output_format: "markdown"
    output_filename: "_dev/cleanup/{{directiveName}}/draft-2/{{directiveName}}-types-spec.md"
  
  cross_directive_analysis:
    prompt: |
      You are the lead architect analyzing commonalities across different directive types in Meld.
      
      Review the final type specifications for these directives:
      {{allDirectiveSpecs}}
      
      Create a unified type system that:
      1. Identifies common patterns across all directive types
      2. Defines a shared base directive interface
      3. Maintains directive-specific specialization
      4. Supports all service requirements
      
      Explain how your unified design accommodates the unique needs of each directive type
      while maximizing code reuse and maintaining architectural integrity.
      
      Format your response as a TypeScript interface definition file with comprehensive comments.
    output_format: "markdown"
    output_filename: "_dev/cleanup/unified/unified-directive-types-spec.md"

# Execution plan
execution:
  rounds_per_directive: 2
  output_directory: "_dev/cleanup"
  log_level: "info"
  parallel_processing: true
  timeout_per_request: 120  # seconds