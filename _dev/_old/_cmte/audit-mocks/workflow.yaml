name: meld-audit-mocks
description: "Analyzes test mock usage across the codebase and proposes a consistent strategy aligned with DI."
outputPath: output # Relative to workflow.yaml

files:
  # Core Test Utilities
  coreTestUtils:
    - ../../tests/utils/di/TestContextDI.ts
    # - ../../tests/utils/di/TestContainerHelper.ts # Optional, maybe too low-level?
    # - ../../tests/mocks/setup.ts # Include if it defines relevant base mocks/helpers

  # Core Service Interfaces (Select key ones)
  coreServiceInterfaces:
    - ../../services/state/StateService/IStateService.ts
    - ../../services/resolution/ResolutionService/IResolutionService.ts
    - ../../services/fs/FileSystemService/IFileSystemService.ts
    - ../../services/fs/PathService/IPathService.ts
    - ../../services/pipeline/DirectiveService/IDirectiveService.ts
    - ../../services/pipeline/InterpreterService/IInterpreterService.ts
    - ../../services/pipeline/ParserService/IParserService.ts
    # Add other relevant interfaces

  # Architecture Docs
  architectureDocs:
    - ../../docs/dev/DI-ARCHITECTURE.md
    # - ../../docs/dev/PIPELINE.md # Optional, maybe less relevant for mocks

  # Manually Selected Test Suites/Files
  directiveServiceTestSuite:
    - ../../services/pipeline/DirectiveService/DirectiveService.test.ts
    # Add relevant handler tests if desired
    # - ../../services/pipeline/DirectiveService/handlers/definition/DataDirectiveHandler.test.ts

  resolutionServiceTestSuite:
    - ../../services/resolution/ResolutionService/ResolutionService.test.ts
    # Add relevant resolver tests if desired
    # - ../../services/resolution/ResolutionService/resolvers/VariableReferenceResolver.test.ts

  pathServiceTestSuite:
    - ../../services/fs/PathService/PathService.test.ts

  interpreterServiceTestSuite:
     - ../../services/pipeline/InterpreterService/InterpreterService.unit.test.ts
     # Add integration tests if they exist

  # Add collections for other key test suites as needed

global_variables:
  overallArchitecture: "{{ files.architectureDocs }}"
  coreUtils: "{{ files.coreTestUtils }}"
  coreInterfaces: "{{ files.coreServiceInterfaces }}"
  overallGoal: "Analyze test mock usage and propose a consistent strategy aligned with DI"

iterable_objects:
  testSuites:
    - name: DirectiveServiceTests
      description: "Analyze mocks in DirectiveService unit tests"
      testFiles: "{{ files.directiveServiceTestSuite }}"
    - name: ResolutionServiceTests
      description: "Analyze mocks in ResolutionService unit tests"
      testFiles: "{{ files.resolutionServiceTestSuite }}"
    - name: PathServiceTests
      description: "Analyze mocks in PathService unit tests"
      testFiles: "{{ files.pathServiceTestSuite }}"
    - name: InterpreterServiceTests
      description: "Analyze mocks in InterpreterService unit tests"
      testFiles: "{{ files.interpreterServiceTestSuite }}"
    # Add entries for other key test suites using their file collection names

sets:
  - useSet: gather-mock-usage
  - useSet: synthesize-mock-findings
  - useSet: propose-mock-strategy 