{
  "name": "Mlld",
  "scopeName": "source.mlld",
  "fileTypes": [
    "mlld",
    "mld"
  ],
  "patterns": [
    {
      "name": "comment.line.mlld",
      "match": "^\\s*(>>|<<).*$"
    },
    {
      "name": "meta.embedded.mlld",
      "begin": "^(?=/(var|show|run|exe|path|import|when|output)\\b)",
      "end": "$",
      "patterns": [
        {
          "name": "keyword.control.directive.mlld",
          "match": "\\G/(var|show|run|exe|path|import|when|output)\\b"
        },
        {
          "name": "comment.line.double-slash.mlld",
          "match": "(>>|<<).*$"
        },
        {
          "name": "keyword.control.when.mlld",
          "match": "when\\s*:"
        },
        {
          "name": "keyword.operator.logical.mlld",
          "match": "&&|\\|\\||!(?=@|\\s|\\()"
        },
        {
          "name": "keyword.operator.comparison.mlld",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arrow.mlld",
          "match": "=>"
        },
        {
          "name": "keyword.operator.ternary.mlld",
          "match": "[?:]"
        },
        {
          "name": "variable.language.reserved.mlld",
          "match": "@(INPUT|TIME|PROJECTPATH|DEBUG|input|time|projectpath|debug|Input|Time|ProjectPath|Debug|STDIN|stdin|Stdin|now|NOW|base)\\b"
        },
        {
          "name": "variable.language.reserved.mlld",
          "match": "@\\."
        },
        {
          "name": "keyword.other.language.mlld",
          "match": "\\b(javascript|js|node|nodejs|python|py|bash|sh)\\b"
        },
        {
          "name": "string.template.triple.mlld",
          "begin": ":::",
          "end": ":::",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template.triple.begin.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template.triple.end.mlld"
            }
          },
          "patterns": [
            {
              "name": "variable.template.mlld",
              "begin": "\\{\\{",
              "end": "\\}\\}",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.template.variable.begin.mlld"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.template.variable.end.mlld"
                }
              },
              "patterns": [
                {
                  "name": "variable.other.interpolation.mlld",
                  "match": "[^}]+"
                }
              ]
            }
          ]
        },
        {
          "name": "string.template.mlld",
          "begin": "::",
          "end": "::",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template.begin.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template.end.mlld"
            }
          },
          "patterns": [
            {
              "name": "variable.template.mlld",
              "begin": "\\{\\{",
              "end": "\\}\\}",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.template.variable.begin.mlld"
                }
              },
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.template.variable.end.mlld"
                }
              },
              "patterns": [
                {
                  "name": "variable.other.interpolation.mlld",
                  "match": "[^}]+"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.path.mlld",
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.path.begin.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.path.end.mlld"
            }
          },
          "patterns": [
            {
              "name": "markup.underline.link.mlld",
              "match": "https?://[^\\]]+"
            },
            {
              "name": "variable.language.reserved.mlld",
              "match": "@(INPUT|TIME|PROJECTPATH|DEBUG|input|time|projectpath|debug|Input|Time|ProjectPath|Debug|STDIN|stdin|Stdin|now|NOW|base)\\b"
            },
            {
              "name": "variable.other.mlld",
              "match": "@\\w+"
            }
          ]
        },
        {
          "name": "string.interpolated.alligator.mlld",
          "begin": "<",
          "end": ">",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.alligator.begin.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.alligator.end.mlld"
            }
          },
          "patterns": [
            {
              "name": "markup.underline.link.mlld",
              "match": "https?://[^>]+"
            },
            {
              "name": "variable.language.reserved.mlld",
              "match": "@(INPUT|TIME|PROJECTPATH|DEBUG|input|time|projectpath|debug|Input|Time|ProjectPath|Debug|STDIN|stdin|Stdin|now|NOW|base)\\b"
            },
            {
              "name": "variable.other.mlld",
              "match": "@\\w+"
            },
            {
              "name": "string.path.mlld",
              "match": "[^>]+"
            }
          ]
        },
        {
          "name": "meta.import.mlld",
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.import.begin.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.import.end.mlld"
            }
          },
          "patterns": [
            {
              "name": "variable.other.import.mlld",
              "match": "\\w+"
            },
            {
              "name": "punctuation.separator.comma.mlld",
              "match": ","
            },
            {
              "name": "keyword.operator.star.mlld",
              "match": "\\*"
            }
          ]
        },
        {
          "name": "string.template.backtick.mlld",
          "begin": "`",
          "end": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template.backtick.begin.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template.backtick.end.mlld"
            }
          },
          "patterns": [
            {
              "name": "variable.language.reserved.mlld",
              "match": "@(INPUT|TIME|PROJECTPATH|DEBUG|input|time|projectpath|debug|Input|Time|ProjectPath|Debug|STDIN|stdin|Stdin|now|NOW|base)\\b"
            },
            {
              "name": "variable.other.mlld",
              "match": "@\\w+"
            }
          ]
        },
        {
          "name": "meta.embedded.block.javascript.mlld",
          "begin": "\\b(js|javascript|node)\\s*\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.embedded.begin.mlld"
            },
            "1": {
              "name": "keyword.other.language.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.embedded.end.mlld"
            }
          },
          "contentName": "source.js.embedded.mlld",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        },
        {
          "name": "meta.embedded.block.python.mlld",
          "begin": "\\b(python|py)\\s*\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.embedded.begin.mlld"
            },
            "1": {
              "name": "keyword.other.language.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.embedded.end.mlld"
            }
          },
          "contentName": "source.python.embedded.mlld",
          "patterns": [
            {
              "include": "source.python"
            }
          ]
        },
        {
          "name": "meta.embedded.block.shell.mlld",
          "begin": "\\b(bash|sh)\\s*\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.embedded.begin.mlld"
            },
            "1": {
              "name": "keyword.other.language.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.embedded.end.mlld"
            }
          },
          "contentName": "source.shell.embedded.mlld",
          "patterns": [
            {
              "include": "source.shell"
            }
          ]
        },
        {
          "name": "meta.command.braces.mlld",
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.command.begin.mlld"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.command.end.mlld"
            }
          },
          "contentName": "string.unquoted.command.mlld",
          "patterns": [
            {
              "name": "keyword.other.language.mlld",
              "match": "\\b(javascript|js|node|nodejs|python|py|bash|sh)\\b"
            },
            {
              "name": "variable.language.reserved.mlld",
              "match": "@(INPUT|TIME|PROJECTPATH|DEBUG|input|time|projectpath|debug|Input|Time|ProjectPath|Debug|STDIN|stdin|Stdin|now|NOW|base)\\b"
            },
            {
              "name": "variable.other.mlld",
              "match": "@\\w+"
            }
          ]
        },
        {
          "name": "string.quoted.double.mlld",
          "match": "\"[^\"]*\""
        },
        {
          "name": "string.quoted.single.mlld",
          "match": "'[^']*'"
        },
        {
          "name": "keyword.operator.logical.mlld",
          "match": "!@"
        },
        {
          "name": "variable.other.member.mlld",
          "match": "\\.(\\w+|\\d+)"
        },
        {
          "name": "keyword.operator.mlld",
          "match": "\\b(from|as|foreach|with|to)\\b"
        },
        {
          "name": "keyword.operator.pipe.mlld",
          "match": "\\|"
        },
        {
          "name": "keyword.operator.assignment.mlld",
          "match": "="
        },
        {
          "name": "constant.numeric.mlld",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        {
          "name": "constant.language.boolean.mlld",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.mlld",
          "match": "\\bnull\\b"
        },
        {
          "name": "variable.other.mlld",
          "match": "@\\w+"
        }
      ]
    },
    {
      "include": "text.html.markdown"
    }
  ]
}