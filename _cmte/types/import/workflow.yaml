name: meld-typespec-import-design
description: "Generates type specification for internal file/import handling incorporating feedback from relevant services."
outputPath: output # Relative to workflow.yaml

files:
  # General Context
  architectureDocs:
    - ../../docs/dev/DI-ARCHITECTURE.md
    - ../../docs/dev/PIPELINE.md
  directiveClarityDoc: ../../_dev/IMPORT-CLARITY.md # Assumes this doc exists or will be created

  # Component-Specific Files (Focus on File/Path Handling)
  CoreDirectiveCode: # Still relevant for context
    - ../../services/pipeline/DirectiveService/DirectiveService.ts
    - ../../services/pipeline/DirectiveService/IDirectiveService.ts
    - ../../services/pipeline/DirectiveService/interfaces/DirectiveTypes.ts
  
  FileSystemCoreCode:
    - ../../services/fs/FileSystemService/FileSystemService.ts
    - ../../services/fs/FileSystemService/IFileSystemService.ts
    - ../../services/fs/FileSystemService/IFileSystem.ts
    - ../../services/fs/FileSystemService/NodeFileSystem.ts
  
  PathServiceCode:
    - ../../services/fs/PathService/PathService.ts
    - ../../services/fs/PathService/IPathService.ts
  
  ParserCoreCode: # Relevant for how paths/imports might be parsed
    - ../../services/pipeline/ParserService/ParserService.ts
    - ../../services/pipeline/ParserService/IParserService.ts
  
  InterpreterCoreCode: # Relevant for orchestration
    - ../../services/pipeline/InterpreterService/InterpreterService.ts
    - ../../services/pipeline/InterpreterService/IInterpreterService.ts
  
  ResolutionCoreCode: # Core resolution context
    - ../../services/pipeline/ResolutionService/ResolutionService.ts
    - ../../services/pipeline/ResolutionService/IResolutionService.ts
  
  PathResolutionCode: # Specific path resolution logic
    - ../../services/pipeline/ResolutionService/resolvers/PathResolver.ts
    - ../../services/pipeline/ResolutionService/resolvers/types.ts # Shared types might be needed
  
  ContentResolutionCode: # Relevant for text/content directives used with import
    - ../../services/pipeline/ResolutionService/resolvers/ContentResolver.ts
    - ../../services/pipeline/ResolutionService/resolvers/TextResolver.ts

global_variables:
  overallArchitecture: "{{ files.architectureDocs }}"
  directiveName: "import" # Conceptual name for this workflow focus
  directiveClarityContent: "{{ files.directiveClarityDoc }}"

iterable_objects:
  services:
    # Removed EmbedHandler, adjusted components for import/file focus
    CoreDirective:
      description: "Core directive handling context"
      codeContent: "{{ files.CoreDirectiveCode }}"
    
    FileSystemCore:
      description: "Core filesystem operations and interfaces"
      codeContent: "{{ files.FileSystemCoreCode }}"

    PathService:
      description: "Path validation and manipulation"
      codeContent: "{{ files.PathServiceCode }}"

    ParserCore:
      description: "Core parsing functionality (relevant to paths/imports)"
      codeContent: "{{ files.ParserCoreCode }}"
    
    InterpreterCore:
      description: "Core interpretation pipeline orchestration"
      codeContent: "{{ files.InterpreterCoreCode }}"
    
    ResolutionCore:
      description: "Core resolution service functionality"
      codeContent: "{{ files.ResolutionCoreCode }}"
    
    PathResolution:
      description: "Path resolution handling within ResolutionService"
      codeContent: "{{ files.PathResolutionCode }}"

    ContentResolution:
      description: "Content/Text resolution (relevant to @text, etc.)"
      codeContent: "{{ files.ContentResolutionCode }}"


sets:
  # Sequence with added grouping set:
  - useSet: gather-requirements
  - useSet: group-requirements     # NEW: Group synthesis step
  - useSet: synthesize-requirements # Now consolidates grouped outputs
  - useSet: draft-spec
  - useSet: collect-draft-feedback
  - useSet: refine-spec 