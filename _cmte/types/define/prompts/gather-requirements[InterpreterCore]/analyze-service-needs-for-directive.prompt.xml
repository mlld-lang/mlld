<SimplifyInterpretercoreCodeWithStrongerDefineTypes>
  <Context>
You are the lead developer for the **InterpreterCore** service.
The Meld language is improving its TypeScript type system for the  directive.
**CRITICAL NOTE:** The &apos;define&apos; directive in Meld **exclusively** embeds *text content* from files or *string values* from variables. It does **not** handle multimedia or web content. Base your analysis ONLY on this Meld-specific definition.
Review the following:
1. **Overall Architecture:**
    <DocsDevDiArchitectureMd>
```javascript
# Meld Architecture

## INTRODUCTION

Meld is a specialized, directive-based scripting language designed for embedding small "@directives" inside an otherwise plain text (e.g., Markdown-like) document. The code in this repository implements:

• Meld grammar rules and token types (e.g., text directives, path directives, data directives).  
• The parsing layer that converts Meld content into an AST (Abstract Syntax Tree).  
• A directive interpretation layer that processes these AST nodes and manipulates internal "states" to store variables and more.  
• A resolution layer to handle variable references, path expansions, data manipulations, etc.  
• Testing utilities and an in-memory FS (memfs) to simulate filesystems for thorough testing.  

The main idea:  
1. Meld code is parsed to an AST.  
2. Each directive node is validated and interpreted, updating a shared "state" (variables, data structures, commands, etc.).  
3. Optional transformations (e.g., output formatting) generate final representations (Markdown, LLM-friendly XML, etc.).  

Below is an overview of the directory and service-level architecture, referencing code from this codebase.

## DEPENDENCY INJECTION ARCHITECTURE

Meld uses TSyringe for dependency injection, which brings the following benefits:

• Decoupled service creation from service usage
• Simplified testing with mock injections
• Clear dependencies between services
• Centralized service configuration

### DI Core Concepts

1. **Service Registration**: Services are registered with the DI container via the `@Service()` decorator, which handles automatic registration with the container.

2. **Dependency Injection**: Services declare their dependencies using constructor parameters with the `@inject()` decorator, allowing the container to provide the correct dependencies.

3. **Container Resolution**: The container automatically resolves dependencies when creating instances, managing the entire dependency tree.

4. **Interface-based Design**: Services follow an interface-first design pattern, where each service implements an interface (e.g., `IFileSystemService`) and dependencies are declared using interface tokens.

5. **Circular Dependency Handling**: Circular dependencies are managed through the Client Factory pattern, which creates focused client interfaces for specific service interactions.

### DI Configuration

The core DI configuration is managed in `core/di-config.ts`, which:

1. Configures the global container
2. Registers core services and client factories
3. Connects services via their respective client interfaces
4. Registers remaining services using class registrations

## DIRECTORY & FILE STRUCTURE

At a high level, the project is arranged as follows (select key entries included):

project-root/  
 ├─ api/                    ← High-level API and tests  
 │   ├─ api.test.ts  
 │   └─ index.ts  
 ├─ bin/                    ← CLI entry point  
 │   └─ meld.ts  
 ├─ cli/                    ← CLI implementation  
 │   ├─ cli.test.ts  
 │   └─ index.ts  
 ├─ core/                   ← Core utilities and types  
 │   ├─ config/            ← Configuration (logging, etc.)  
 │   ├─ errors/            ← Error class definitions  
 │   │   ├─ MeldError.ts
 │   │   ├─ ServiceInitializationError.ts   ← Service initialization errors
 │   │   └─ ... other errors
 │   ├─ types/             ← Core type definitions  
 │   │   ├─ dependencies.ts  ← Service dependency definitions
 │   │   └─ index.ts
 │   ├─ utils/             ← Logging and utility modules  
 │   │   ├─ logger.ts
 │   │   ├─ serviceValidation.ts  ← Service validation utilities
 │   │   └─ simpleLogger.ts
 │   └─ ServiceProvider.ts ← DI service provider & helpers
 ├─ services/              ← Core service implementations  
 │   ├─ pipeline/          ← Main transformation pipeline  
 │   │   ├─ ParserService/     ← Initial parsing  
 │   │   ├─ InterpreterService/← Pipeline orchestration  
 │   │   ├─ DirectiveService/  ← Directive handling  
 │   │   │   ├─ handlers/  
 │   │   │   │   ├─ definition/   ← Handlers for definition directives  
 │   │   │   │   └─ execution/    ← Handlers for execution directives  
 │   │   │   └─ errors/  
 │   │   └─ OutputService/    ← Final output generation  
 │   ├─ state/             ← State management  
 │   │   ├─ StateService/      ← Core state management  
 │   │   └─ StateEventService/ ← Core event system  
 │   ├─ resolution/        ← Resolution and validation  
 │   │   ├─ ResolutionService/ ← Variable/path resolution  
 │   │   ├─ ValidationService/ ← Directive validation  
 │   │   └─ CircularityService/← Circular dependency detection  
 │   ├─ fs/                ← File system operations  
 │   │   ├─ FileSystemService/ ← File operations  
 │   │   ├─ PathService/      ← Path handling  
 │   │   └─ PathOperationsService/ ← Path utilities  
 │   └─ cli/               ← Command line interface  
 │       └─ CLIService/    ← CLI entry point  
 ├─ tests/                  ← Test infrastructure   
 │   ├─ fixtures/          ← Test fixture data  
 │   ├─ mocks/             ← Test mock implementations  
 │   └─ utils/             ← Test utilities and helpers  
 │       ├─ debug/         ← Test debug utilities  
 │       │   ├─ StateDebuggerService/  
 │       │   ├─ StateVisualizationService/  
 │       │   ├─ StateHistoryService/  
 │       │   └─ StateTrackingService/  
 │       ├─ di/            ← DI test utilities
 │       │   ├─ TestContainerHelper.ts ← Container management for tests
 │       │   └─ TestContextDI.ts ← DI-enabled test context
 │       ├─ FixtureManager.ts  
 │       ├─ MemfsTestFileSystem.ts  
 │       ├─ ProjectBuilder.ts  
 │       ├─ TestContext.ts  
 │       └─ TestSnapshot.ts  
 ├─ docs/                   ← Documentation  
 ├─ package.json  
 ├─ tsconfig.json  
 ├─ tsup.config.ts  
 └─ vitest.config.ts  

Key subfolders:  
• services/pipeline/: Core transformation pipeline services (parsing, interpretation, directives, output)  
• services/state/: State management and event services  
• services/resolution/: Resolution, validation, and circularity detection services  
• services/fs/: File system, path handling, and operations services  
• services/cli/: Command line interface services  
• core/: Central types, errors, utilities, and DI service provider used throughout the codebase  
• tests/utils/: Test infrastructure including debug utilities, memfs implementation, fixture management, and test helpers  
• tests/utils/di/: DI-specific test utilities
• api/: High-level public API for using Meld programmatically  
• cli/: Command line interface for Meld  

## CORE LIBRARIES & THEIR ROLE

### meld-ast 
   • parse(content: string): MeldNode[]  
   • Basic parsing that identifies directives vs. text nodes.  
   • Produces an AST which other services manipulate.  

### llmxml 
   • Converts content to an LLM-friendly XML format or can parse partially.  
   • OutputService may call it if user requests "llm" format.  

### meld-spec
   • Contains interface definitions for MeldNode, DirectiveNode, TextNode, etc.  
   • Contains directive kind enumerations.  

### tsyringe
   • Provides the dependency injection container
   • Manages service creation and resolution
   • Handles dependencies between services

## HIGH-LEVEL FLOW

Below is a simplified flow of how Meld content is processed:

   ┌─────────────────────────────┐
   │   Meld Source Document      │
   └─────────────────────────────┘
                │
                ▼
   ┌─────────────────────────────┐
   │ ParserService.parse(...)    │
   │   → uses meld-ast to parse  │
   └─────────────────────────────┘
                │ AST (MeldNode[])
                ▼
   ┌─────────────────────────────────────────────────┐
   │ InterpreterService.interpret(nodes, options)    │
   │   → For each node, pass to DirectiveService     │
   │   → Handles node transformations                │
   └─────────────────────────────────────────────────┘
                │
                ▼
   ┌──────────────────────────────────────────┐
   │ DirectiveService                         │
   │   → Routes to correct directive handler  │
   │   → Handlers can provide replacements    │
   └──────────────────────────────────────────┘
                │
                ▼
   ┌───────────────────────────────────────────────┐
   │ StateService + ResolutionService + Others     │
   │   → Stores variables and transformed nodes    │
   │   → Path expansions, data lookups, etc.       │
   └───────────────────────────────────────────────┘
                │
                ▼
   ┌──────────────────────────────────────────┐
   │ OutputService                            │
   │   → Uses transformed nodes for output    │
   │   → Generates clean, directive-free      │
   │     markdown, LLM XML, or other formats  │
   └──────────────────────────────────────────┘

This flow is orchestrated through DI, where the container resolves all required services and their dependencies automatically. The DI container handles service creation, ensuring each service gets the dependencies it needs to function properly.

## MAJOR SERVICES (OVERVIEW)

Below are the key "services" in the codebase. Each follows the single responsibility principle and is registered with the DI container via the `@Service()` decorator:

### CLIService
   - Provides command-line interface for running Meld
   - Handles file watching and reprocessing
   - Manages format selection and output options
   - Routes to appropriate services based on CLI flags
   - Dependencies: ParserService, InterpreterService, OutputService, FileSystemService, PathService, StateService

### ParserService  
   - Wraps the meld-ast parse(content) function  
   - Adds location information with file paths (parseWithLocations)  
   - Produces an array of MeldNode objects  
   - Dependencies: ResolutionServiceClient (for resolving variables during parsing)

### DirectiveService  
   - Routes directives to the correct directive handler  
   - Validates directives using ValidationService  
   - Calls ResolutionService for variable resolution  
   - Updates StateService with directive execution results
   - Supports node transformation through DirectiveResult interface
   - Handlers can provide replacement nodes for transformed output
   - Dependencies: ValidationService, StateService, PathService, FileSystemService, ParserService, InterpreterService, CircularityService, ResolutionService

### InterpreterService  
   - Orchestrates the main interpret(nodes) pipeline  
   - For each AST node:
       a) If it's text, store it or pass it along  
       b) If it's a directive:
          - Calls DirectiveService for processing
          - Handles node transformations if provided
          - Updates state with transformed nodes
   - Maintains the top-level process flow
   - Supports transformation mode through feature flags
   - Dependencies: DirectiveService, StateService, ParserService, FileSystemService, PathService, CircularityService

### StateService  
   - Stores variables in maps:
       • textVars (for @text)  
       • dataVars (for @data)  
       • pathVars (for @path)  
       • commands (for @define)  
   - Tracks both original and transformed MeldNodes
   - Provides transformation capabilities for directive processing
   - Maintains transformation state during cloning
   - Provides child states for nested imports  
   - Supports immutability toggles  
   - Dependencies: StateFactory, StateEventService, StateTrackingService

### ResolutionService  
   - Handles all variable interpolation:
       • Variables ("{{var}}", "{{data.field}}")
       • Path expansions ("$HOMEPATH/path")  
       • Command references  
   - Context-aware resolution  
   - Circular reference detection  
   - Sub-fragment parsing support  
   - Dependencies: StateService, FileSystemService, ParserServiceClient, PathService

### CircularityService  
   - Prevents infinite import loops  
   - Detects circular variable references  
   - Maintains dependency graphs  
   - Dependencies: ResolutionService

### PathService  
   - Validates and normalizes paths  
   - Enforces path security constraints  
   - Handles path joining and manipulation  
   - Supports test mode for path operations  
   - Dependencies: FileSystemServiceClient (to check if paths exist)

### ValidationService  
   - Validates directive syntax and constraints  
   - Provides extensible validator registration  
   - Throws MeldDirectiveError on validation failures  
   - Tracks available directive kinds  
   - Dependencies: ResolutionService

### FileSystemService  
   - Abstracts file operations (read, write)  
   - Supports both real and test filesystems  
   - Handles path resolution and validation  
   - Dependencies: PathOperationsService, PathServiceClient, IFileSystem

### OutputService  
   - Converts final AST and state to desired format
   - Uses transformed nodes when available
   - Supports markdown and LLM XML output  
   - Integrates with llmxml for LLM-friendly formatting  
   - Handles format-specific transformations
   - Provides clean output without directive definitions
   - Dependencies: StateService, ResolutionService, VariableReferenceResolverClient

## TESTING INFRASTRUCTURE

All tests are heavily reliant on a memory-based filesystem (memfs) for isolation and speed. The major testing utilities include:

### TestContainerHelper
   - Manages DI containers for tests
   - Provides isolated container creation
   - Supports mock registration and service resolution
   - Handles container cleanup between tests
   - Detects container state leaks

### TestContextDI
   - Central test harness that extends TestContext with DI support
   - Creates a DI container for each test
   - Provides mock service registration
   - Supports child context creation
   - Ensures proper cleanup after tests
   - Resolves services from the container for testing

### MemfsTestFileSystem  
   - Thin wrapper around memfs  
   - Offers readFile, writeFile, mkdir, etc. with in-memory data  
   - Provides an ephemeral environment for all test IO  

### TestContext  
   - Base class for testing environment
   - Provides references to all major services
   - Allows writing files, snapshotting the FS, and comparing  

### TestSnapshot  
   - Takes "snapshots" of the current Memfs FS, storing a Map<filePath, content>  
   - Compares snapshots to detect added/removed/modified files  

### ProjectBuilder  
   - Creates mock "projects" in the in-memory FS from JSON structure  
   - Useful for complex, multi-file tests or large fixture-based testing  

### Node Factories  
   - Provides helper functions for creating AST nodes in tests  
   - Supports creating directive, text, and code fence nodes  
   - Includes location utilities for source mapping  

Testing Organization:
• tests/utils/: Core test infrastructure (MemFS, snapshots, contexts)  
• tests/utils/di/: DI-specific test utilities
• tests/mocks/: Minimal mocks and test doubles  
• tests/fixtures/: JSON-based test data  
• tests/services/: Service-specific integration tests  

Testing Approach:
• Each test uses TestContextDI to create a fresh container
• Direct service resolution from the container
• Mock registration for dependencies
• Isolated container state between tests
• Factory functions for creating test nodes and data
• Snapshots for tracking filesystem changes  

## DEBUGGING INFRASTRUCTURE

The codebase includes specialized debugging services located in `tests/utils/debug/` that help diagnose and troubleshoot state-related issues:

### StateDebuggerService
   - Provides debug session management and diagnostics
   - Tracks state operations and transformations
   - Offers operation tracing and analysis
   - Helps identify state manipulation issues

### StateVisualizationService
   - Generates visual representations of state
   - Creates Mermaid/DOT graphs of state relationships
   - Visualizes state metrics and transformations
   - Aids in understanding complex state changes

### StateHistoryService
   - Records chronological state changes
   - Maintains operation history
   - Tracks transformation chains
   - Enables state change replay and analysis

### StateTrackingService
   - Monitors state relationships and dependencies
   - Tracks state lineage and inheritance
   - Records metadata about state changes
   - Helps debug scope and inheritance issues

Debugging Approach:
• Services can be enabled selectively in tests
• Debug output includes detailed state snapshots
• Visual representations help understand complex states
• History tracking enables step-by-step analysis

These debugging services are particularly useful for:
• Troubleshooting complex state transformations
• Understanding directive processing chains
• Analyzing variable resolution paths
• Debugging scope inheritance issues
• Visualizing state relationships

## SERVICE RELATIONSHIPS AND DEPENDENCY INJECTION

Services in Meld follow a dependency graph managed through the DI container:

1. Base Services:
   - FileSystemService (depends on PathOperationsService, PathServiceClient)
   - PathService (depends on FileSystemServiceClient)

2. State Management:
   - StateEventService (no dependencies)
   - StateService (depends on StateFactory, StateEventService, StateTrackingService)

3. Core Pipeline:
   - ParserService (depends on ResolutionServiceClient)
   - ResolutionService (depends on StateService, FileSystemService, PathService, ParserServiceClient)
   - ValidationService (depends on ResolutionService)
   - CircularityService (depends on ResolutionService)

4. Pipeline Orchestration:
   - DirectiveService (depends on multiple services)
   - InterpreterService (orchestrates others)

5. Output Generation:
   - OutputService (depends on StateService, ResolutionService, VariableReferenceResolverClient)

6. Debug Support:
   - DebuggerService (optional, depends on all)

## Dependency Resolution Patterns

### Circular Dependency Challenges

Circular dependencies occur when two or more services depend on each other, creating a dependency cycle:

- **FileSystemService ↔ PathService**: FileSystemService needs PathService for path resolution, while PathService needs FileSystemService to check if paths exist
- **ParserService ↔ ResolutionService**: ParserService needs ResolutionService to resolve variables, while ResolutionService needs ParserService to parse content
- **StateService ↔ StateTrackingService**: Complex bidirectional relationship for state tracking and management

### Client Factory Pattern (Current Approach)

The primary approach for handling circular dependencies in Meld is the Client Factory pattern:

1. Create minimal client interfaces that expose only the methods needed by the dependent service
2. Implement factories to create these client interfaces
3. Inject the factories rather than the actual services
4. Use the clients to access only the functionality that's actually needed

This pattern follows the Interface Segregation Principle (the "I" in SOLID), ensuring that services depend only on the methods they actually use.

#### Example Implementation

For the FileSystemService ↔ PathService circular dependency:

```typescript
// Minimal interface for what FileSystemService needs from PathService
export interface IPathServiceClient {
  resolvePath(path: string): string;
  normalizePath(path: string): string;
}

// Factory to create a client for PathService functionality
@injectable()
@Service({
  description: 'Factory for creating path service clients'
})
export class PathServiceClientFactory {
  constructor(@inject('IPathService') private pathService: IPathService) {}
  
  createClient(): IPathServiceClient {
    return {
      resolvePath: (path) => this.pathService.resolvePath(path),
      normalizePath: (path) => this.pathService.normalizePath(path)
    };
  }
}

// Updated FileSystemService that depends on the factory
@injectable()
@Service({
  description: 'Service for file system operations'
})
export class FileSystemService implements IFileSystemService {
  private pathClient: IPathServiceClient;
  
  constructor(
    @inject('IPathOperationsService') private readonly pathOps: IPathOperationsService,
    @inject('PathServiceClientFactory') pathClientFactory: PathServiceClientFactory,
    @inject('IFileSystem') fileSystem: IFileSystem | null = null
  ) {
    this.fs = fileSystem || new NodeFileSystem();
    this.pathClient = pathClientFactory.createClient();
  }
  
  // Use the client interface directly
  private resolvePath(filePath: string): string {
    return this.pathClient.resolvePath(filePath);
  }
}
```
Similarly, implement the reverse direction with a  and .
    </DocsDevDiArchitectureMd>
    <DirectContainerResolutionAlternativeApproach>
For cases where the Client Factory pattern isn&apos;t feasible, direct container resolution with lazy loading can be used:
```typescript
import { resolveService } from '@core/ServiceProvider';

@injectable()
@Service({
  description: 'Service with lazy dependency resolution'
})
export class OutputService implements IOutputService {
  private resolverClient?: IVariableReferenceResolverClient;
  
  constructor(
    @inject('IStateService') private readonly stateService: IStateService,
    @inject('IResolutionService') private readonly resolutionService: IResolutionService
  ) {}
  
  /**
   * Get a resolver client using direct container resolution
   * This breaks circular dependencies by deferring resolution until needed
   */
  private getVariableResolver(): IVariableReferenceResolverClient | undefined {
    // Lazy-load the client only when needed
    if (!this.resolverClient) {
      try {
        // Get the factory from the container using ServiceProvider helper
        const factory = resolveService<VariableReferenceResolverClientFactory>(
          'VariableReferenceResolverClientFactory'
        );
        
        // Create the client
        this.resolverClient = factory.createClient();
        logger.debug('Successfully created VariableReferenceResolverClient');
      } catch (error) {
        logger.warn('Failed to create VariableReferenceResolverClient', { error });
      }
    }
    
    return this.resolverClient;
  }
  
  // Using the lazy-loaded client
  async convert(nodes: MeldNode[], state: IStateService, format: string = 'markdown'): Promise<string> {
    // Get the resolver only when needed
    const resolver = this.getVariableResolver();
    
    if (resolver && format === 'markdown') {
      // Process nodes using the resolver for field access
      return this.nodeToMarkdown(nodes, state, resolver);
    }
    
    // Fallback implementation if resolver isn't available
    return this.legacyConvert(nodes, state, format);
  }
}
```
This approach:
1. Avoids creating circular dependencies at initialization time
2. Loads dependencies only when they&apos;re actually needed
3. Provides fallback mechanisms when resolution fails
4. Uses the ServiceProvider helper  rather than direct container access
Key considerations when using direct container resolution:
1. Always include fallback mechanisms
2. Log resolution failures for debugging
3. Cache resolved instances for performance
4. Only resolve what you need, when you need it
      <BenefitsOfClientFactoryPattern>
1. **Clear Dependencies**: Services explicitly state what they need through focused interfaces
2. **Interface Segregation**: Services only get access to the specific methods they need
3. **No Null Checks**: Factory creates clients at initialization time, eliminating null checks
4. **Simpler Testing**: Small, focused interfaces are easier to mock
5. **Reduced Tight Coupling**: Services are coupled only to minimal interfaces
6. **Improved Code Readability**: Code intent becomes clearer when using direct method calls
7. **Better Maintainability**: Changes to service interfaces won&apos;t affect all dependent services
      </BenefitsOfClientFactoryPattern>
      <NamingConventions>
For consistency across the codebase, we follow these naming conventions:
- Client Interfaces:  (e.g., )
- Factory Classes:  (e.g., )
- Factory Methods:  for consistent API
      </NamingConventions>
      <TestingWithClientFactories>
Testing becomes more straightforward with the client factory pattern:
```typescript
describe('FileSystemService', () => {
  let context: TestContextDI;
  let service: IFileSystemService;
  
  beforeEach(() => {
    context = TestContextDI.create();
    
    // Create a mock client
    const mockPathClient = {
      resolvePath: vi.fn().mockReturnValue('/resolved/path'),
      normalizePath: vi.fn().mockReturnValue('normalized/path')
    };
    
    // Create a mock factory that returns our mock client
    const mockPathClientFactory = {
      createClient: vi.fn().mockReturnValue(mockPathClient)
    };
    
    // Register the mock factory
    context.registerMock('PathServiceClientFactory', mockPathClientFactory);
    
    // Resolve the service
    service = context.resolveSync('IFileSystemService');
  });
  
  afterEach(async () => {
    await context.cleanup();
  });
  
  it('should resolve paths using the path client', async () => {
    // Test that calling methods on the service uses the client correctly
    await service.readFile('some/path');
    
    // Verify the path client was used
    expect(mockPathClient.resolvePath).toHaveBeenCalledWith('some/path');
  });
});
```
For testing services that use direct container resolution, we register mocks directly with the container:
```typescript
describe('OutputService', () => {
  let context: TestContextDI;
  let service: IOutputService;
  
  beforeEach(() => {
    context = TestContextDI.create();
    
    // Create a mock resolver client
    const mockResolverClient = {
      accessFields: vi.fn().mockReturnValue('resolved value'),
      convertToString: vi.fn().mockReturnValue('formatted string')
    };
    
    // Create a mock factory that returns our mock client
    const mockFactory = {
      createClient: vi.fn().mockReturnValue(mockResolverClient)
    };
    
    // Register the mock factory with the container
    context.registerMock('VariableReferenceResolverClientFactory', mockFactory);
    
    // Resolve the service
    service = context.resolveSync('IOutputService');
  });
  
  afterEach(async () => {
    await context.cleanup();
  });
  
  it('should convert nodes to markdown with field access', async () => {
    const result = await service.convert(mockNodes, mockState, 'markdown');
    expect(result).toContain('formatted string');
  });
});
```
      </TestingWithClientFactories>
    </DirectContainerResolutionAlternativeApproach>
  </Context>
  <ExampleUsageScenario>
1. Input: A .meld file with lines like:@text greeting = "Hello"@data config = {
  "value": 123
}@import [ path = &quot;other.meld&quot; ]
2. We load the file from disk.
3. ParserService → parse the content → AST.
4. InterpreterService → interpret(AST).a) For each directive, DirectiveService → validation → resolution → update StateService.b) If an import is encountered, CircularityService ensures no infinite loops.
5. Once done, the final StateService has textVars.greeting = "Hello", dataVars.config = { value: 123 }, etc.
6. OutputService can generate the final text or an LLM-XML representation.
With DI, this flow is orchestrated through the container, which resolves all the required services and their dependencies automatically.
  </ExampleUsageScenario>
  <ErrorHandling>
• MeldDirectiveError thrown if a directive fails validation or interpretation.• MeldParseError if the parser cannot parse content.• PathValidationError for invalid paths.• ResolutionError for variable resolution issues.• MeldError as a base class for other specialized errors.• ServiceInitializationError for DI-related initialization failures.
These errors typically bubble up to the caller or test.
  </ErrorHandling>
  <Conclusion>
This codebase implements the entire Meld language pipeline:• Parsing Meld documents into an AST.• Validating &amp; interpreting directives.• Storing data in a hierarchical state.• Resolving references (text, data, paths, commands).• (Optionally) generating final formatted output.
The codebase uses TSyringe for dependency injection, which helps manage the complex relationships between services. The Client Factory pattern is used to handle circular dependencies between core services, with direct container resolution as an alternative for specific cases.
The test environment includes robust DI support with TestContextDI, allowing for isolated container testing, mock registration, and service resolution. The system adheres to SOLID design principles with interface-first design and clear separation of concerns.
  </Conclusion>
</SimplifyInterpretercoreCodeWithStrongerDefineTypes>

<DependencyInjectionInMeld>
This document provides guidance on working with the dependency injection (DI) system in the Meld codebase.
  <Overview>
Meld uses [TSyringe](https://github.com/microsoft/tsyringe) for dependency injection. All services are registered and resolved through the DI container, which simplifies service initialization and testing.
  </Overview>
  <CoreConcepts>
    <1serviceRegistration>
Services are automatically registered with the DI container when they are decorated with the  decorator:
```typescript
import { Service } from '@core/ServiceProvider';

@Service({
  description: 'Service that provides file system operations'
})
export class FileSystemService implements IFileSystemService {
  // Implementation...
}
```
The  decorator registers the class with the container and adds some metadata for documentation purposes.
    </1serviceRegistration>
    <2dependencyInjection>
Services can inject their dependencies through constructor parameters:
```typescript
import { inject } from 'tsyringe';

@Service()
export class ResolutionService implements IResolutionService {
  constructor(
    @inject('IStateService') private stateService: IStateService,
    @inject('IFileSystemService') private filesystem: IFileSystemService,
    @inject('IParserService') private parser: IParserService,
    @inject('IPathService') private pathService: IPathService
  ) {}
  
  // Implementation...
}
```
    </2dependencyInjection>
    <3creatingServices>
Services should be created using the DI container, not with :
```typescript
// CORRECT: Let the DI container create the service
import { container } from 'tsyringe';
const service = container.resolve(ServiceClass);

// CORRECT: Use the ServiceProvider helper
import { createService } from '@core/ServiceProvider';
const service = createService(ServiceClass);

// INCORRECT: Don't use 'new' directly
const service = new ServiceClass(); // Avoid this
```
    </3creatingServices>
  </CoreConcepts>
  <BestPractices>
    <ServiceDesign>
1. **Interface-First Design**: Define an interface for your service before implementing it
2. **Explicit Dependencies**: Always specify dependencies in the constructor
3. **Private Injection**: Use  in constructor parameters to store the dependencies
4. **Explicit Return Types**: Always provide return types for methods
5. **Proper Initialization**: Services should be fully initialized after construction
    </ServiceDesign>
    <ExampleService>
```typescript
import { inject } from 'tsyringe';
import { Service } from '@core/ServiceProvider';

// 1. Define the interface
export interface IExampleService {
  process(data: string): Promise<string>;
  getStatus(): string;
}

// 2. Implement the service
@Service({
  description: 'Example service that demonstrates best practices'
})
export class ExampleService implements IExampleService {
  // 3. Constructor injection with explicit dependencies
  constructor(
    @inject('IDependencyService') private dependency: IDependencyService,
    @inject('ILoggerService') private logger: ILoggerService
  ) {}

  // 4. Explicit return type
  async process(data: string): Promise<string> {
    this.logger.log('Processing data...');
    return this.dependency.transform(data);
  }

  getStatus(): string {
    return 'Ready';
  }
}
```
    </ExampleService>
  </BestPractices>
  <TestingWithDi>
    <UsingTestcontextdi>
The  class provides utilities for testing with DI:
```typescript
import { TestContextDI } from '@tests/utils/di/TestContextDI';

describe('MyService', () => {
  let context: TestContextDI;
  
  beforeEach(() => {
    // Create a test context with DI
    context = TestContextDI.create();
  });
  
  afterEach(async () => {
    // Clean up resources
    await context.cleanup();
  });
  
  it('should process data correctly', async () => {
    // Register a mock dependency
    const mockDependency = { transform: vi.fn().mockReturnValue('transformed') };
    context.registerMock('IDependencyService', mockDependency);
    
    // Get the service from the container
    const service = context.container.resolve('IExampleService');
    
    // Test the service
    const result = await service.process('input');
    expect(result).toBe('transformed');
    expect(mockDependency.transform).toHaveBeenCalledWith('input');
  });
});
```
    </UsingTestcontextdi>
    <MockingServices>
To register mock implementations:
```typescript
// Register a mock instance
context.registerMock('IServiceName', mockImplementation);

// Register a mock class
context.container.registerMockClass('IServiceName', MockClass);
```
    </MockingServices>
  </TestingWithDi>
  <CommonPatterns>
    <DualModeConstructorPattern>
Meld services need to support both DI and non-DI modes. The recommended pattern is:
```typescript
/**
 * Constructor with DI annotations
 */
constructor(
  @inject(SomeFactory) factory?: SomeFactory,
  @inject('IService1') service1?: IService1,
  @inject('IService2') service2?: IService2
) {
  this.initializeFromParams(factory, service1, service2);
}

/**
 * Helper that chooses initialization path
 */
private initializeFromParams(
  factory?: SomeFactory,
  service1?: IService1,
  service2?: IService2
): void {
  if (factory) {
    this.initializeDIMode(factory, service1, service2);
  } else {
    this.initializeLegacyMode(service1, service2);
  }
}

/**
 * DI mode initialization
 */
private initializeDIMode(
  factory: SomeFactory,
  service1?: IService1,
  service2?: IService2
): void {
  this.factory = factory;
  this.service1 = service1;
  this.service2 = service2;
  // Additional initialization
}

/**
 * Legacy mode initialization
 */
private initializeLegacyMode(
  service1?: IService1,
  service2?: IService2
): void {
  // Create default dependencies
  this.factory = new SomeFactory();
  
  // Additional initialization
}
```
This pattern:
1. Keeps the constructor simple
2. Clearly separates DI and non-DI initialization logic
3. Makes maintenance easier
4. Preserves dual-mode functionality
5. Provides a clear path to eventually remove legacy mode
See  for more examples.
    </DualModeConstructorPattern>
    <FactoryPattern>
For services that need complex initialization or multiple instances:
```typescript
@Service()
export class ServiceFactory {
  constructor(
    @inject('IDependencyA') private depA: IDependencyA,
    @inject('IDependencyB') private depB: IDependencyB
  ) {}
  
  createService(config: ServiceConfig): IService {
    // Create a specialized instance with the given config
    // The factory can use its injected dependencies
    return new SpecializedService(this.depA, this.depB, config);
  }
}
```
    </FactoryPattern>
    <ServiceProviders>
For centralized service registration:
```typescript
// In a central di-config.ts file:
import { container } from 'tsyringe';

// Register core services
container.register('FileSystemService', { useClass: FileSystemService });
container.register('IFileSystemService', { useToken: 'FileSystemService' });
```
    </ServiceProviders>
  </CommonPatterns>
  <Troubleshooting>
    <CircularDependencies>
If you have circular dependencies, use  with a string token instead of a direct class reference:
```typescript
// Instead of this (can cause circular dependency issues):
constructor(@inject(DependentService) private dependent: DependentService)

// Do this:
constructor(@inject('IDependentService') private dependent: IDependentService)
```
    </CircularDependencies>
    <MissingDependencies>
If a service fails to resolve with &quot;unregistered dependency token&quot; errors:
1. Check that the service is decorated with 
2. Verify that the injected token is registered in the container
3. Check for typos in the injection token string
4. Make sure the services are imported and executed before use
    </MissingDependencies>
    <TestingIssues>
If tests fail with DI errors:
1. Use  to create a clean container for each test
2. Register all required mock dependencies before resolving the service
3. Clean up after tests with
```

#### ../../docs/dev/PIPELINE.md
```javascript
# Meld Pipeline Flow

## Overview

The Meld pipeline processes `.mld` files through several stages to produce either `.xml` or `.md` output. Here's a detailed look at how it works:

```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐     ┌──────────────┐
│  Service    │     │   Service   │     │   Pipeline   │     │  Variable    │     │    Final     │
│Initialization├────►│ Validation  ├────►│  Execution   ├────►│  Resolution  ├────►│   Output     │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘     └──────────────┘
      │                    │                    │                    │                    │
      ▼                    ▼                    ▼                    ▼                    ▼
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐     ┌──────────────┐
│Dependencies │     │Validate All │     │Process Input │     │Resolve Vars & │     │Generate Clean│
│  Resolved   │     │ Services    │     │   Content    │     │  References   │     │   Output    │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘     └──────────────┘
```
    </TestingIssues>
  </Troubleshooting>
  <ServiceOrganization>
The pipeline is organized into logical service groups, with strict initialization order and dependency validation:
    <PipelineServicesServicesPipeline>
```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐
│   Parser    │     │  Directive  │     │ Interpreter  │     │   Output     │
│   Service   ├────►│   Service   ├────►│   Service    ├────►│   Service    │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘
      │                    │                    │                    │
      ▼                    ▼                    ▼                    ▼
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐
│Initialize & │     │Validate &   │     │Transform &   │     │Format &     │
│  Validate   │     │Process Dirs │     │Update State  │     │Generate Out │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘
```
    </PipelineServicesServicesPipeline>
    <StateServicesServicesState>
```ascii
┌─────────────┐     ┌─────────────┐
│    State    │     │    State    │
│   Service   ├────►│    Event    │
└─────────────┘     │   Service   │
                    └─────────────┘
```
    </StateServicesServicesState>
    <ResolutionServicesServicesResolution>
```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐
│ Resolution  │     │ Validation  │     │ Circularity  │
│   Service   ├────►│   Service   ├────►│   Service    │
└─────────────┘     └─────────────┘     └──────────────┘
```
    </ResolutionServicesServicesResolution>
    <FileSystemServicesServicesFs>
```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐
│    File     │     │    Path     │     │     Path     │
│   System    ├────►│   Service   ├────►│  Operations  │
│   Service   │     │             │     │   Service    │
└─────────────┘     └─────────────┘     └──────────────┘
```
    </FileSystemServicesServicesFs>
  </ServiceOrganization>
  <DetailedFlow>
1. **Service Initialization** ()
- Resolves service dependencies
- Initializes in correct order
- Validates service configuration
- Enables transformation if requested
2. **Input Processing** ()
- User runs 
-  handles command line options
- Default output is  format
- Can specify  for  output
- Supports  for direct console output
3. **Parsing** ()
- Reads the input file content
- Parses into AST using 
- Identifies directives and text nodes
- Adds source location information
4. **Interpretation** ()
- Processes each AST node sequentially
- Routes directives to appropriate handlers
- Handlers can provide replacement nodes
- Maintains both original and transformed states
- Resolves variables and references
- Handles file imports and embedding
5. **Variable Resolution** ()
- Resolves variable references like 
- Handles field access with dot and bracket notation
- Supports nested object and array access
- Manages path variable resolution and prefixing
- Provides two architecture models:
- Traditional: OutputService handles resolution
- Delegated: ResolutionService handles resolution
6. **Output Generation** ()
- Takes transformed nodes and state
- Converts to requested format:
- : Uses  library for LLM-friendly XML
- : Clean markdown without directive definitions
- Writes output to file or stdout
  </DetailedFlow>
  <TransformationModeAndVariableResolution>
When transformation mode is enabled, the pipeline handles directives and variables in a special way. Understanding this flow is critical for debugging and enhancing directive handlers:
```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐
│  Directive  │     │Interpretation│     │   Variable   │     │   Output     │
│  Handlers   ├────►│  & Node     ├────►│  Resolution  ├────►│  Generation  │
│(with replace│     │Transformation│     │              │     │              │
│  nodes)     │     │              │     │              │     │              │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘
```
    <KeyTransformationPipelineConcepts>
1. **Directive Handler Replacement Nodes**
- Directive handlers can return replacement nodes when in transformation mode
- The InterpreterService must properly apply these replacements in the transformed nodes array
- For import directives, the replacement is typically an empty text node
- For embed directives, the replacement node contains the embedded content
2. **State Propagation Across Boundaries**
- Variables must be explicitly copied between parent and child states
- When importing files, variables must be copied from imported state to parent state
- The ImportDirectiveHandler must ensure all variable types (text, data, path, commands) are copied
3. **Variable Resolution Process**
- Variables can be resolved at multiple stages:
- During directive processing
- During node transformation
- During final output generation
- During post-processing in the main function
- Meld supports two distinct architectures for variable resolution:
- **Traditional Architecture**: OutputService resolves variables directly during final rendering
- **Delegated Architecture**: OutputService delegates to ResolutionService for variable resolution
- Architecture is controlled by the  feature flag or the  environment variable
4. **State Management for Transformation**
- The StateService maintains both original and transformed node arrays
- Transformed nodes must be explicitly initialized
- The transformNode method is used to replace directive nodes with their outputs
- State must keep track of transformation options to determine which directives to transform
    </KeyTransformationPipelineConcepts>
  </TransformationModeAndVariableResolution>
  <ServiceResponsibilities>
    <PipelineServices>
1. **ParserService** ()
- Wraps meld-ast parser
- Produces AST nodes
- Adds file location information
2. **InterpreterService** ()
- Orchestrates directive processing
- Handles node transformations
- Maintains interpretation state
- Handles imports and embedding
- **Critical for transformation:** Applies directive handler replacement nodes to transformed node array
- **State propagation:** Ensures proper variable inheritance between parent and child states
3. **DirectiveService** ()
- Routes directives to handlers
- Validates directive syntax
- Supports node transformation
- Updates state based on directive results
- **Directive handlers:** Can return replacement nodes in transformation mode
- **Handler context:** Includes parent state for proper variable propagation
4. **OutputService** ()
- Uses transformed nodes for clean output
- Supports markdown and LLM XML
- Generates directive-free output
- Handles formatting options
- **Variable resolution:** Resolves variable references in text nodes during output generation
- **Transformation handling:** Uses special processing for variable references in transformation mode
    </PipelineServices>
    <StateServices>
1. **StateService** ()
- Stores variables and commands
- Maintains original and transformed nodes
- Manages scope and inheritance
- Tracks file dependencies
- **Transformation support:** Keeps track of both original and transformed node arrays
- **Variable copying:** Must explicitly copy variables between parent and child states
- **Transformation options:** Supports selective transformation of different directive types
2. **StateEventService** ()
- Handles state change events
- Manages state updates
- Provides event hooks
- Supports state tracking
    </StateServices>
    <ResolutionServices>
1. **ResolutionService** ()
- Resolves variables and references
- Handles path expansions
- Manages circular dependencies
2. **ValidationService** ()
- Validates directive syntax and constraints
- Provides extensible validator registration
- Throws MeldDirectiveError on validation failures
- Tracks available directive kinds
3. **CircularityService** ()
- Prevents infinite import loops
- Detects circular variable references
- Maintains dependency graphs
    </ResolutionServices>
    <FileSystemServices>
1. **FileSystemService** ()
- Abstracts file operations (read, write)
- Supports both real and test filesystems
- Handles path resolution and validation
2. **PathService** ()
- Validates and normalizes paths
- Enforces path security constraints
- Handles path joining and manipulation
- Supports test mode for path operations
3. **PathOperationsService** ()
- Handles complex path operations
- Provides path utilities
- Manages path transformations
```




2.  **`@define` Documentation:** 



#### ../../_dev/DEFINE-CLARITY.md
```javascript
# @define Directive: Understanding and Implementation

## Core Concept: Creating Reusable Command Templates

The `@define` directive allows you to create named, reusable templates for runnable commands (both shell commands and language scripts). These templates can accept parameters, making them function like simple macros or functions within Meld.

Defined commands are invoked using the `@run $commandName(...)` syntax.

## Syntax

There are two primary forms:

**1. Defining Basic Commands (Shell Commands):**

```meld
@define commandName(param1, param2) = @run [command template with {{param1}} and {{param2}}]

// Or for multiline commands:
@define multiCmd(arg) = @run [[
  echo "Starting script with {{arg}}"
  ./run_script.sh {{arg}}
]]
```
- ****: The identifier (no @run $commandName(...)`.
- ****: An optional list of parameter names, acting as placeholders within the command template.
- ****: Separator.
- ** or **: The right-hand side **must** be a   directive. This defines the shell command template to be executed.
**2. Defining Language Commands (JS, Python, Bash):**
```meld
@define jsCommand(name, value) = @run js(name, value) [[
  // Raw JavaScript code using parameters name & value
  console.log(`Processing ${name}: ${value}`);
  // Note: {{variables}} are NOT interpolated here
]]

@define pyCommand(inputPath) = @run python(inputPath) [[
# Raw Python code
import sys
input_file = sys.argv[1]
print(f"Processing {input_file}")
# ...
]]
```
- ****: Identifier for the language command.
- ****: Parameters expected by the language script.
- ****: The right-hand side **must** be a   directive. This defines the language, the parameters it accepts, and the *raw code block* to be executed.
    </FileSystemServices>
  </ServiceResponsibilities>
  <CommandTemplateBodyForBasicCommands>
When defining a Basic Command template ( or ):
- **Shell Command**: It should be a valid shell command string.
- **Parameter Placeholders**: It can contain , , etc., corresponding to the parameters defined in the parentheses . These will be replaced by the arguments provided when the command is invoked via .
- **Other Variables**: It can also contain standard Meld variable references (, ). These are *not* resolved when  is processed; they are resolved *at the time the command is executed* via .
- **Multiline Syntax ()**: If using double brackets, the first newline immediately following  is ignored.
  </CommandTemplateBodyForBasicCommands>
  <LanguageCodeBlockForLanguageCommands>
When defining a Language Command template ():
- **Raw Code**: The content within  is treated as **raw source code** for the specified language (js, python, bash).
- **NO Interpolation**: Variables (, ) inside the  block are **NOT** interpolated. The code is passed directly to the language interpreter.
- **Parameters**: The parameters defined in  are passed to the script at runtime (e.g., as command-line arguments).
  </LanguageCodeBlockForLanguageCommands>
  <CoreImplementationDefinedirectivehandler>
The  handler primarily acts as a storage mechanism:
1. **Validate Syntax**: Checks the overall  structure.
2. **Extract Components**: Parses the directive to get the  (without parameters[
  "param1",
  "param2"
]@run` directive (its kind - basic or language, the command template string or code block, the language if applicable).
3. **Store Definition**: Creates a  object containing the  array and the necessary details from the  directive (e.g., the literal command template string for basic commands, or the language and raw code block for language commands).
4. **Update State**: Stores this  object in the current execution state using . Metadata can also be stored.
**Important**: The  handler does *not* execute anything or resolve variables within the template/code block. It simply stores the definition.
  </CoreImplementationDefinedirectivehandler>
  <InteractionWithRunCommandname>
The execution logic resides within the  and its  subtype:
1. **Invocation**: 
2. **Retrieve Definition**: Fetches the  for  from the state.
3. **Resolve Arguments**: Resolves the arguments (, ) provided in the  call.
4. **Execution based on Definition Type**:
- **If Basic Command Definition**: Substitutes the resolved arguments *positionally* into the stored command template string (replacing , , etc.). The resulting command string is then executed, resolving any other variables (, ) at that time.
- **If Language Command Definition**: Passes the resolved arguments to the stored language script (e.g., as command-line arguments  in Python,  in Node). The raw code block stored in the definition is executed by the appropriate language interpreter.
  </InteractionWithRunCommandname>
  <KeyImplementationAspectsConsiderations>
- **Positional Parameters**: Substitution/passing relies strictly on the order in the  parameter list and the  argument list.
- **Delayed Resolution (Basic Commands)**: Variables (, ) within a basic command template are resolved only when invoked via .
- **No Interpolation (Language Commands)**: The code block for language commands is executed raw; use the defined parameters to pass data into the script.
- **No Direct Output**:  only modifies state.
  </KeyImplementationAspectsConsiderations>
  <ValidationCriteria>
A correct  implementation ensures:
- Both basic and language command definitions are correctly parsed and stored.
- Invocation via  correctly retrieves the definition and identifies its type.
- Arguments passed to  are resolved correctly.
- For basic commands: Positional parameter substitution into the template works reliably, and the final command executes correctly.
- For language commands: Resolved arguments are passed correctly to the script, and the stored code block is executed by the correct interpreter.
```




3.  **Your Service Code (`InterpreterCore`)**: 



#### ../../services/pipeline/InterpreterService/InterpreterService.ts
```javascript
import type { MeldNode, SourceLocation, DirectiveNode } from '@core/syntax/types/index.js';
import { interpreterLogger as logger } from '@core/utils/logger.js';
import type { IInterpreterService, InterpreterOptions } from '@services/pipeline/InterpreterService/IInterpreterService.js';
import type { DirectiveServiceLike, StateServiceLike, InterpreterServiceLike } from '@core/shared-service-types.js';
import { MeldInterpreterError, type InterpreterLocation } from '@core/errors/MeldInterpreterError.js';
import { MeldError, ErrorSeverity } from '@core/errors/MeldError.js';
import { StateVariableCopier } from '@services/state/utilities/StateVariableCopier.js';
import type { IStateService } from '@services/state/StateService/IStateService.js';
import { Service } from '@core/ServiceProvider.js';
import { inject, injectable, delay, container } from 'tsyringe';
import { DirectiveServiceClientFactory } from '@services/pipeline/DirectiveService/factories/DirectiveServiceClientFactory.js';
import { IDirectiveServiceClient } from '@services/pipeline/DirectiveService/interfaces/IDirectiveServiceClient.js';

const DEFAULT_OPTIONS: Required<Omit<InterpreterOptions, 'initialState' | 'errorHandler'>> = {
  filePath: '',
  mergeState: true,
  importFilter: [],
  strict: true
};

function convertLocation(loc?: SourceLocation): InterpreterLocation | undefined {
  if (!loc) return undefined;
  return {
    line: loc.start.line,
    column: loc.start.column,
  };
}

function getErrorMessage(error: unknown): string {
  if (error instanceof Error) return error.message;
  if (typeof error === 'string') return error;
  return 'Unknown error';
}

/**
 * Service for interpreting Meld AST and executing directives
 */
@injectable()
@Service({
  description: 'Service for interpreting Meld AST nodes and executing directives',
  dependencies: [
    { token: 'DirectiveServiceClientFactory', name: 'directiveServiceClientFactory' },
    { token: 'IStateService', name: 'stateService' }
  ]
})
export class InterpreterService implements IInterpreterService, InterpreterServiceLike {
  private directiveService?: DirectiveServiceLike; // Legacy reference
  private directiveClient?: IDirectiveServiceClient; // Client from factory pattern
  private directiveClientFactory?: DirectiveServiceClientFactory;
  private stateService?: StateServiceLike;
  private initialized = false;
  private stateVariableCopier = new StateVariableCopier();
  private initializationPromise: Promise<void> | null = null;
  private factoryInitialized: boolean = false;

  /**
   * Creates a new InterpreterService
   * 
   * @param directiveServiceClientFactory - Factory for creating directive service clients
   * @param stateService - Service for state management
   */
  constructor(
    @inject('DirectiveServiceClientFactory') directiveServiceClientFactory?: DirectiveServiceClientFactory,
    @inject('IStateService') stateService?: StateServiceLike
  ) {
    this.directiveClientFactory = directiveServiceClientFactory;
    this.stateService = stateService;
    
    logger.debug('InterpreterService constructor', {
      hasDirectiveFactory: !!this.directiveClientFactory,
      hasStateService: !!this.stateService
    });
    
    // If we have dependencies, initialize
    if (this.directiveClientFactory && this.stateService) {
      // Create a promise that resolves when initialization completes
      this.initializationPromise = new Promise<void>((resolve) => {
        this.initializeDirectiveClient();
        this.initialized = true;
        logger.debug('InterpreterService initialized via DI');
        resolve();
      });
    }
  }

  /**
   * Initialize the directiveClient using the factory
   */
  private initializeDirectiveClient(): void {
    if (!this.directiveClientFactory) {
      return;
    }
    
    try {
      this.directiveClient = this.directiveClientFactory.createClient();
      logger.debug('Successfully created DirectiveServiceClient using factory');
    } catch (error) {
      logger.warn('Failed to create DirectiveServiceClient', { error });
      this.directiveClient = undefined;
    }
  }

  /**
   * Lazily initialize the DirectiveServiceClient factory
   * This is called only when needed to avoid circular dependencies
   */
  private ensureFactoryInitialized(): void {
    if (this.factoryInitialized) {
      return;
    }
    
    this.factoryInitialized = true;
    try {
      this.directiveClientFactory = container.resolve<DirectiveServiceClientFactory>('DirectiveServiceClientFactory');
      this.initializeDirectiveClient();
    } catch (error) {
      logger.warn('Failed to resolve DirectiveServiceClientFactory', { error });
    }
  }

  /**
   * Ensure the service is initialized before use
   * @private
   */
  private ensureInitialized(): void {
    if (!this.initialized) {
      throw new MeldInterpreterError(
        'InterpreterService must be initialized before use',
        'initialization',
        undefined, // No location information
        { severity: ErrorSeverity.Fatal }
      );
    }
  }

  /**
   * Calls the directive service to handle a directive node
   * Uses the client if available, falls back to direct service reference
   */
  private async callDirectiveHandleDirective(node: DirectiveNode, context: any): Promise<any> {
    this.ensureFactoryInitialized();
    
    if (this.directiveClient && this.directiveClient.handleDirective) {
      try {
        return await this.directiveClient.handleDirective(node, context);
      } catch (error) {
        logger.warn('Error using directiveClient.handleDirective, falling back to direct service', { error });
      }
    }
    
    if (this.directiveService) {
      return await this.directiveService.handleDirective(node, context);
    }
    
    throw new MeldInterpreterError(
      'No directive service available to handle directive',
      'directive_handling',
      undefined, // No location information
      { severity: ErrorSeverity.Fatal }
    );
  }

  /**
   * Calls the directive service to check if it supports a directive kind
   * Uses the client if available, falls back to direct service reference
   */
  private callDirectiveSupportsDirective(kind: string): boolean {
    this.ensureFactoryInitialized();
    
    if (this.directiveClient) {
      try {
        return this.directiveClient.supportsDirective(kind);
      } catch (error) {
        logger.warn('Error using directiveClient.supportsDirective, falling back to direct service', { error });
      }
    }
    
    if (this.directiveService) {
      return this.directiveService.supportsDirective(kind);
    }
    
    return false;
  }

  /**
   * Returns whether this service can handle transformations
   * Required by the pipeline validation system
   */
  public canHandleTransformations(): boolean {
    return true;
  }

  /**
   * Explicitly initialize the service with all required dependencies.
   * @deprecated This method is maintained for backward compatibility. 
   * The service is automatically initialized via dependency injection.
   */
  initialize(
    directiveService: DirectiveServiceLike,
    stateService: StateServiceLike
  ): void {
    // Store the direct reference for backward compatibility
    this.directiveService = directiveService;
    this.stateService = stateService;
    this.initialized = true;
    this.initializationPromise = Promise.resolve();
    logger.debug('InterpreterService initialized manually');
  }

  /**
   * Handle errors based on severity and options
   * In strict mode, all errors throw
   * In permissive mode, recoverable errors become warnings
   */
  private handleError(error: Error, options: Required<Omit<InterpreterOptions, 'initialState' | 'errorHandler'>> & Pick<InterpreterOptions, 'errorHandler'>): void {
    // If it's not a MeldError, wrap it
    const meldError = error instanceof MeldError 
      ? error 
      : MeldError.wrap(error);
    
    logger.error('Error in InterpreterService', { error: meldError });
    
    // In strict mode, or if it's a fatal error, throw it
    if (options.strict || !meldError.canBeWarning()) {
      throw meldError;
    }
    
    // In permissive mode with recoverable errors, use the error handler or log a warning
    if (options.errorHandler) {
      options.errorHandler(meldError);
    } else {
      logger.warn(`Warning: ${meldError.message}`, {
        code: meldError.code,
        filePath: meldError.filePath,
        severity: meldError.severity
      });
    }
  }

  async interpret(
    nodes: MeldNode[],
    options?: InterpreterOptions
  ): Promise<StateServiceLike> {
    // Ensure we're initialized before processing
    this.ensureInitialized();

    if (!nodes) {
      throw new MeldInterpreterError(
        'No nodes provided for interpretation',
        'interpretation',
        undefined,
        { severity: ErrorSeverity.Fatal }
      );
    }

    if (!Array.isArray(nodes)) {
      throw new MeldInterpreterError(
        'Invalid nodes provided for interpretation: expected array',
        'interpretation',
        undefined,
        { severity: ErrorSeverity.Fatal }
      );
    }

    const opts = { ...DEFAULT_OPTIONS, ...options };
    let currentState: StateServiceLike;

    try {
      // Initialize state
      if (opts.initialState) {
        if (opts.mergeState) {
          // When mergeState is true, create child state from initial state
          currentState = opts.initialState.createChildState();
        } else {
          // When mergeState is false, create completely isolated state
          currentState = this.stateService!.createChildState();
        }
      } else {
        // No initial state, create fresh state
        currentState = this.stateService!.createChildState();
      }

      if (!currentState) {
        throw new MeldInterpreterError(
          'Failed to initialize state for interpretation',
          'initialization',
          undefined,
          { severity: ErrorSeverity.Fatal }
        );
      }

      if (opts.filePath) {
        currentState.setCurrentFilePath(opts.filePath);
      }

      // Take a snapshot of initial state for rollback
      const initialSnapshot = currentState.clone();
      let lastGoodState = initialSnapshot;

      logger.debug('Starting interpretation', {
        nodeCount: nodes?.length ?? 0,
        filePath: opts.filePath,
        mergeState: opts.mergeState
      });

      for (const node of nodes) {
        try {
          currentState = await this.interpretNode(node, currentState, opts);
          // Update last good state after successful interpretation
          lastGoodState = currentState.clone();
        } catch (error) {
          // Handle errors based on severity and options
          try {
            this.handleError(error instanceof Error ? error : new Error(String(error)), opts);
            // If we get here, the error was handled as a warning
            // Continue with the last good state
            currentState = lastGoodState.clone();
          } catch (fatalError) {
            // If we get here, the error was fatal and should be propagated
            // Restore to initial state before rethrowing
            if (opts.initialState && opts.mergeState) {
              // Only attempt to merge back if we have a parent and mergeState is true
              opts.initialState.mergeChildState(initialSnapshot);
            }
            throw fatalError;
          }
        }
      }

      // Merge state back to parent if requested
      if (opts.initialState && opts.mergeState) {
        opts.initialState.mergeChildState(currentState);
      }

      logger.debug('Interpretation completed successfully', {
        nodeCount: nodes?.length ?? 0,
        filePath: currentState.getCurrentFilePath(),
        finalStateNodes: currentState.getNodes()?.length ?? 0,
        mergedToParent: opts.mergeState && opts.initialState
      });

      return currentState;
    } catch (error) {
      // Wrap any unexpected errors
      const wrappedError = error instanceof Error
        ? error
        : new MeldInterpreterError(
            `Unexpected error during interpretation: ${String(error)}`,
            'interpretation',
            undefined,
            { severity: ErrorSeverity.Fatal, cause: error instanceof Error ? error : undefined }
          );
      
      throw wrappedError;
    }
  }

  async interpretNode(
    node: MeldNode,
    state: StateServiceLike,
    options?: InterpreterOptions
  ): Promise<StateServiceLike> {
    this.ensureInitialized();

    if (!node) {
      throw new MeldInterpreterError(
        'No node provided for interpretation',
        'interpretation'
      );
    }

    if (!state) {
      throw new MeldInterpreterError(
        'No state provided for node interpretation',
        'interpretation'
      );
    }

    if (!node.type) {
      throw new MeldInterpreterError(
        'Unknown node type',
        'interpretation',
        convertLocation(node.location)
      );
    }

    logger.debug('Interpreting node', {
      type: node.type,
      location: node.location,
      filePath: state.getCurrentFilePath()
    });

    const opts = { ...DEFAULT_OPTIONS, ...options };

    try {
      // Take a snapshot before processing
      const preNodeState = state.clone();
      let currentState = preNodeState;

      // Process based on node type
      switch (node.type) {
        case 'Text':
          // Create new state for text node
          const textState = currentState.clone();
          textState.addNode(node);
          currentState = textState;
          break;

        case 'CodeFence':
          // Handle CodeFence nodes similar to Text nodes - preserve them exactly
          const codeFenceState = currentState.clone();
          codeFenceState.addNode(node);
          currentState = codeFenceState;
          break;

        case 'VariableReference':
          // Handle variable reference nodes
          if ((node as any).valueType === 'text') {
            // Handle TextVar nodes similar to Text nodes
            const textVarState = currentState.clone();
            textVarState.addNode(node);
            currentState = textVarState;
          } else if ((node as any).valueType === 'data') {
            // Handle DataVar nodes similar to Text/TextVar nodes
            const dataVarState = currentState.clone();
            dataVarState.addNode(node);
            currentState = dataVarState;
          }
          break;
          
        // Note: Legacy TextVar and DataVar cases are kept for backward compatibility
        case 'TextVar' as any:
          // Handle TextVar nodes similar to Text nodes
          const textVarState = currentState.clone();
          textVarState.addNode(node);
          currentState = textVarState;
          break;

        case 'DataVar' as any:
          // Handle DataVar nodes similar to Text/TextVar nodes
          const dataVarState = currentState.clone();
          dataVarState.addNode(node);
          currentState = dataVarState;
          break;

        case 'Comment':
          // Comments are ignored during interpretation
          break;

        case 'Directive':
          // Process directive with cloned state to maintain immutability
          const directiveState = currentState.clone();
          // Add the node first to maintain order
          directiveState.addNode(node);
          if (node.type !== 'Directive' || !('directive' in node) || !node.directive) {
            throw new MeldInterpreterError(
              'Invalid directive node',
              'invalid_directive',
              convertLocation(node.location)
            );
          }
          const directiveNode = node as DirectiveNode;
          
          // Capture the original state for importing directives in transformation mode
          const originalState = state;
          const isImportDirective = directiveNode.directive.kind === 'import';
          
          // Create formatting context for consistent newline handling across service boundaries
          const formattingContext = {
            isOutputLiteral: state.isTransformationEnabled?.() || false,
            contextType: 'block' as 'inline' | 'block', // Default to block context
            nodeType: node.type,
            atLineStart: true, // Default assumption
            atLineEnd: false // Default assumption
          };
          
          // Store the directive result to check for replacement nodes
          const directiveResult = await this.callDirectiveHandleDirective(directiveNode, {
            state: directiveState,
            parentState: currentState,
            currentFilePath: state.getCurrentFilePath() ?? undefined,
            formattingContext // Add formatting context for cross-service propagation
          });
          
          // Update current state with the result
          currentState = directiveResult;
          
          // Capture any updates to formatting context from the directive handler
          if (directiveResult.getFormattingContext) {
            const updatedContext = directiveResult.getFormattingContext();
            if (updatedContext) {
              logger.debug('Formatting context updated by directive', {
                directiveKind: directiveNode.directive.kind,
                contextType: updatedContext.contextType,
                isOutputLiteral: updatedContext.isOutputLiteral
              });
            }
          }
          
          // Check if the directive handler returned a replacement node
          // This happens when the handler implements the DirectiveResult interface
          // with a replacement property
          if (directiveResult && 'replacement' in directiveResult && 'state' in directiveResult) {
            // We need to extract the replacement node and state from the result
            const result = directiveResult as unknown as { 
              replacement: MeldNode;
              state: StateServiceLike;
            };

            const replacement = result.replacement;
            const resultState = result.state;
            
            // Update current state with the result state
            currentState = resultState;
            
            // Special handling for imports in transformation mode:
            // Copy all variables from the imported file to the original state
            if (isImportDirective && 
                currentState.isTransformationEnabled && 
                currentState.isTransformationEnabled()) {
              try {
                logger.debug('Import directive in transformation mode, copying variables to original state');
                
                // Use the state variable copier utility to copy all variables
                this.stateVariableCopier.copyAllVariables(
                  currentState as unknown as IStateService, 
                  originalState as unknown as IStateService, 
                  {
                    skipExisting: false,
                    trackContextBoundary: false, // No tracking service in the interpreter
                    trackVariableCrossing: false
                  }
                );
              } catch (e) {
                logger.debug('Error copying variables from import to original state', { error: e });
              }
            }
            
            // If transformation is enabled and we have a replacement node,
            // we need to apply it to the transformed nodes
            if (currentState.isTransformationEnabled && currentState.isTransformationEnabled()) {
              logger.debug('Applying replacement node from directive handler', {
                originalType: node.type,
                replacementType: replacement.type,
                directiveKind: directiveNode.directive.kind,
                isVarReference: directiveNode.directive.kind === 'embed' && 
                               typeof directiveNode.directive.path === 'object' &&
                               directiveNode.directive.path !== null &&
                               'isVariableReference' in directiveNode.directive.path
              });
              
              // Apply the transformation by replacing the directive node with the replacement
              try {
                // Ensure we have the transformed nodes array initialized
                if (!currentState.getTransformedNodes || !currentState.getTransformedNodes()) {
                  // Initialize transformed nodes if needed
                  const originalNodes = currentState.getNodes();
                  if (originalNodes && currentState.setTransformedNodes) {
                    currentState.setTransformedNodes([...originalNodes]);
                    logger.debug('Initialized transformed nodes array', {
                      nodesCount: originalNodes.length
                    });
                  }
                }
                
                // Special handling for variable-based embed directives
                if (directiveNode.directive.kind === 'embed' && 
                    typeof directiveNode.directive.path === 'object' &&
                    directiveNode.directive.path !== null &&
                    'isVariableReference' in directiveNode.directive.path) {
                  logger.debug('Processing variable-based embed transformation', {
                    path: directiveNode.directive.path,
                    hasReplacement: !!replacement
                  });
                  
                  // Make sure all variables are copied properly
                  try {
                    this.stateVariableCopier.copyAllVariables(
                      currentState as unknown as IStateService, 
                      originalState as unknown as IStateService, 
                      {
                        skipExisting: false,
                        trackContextBoundary: false,
                        trackVariableCrossing: false
                      }
                    );
                  } catch (e) {
                    logger.debug('Error copying variables from variable-based embed to original state', { error: e });
                  }
                }
                
                // Apply the transformation
                currentState.transformNode(node, replacement as MeldNode);
                
              } catch (transformError) {
                logger.error('Error applying transformation', {
                  error: transformError,
                  directiveKind: directiveNode.directive.kind
                });
                // Continue execution despite transformation error
              }
            }
          }
          
          break;

        default:
          throw new MeldInterpreterError(
            `Unknown node type: ${node.type}`,
            'unknown_node',
            convertLocation(node.location)
          );
      }

      return currentState;
    } catch (error) {
      // Preserve MeldInterpreterError or wrap other errors
      if (error instanceof MeldInterpreterError) {
        throw error;
      }
      throw new MeldInterpreterError(
        getErrorMessage(error),
        node.type,
        convertLocation(node.location),
        {
          cause: error instanceof Error ? error : undefined,
          context: {
            nodeType: node.type,
            location: convertLocation(node.location),
            state: {
              filePath: state.getCurrentFilePath() ?? undefined
            }
          }
        }
      );
    }
  }

  async createChildContext(
    parentState: StateServiceLike,
    filePath?: string,
    options?: InterpreterOptions
  ): Promise<StateServiceLike> {
    this.ensureInitialized();

    if (!parentState) {
      throw new MeldInterpreterError(
        'No parent state provided for child context creation',
        'context_creation'
      );
    }

    try {
      // Create child state from parent
      const childState = parentState.createChildState();

      if (!childState) {
        throw new MeldInterpreterError(
          'Failed to create child state',
          'context_creation',
          undefined,
          {
            context: {
              parentFilePath: parentState.getCurrentFilePath() ?? undefined
            }
          }
        );
      }

      // Set file path if provided
      if (filePath) {
        childState.setCurrentFilePath(filePath);
      }

      logger.debug('Created child context', {
        parentFilePath: parentState.getCurrentFilePath(),
        childFilePath: filePath,
        hasParent: true
      });

      return childState;
    } catch (error) {
      logger.error('Failed to create child context', {
        parentFilePath: parentState.getCurrentFilePath(),
        childFilePath: filePath,
        error
      });

      // Preserve MeldInterpreterError or wrap other errors
      if (error instanceof MeldInterpreterError) {
        throw error;
      }
      throw new MeldInterpreterError(
        getErrorMessage(error),
        'context_creation',
        undefined,
        {
          cause: error instanceof Error ? error : undefined,
          context: {
            parentFilePath: parentState.getCurrentFilePath() ?? undefined,
            childFilePath: filePath,
            state: {
              filePath: parentState.getCurrentFilePath() ?? undefined
            }
          }
        }
      );
    }
  }
} 
```
    <ServicesPipelineInterpreterserviceIinterpreterserviceTs>
```javascript
import type { MeldNode } from '@core/syntax/types/index.js';
import type { DirectiveServiceLike, StateServiceLike } from '@core/shared-service-types.js';
import type { MeldError } from '@core/errors/MeldError.js';

/**
 * Error handler function type for handling Meld errors during interpretation.
 * 
 * @param error - The error to handle
 */
interface ErrorHandler {
  (error: MeldError): void;
}

/**
 * Options for configuring the interpreter behavior.
 */
interface InterpreterOptions {
  /**
   * Initial state to use for interpretation.
   * If not provided, a new state will be created.
   */
  initialState?: StateServiceLike;

  /**
   * Current file path for error reporting and path resolution.
   */
  filePath?: string;

  /**
   * Whether to merge the final state back to the parent.
   * @default true
   */
  mergeState?: boolean;

  /**
   * List of variables to import.
   * If undefined, all variables are imported.
   * If empty array, no variables are imported.
   */
  importFilter?: string[];

  /**
   * Whether to run in strict mode.
   * In strict mode, all errors throw.
   * In permissive mode, recoverable errors become warnings.
   * @default true
   */
  strict?: boolean;

  /**
   * Custom error handler.
   * If provided, will be called for all errors.
   * In permissive mode, recoverable errors will be passed to this handler instead of throwing.
   */
  errorHandler?: ErrorHandler;
}

/**
 * Service responsible for interpreting Meld AST nodes and orchestrating the processing pipeline.
 * Acts as the core orchestration layer for the Meld execution lifecycle.
 * 
 * @remarks
 * The InterpreterService is the primary entry point for processing Meld content.
 * It coordinates the entire pipeline, from directive handling to state management.
 * It maintains contextual information during execution and manages error handling,
 * state transitions, and transformation tracking.
 * 
 * Dependencies:
 * - DirectiveServiceLike: For processing directive nodes
 * - StateServiceLike: For maintaining state during interpretation
 */
interface IInterpreterService {
  /**
   * Check if this service can handle transformations.
   * 
   * @returns true if transformations are supported, false otherwise
   */
  canHandleTransformations(): boolean;

  /**
   * Initialize the InterpreterService with required dependencies.
   * 
   * @param directiveService - Service for handling directives
   * @param stateService - Service for maintaining state
   */
  initialize(
    directiveService: DirectiveServiceLike,
    stateService: StateServiceLike
  ): void;

  /**
   * Interpret a sequence of Meld nodes.
   * Processes each node in order, updating state as necessary.
   * 
   * @param nodes - The nodes to interpret
   * @param options - Optional configuration options
   * @returns The final state after interpretation
   * @throws {MeldInterpreterError} If interpretation fails
   * 
   * @example
   * ```ts
   * const content = '@text greeting = "Hello, world!"';
   * const nodes = await parserService.parse(content);
   * const state = await interpreterService.interpret(nodes, {
   *   filePath: 'example.meld',
   *   strict: true
   * });
   * ```
   */
  interpret(
    nodes: MeldNode[],
    options?: InterpreterOptions
  ): Promise<StateServiceLike>;

  /**
   * Interpret a single Meld node.
   * 
   * @param node - The node to interpret
   * @param state - The current state
   * @param options - Optional configuration options
   * @returns The state after interpretation
   * @throws {MeldInterpreterError} If interpretation fails
   */
  interpretNode(
    node: MeldNode,
    state: StateServiceLike,
    options?: InterpreterOptions
  ): Promise<StateServiceLike>;

  /**
   * Create a new interpreter context with a child state.
   * Useful for nested interpretation (import/embed).
   * 
   * @param parentState - The parent state to inherit from
   * @param filePath - Optional file path for the child context
   * @param options - Optional configuration options
   * @returns A child state initialized for interpretation
   * 
   * @example
   * ```ts
   * // Create a child context for processing an imported file
   * const childState = await interpreterService.createChildContext(
   *   parentState,
   *   'imported.meld',
   *   { importFilter: ['greeting', 'username'] }
   * );
   * ```
   */
  createChildContext(
    parentState: StateServiceLike,
    filePath?: string,
    options?: InterpreterOptions
  ): Promise<StateServiceLike>;
} 

export type { ErrorHandler, InterpreterOptions, IInterpreterService }; 
```
    </ServicesPipelineInterpreterserviceIinterpreterserviceTs>
  </ValidationCriteria>
  <TaskProposeJustifyDefineTypeImprovementsForYourCode>
Examine your service&apos;s code (`
    <ServicesPipelineInterpreterserviceInterpreterserviceTs>
```javascript
import type { MeldNode, SourceLocation, DirectiveNode } from '@core/syntax/types/index.js';
import { interpreterLogger as logger } from '@core/utils/logger.js';
import type { IInterpreterService, InterpreterOptions } from '@services/pipeline/InterpreterService/IInterpreterService.js';
import type { DirectiveServiceLike, StateServiceLike, InterpreterServiceLike } from '@core/shared-service-types.js';
import { MeldInterpreterError, type InterpreterLocation } from '@core/errors/MeldInterpreterError.js';
import { MeldError, ErrorSeverity } from '@core/errors/MeldError.js';
import { StateVariableCopier } from '@services/state/utilities/StateVariableCopier.js';
import type { IStateService } from '@services/state/StateService/IStateService.js';
import { Service } from '@core/ServiceProvider.js';
import { inject, injectable, delay, container } from 'tsyringe';
import { DirectiveServiceClientFactory } from '@services/pipeline/DirectiveService/factories/DirectiveServiceClientFactory.js';
import { IDirectiveServiceClient } from '@services/pipeline/DirectiveService/interfaces/IDirectiveServiceClient.js';

const DEFAULT_OPTIONS: Required<Omit<InterpreterOptions, 'initialState' | 'errorHandler'>> = {
  filePath: '',
  mergeState: true,
  importFilter: [],
  strict: true
};

function convertLocation(loc?: SourceLocation): InterpreterLocation | undefined {
  if (!loc) return undefined;
  return {
    line: loc.start.line,
    column: loc.start.column,
  };
}

function getErrorMessage(error: unknown): string {
  if (error instanceof Error) return error.message;
  if (typeof error === 'string') return error;
  return 'Unknown error';
}

/**
 * Service for interpreting Meld AST and executing directives
 */
@injectable()
@Service({
  description: 'Service for interpreting Meld AST nodes and executing directives',
  dependencies: [
    { token: 'DirectiveServiceClientFactory', name: 'directiveServiceClientFactory' },
    { token: 'IStateService', name: 'stateService' }
  ]
})
export class InterpreterService implements IInterpreterService, InterpreterServiceLike {
  private directiveService?: DirectiveServiceLike; // Legacy reference
  private directiveClient?: IDirectiveServiceClient; // Client from factory pattern
  private directiveClientFactory?: DirectiveServiceClientFactory;
  private stateService?: StateServiceLike;
  private initialized = false;
  private stateVariableCopier = new StateVariableCopier();
  private initializationPromise: Promise<void> | null = null;
  private factoryInitialized: boolean = false;

  /**
   * Creates a new InterpreterService
   * 
   * @param directiveServiceClientFactory - Factory for creating directive service clients
   * @param stateService - Service for state management
   */
  constructor(
    @inject('DirectiveServiceClientFactory') directiveServiceClientFactory?: DirectiveServiceClientFactory,
    @inject('IStateService') stateService?: StateServiceLike
  ) {
    this.directiveClientFactory = directiveServiceClientFactory;
    this.stateService = stateService;
    
    logger.debug('InterpreterService constructor', {
      hasDirectiveFactory: !!this.directiveClientFactory,
      hasStateService: !!this.stateService
    });
    
    // If we have dependencies, initialize
    if (this.directiveClientFactory && this.stateService) {
      // Create a promise that resolves when initialization completes
      this.initializationPromise = new Promise<void>((resolve) => {
        this.initializeDirectiveClient();
        this.initialized = true;
        logger.debug('InterpreterService initialized via DI');
        resolve();
      });
    }
  }

  /**
   * Initialize the directiveClient using the factory
   */
  private initializeDirectiveClient(): void {
    if (!this.directiveClientFactory) {
      return;
    }
    
    try {
      this.directiveClient = this.directiveClientFactory.createClient();
      logger.debug('Successfully created DirectiveServiceClient using factory');
    } catch (error) {
      logger.warn('Failed to create DirectiveServiceClient', { error });
      this.directiveClient = undefined;
    }
  }

  /**
   * Lazily initialize the DirectiveServiceClient factory
   * This is called only when needed to avoid circular dependencies
   */
  private ensureFactoryInitialized(): void {
    if (this.factoryInitialized) {
      return;
    }
    
    this.factoryInitialized = true;
    try {
      this.directiveClientFactory = container.resolve<DirectiveServiceClientFactory>('DirectiveServiceClientFactory');
      this.initializeDirectiveClient();
    } catch (error) {
      logger.warn('Failed to resolve DirectiveServiceClientFactory', { error });
    }
  }

  /**
   * Ensure the service is initialized before use
   * @private
   */
  private ensureInitialized(): void {
    if (!this.initialized) {
      throw new MeldInterpreterError(
        'InterpreterService must be initialized before use',
        'initialization',
        undefined, // No location information
        { severity: ErrorSeverity.Fatal }
      );
    }
  }

  /**
   * Calls the directive service to handle a directive node
   * Uses the client if available, falls back to direct service reference
   */
  private async callDirectiveHandleDirective(node: DirectiveNode, context: any): Promise<any> {
    this.ensureFactoryInitialized();
    
    if (this.directiveClient && this.directiveClient.handleDirective) {
      try {
        return await this.directiveClient.handleDirective(node, context);
      } catch (error) {
        logger.warn('Error using directiveClient.handleDirective, falling back to direct service', { error });
      }
    }
    
    if (this.directiveService) {
      return await this.directiveService.handleDirective(node, context);
    }
    
    throw new MeldInterpreterError(
      'No directive service available to handle directive',
      'directive_handling',
      undefined, // No location information
      { severity: ErrorSeverity.Fatal }
    );
  }

  /**
   * Calls the directive service to check if it supports a directive kind
   * Uses the client if available, falls back to direct service reference
   */
  private callDirectiveSupportsDirective(kind: string): boolean {
    this.ensureFactoryInitialized();
    
    if (this.directiveClient) {
      try {
        return this.directiveClient.supportsDirective(kind);
      } catch (error) {
        logger.warn('Error using directiveClient.supportsDirective, falling back to direct service', { error });
      }
    }
    
    if (this.directiveService) {
      return this.directiveService.supportsDirective(kind);
    }
    
    return false;
  }

  /**
   * Returns whether this service can handle transformations
   * Required by the pipeline validation system
   */
  public canHandleTransformations(): boolean {
    return true;
  }

  /**
   * Explicitly initialize the service with all required dependencies.
   * @deprecated This method is maintained for backward compatibility. 
   * The service is automatically initialized via dependency injection.
   */
  initialize(
    directiveService: DirectiveServiceLike,
    stateService: StateServiceLike
  ): void {
    // Store the direct reference for backward compatibility
    this.directiveService = directiveService;
    this.stateService = stateService;
    this.initialized = true;
    this.initializationPromise = Promise.resolve();
    logger.debug('InterpreterService initialized manually');
  }

  /**
   * Handle errors based on severity and options
   * In strict mode, all errors throw
   * In permissive mode, recoverable errors become warnings
   */
  private handleError(error: Error, options: Required<Omit<InterpreterOptions, 'initialState' | 'errorHandler'>> & Pick<InterpreterOptions, 'errorHandler'>): void {
    // If it's not a MeldError, wrap it
    const meldError = error instanceof MeldError 
      ? error 
      : MeldError.wrap(error);
    
    logger.error('Error in InterpreterService', { error: meldError });
    
    // In strict mode, or if it's a fatal error, throw it
    if (options.strict || !meldError.canBeWarning()) {
      throw meldError;
    }
    
    // In permissive mode with recoverable errors, use the error handler or log a warning
    if (options.errorHandler) {
      options.errorHandler(meldError);
    } else {
      logger.warn(`Warning: ${meldError.message}`, {
        code: meldError.code,
        filePath: meldError.filePath,
        severity: meldError.severity
      });
    }
  }

  async interpret(
    nodes: MeldNode[],
    options?: InterpreterOptions
  ): Promise<StateServiceLike> {
    // Ensure we're initialized before processing
    this.ensureInitialized();

    if (!nodes) {
      throw new MeldInterpreterError(
        'No nodes provided for interpretation',
        'interpretation',
        undefined,
        { severity: ErrorSeverity.Fatal }
      );
    }

    if (!Array.isArray(nodes)) {
      throw new MeldInterpreterError(
        'Invalid nodes provided for interpretation: expected array',
        'interpretation',
        undefined,
        { severity: ErrorSeverity.Fatal }
      );
    }

    const opts = { ...DEFAULT_OPTIONS, ...options };
    let currentState: StateServiceLike;

    try {
      // Initialize state
      if (opts.initialState) {
        if (opts.mergeState) {
          // When mergeState is true, create child state from initial state
          currentState = opts.initialState.createChildState();
        } else {
          // When mergeState is false, create completely isolated state
          currentState = this.stateService!.createChildState();
        }
      } else {
        // No initial state, create fresh state
        currentState = this.stateService!.createChildState();
      }

      if (!currentState) {
        throw new MeldInterpreterError(
          'Failed to initialize state for interpretation',
          'initialization',
          undefined,
          { severity: ErrorSeverity.Fatal }
        );
      }

      if (opts.filePath) {
        currentState.setCurrentFilePath(opts.filePath);
      }

      // Take a snapshot of initial state for rollback
      const initialSnapshot = currentState.clone();
      let lastGoodState = initialSnapshot;

      logger.debug('Starting interpretation', {
        nodeCount: nodes?.length ?? 0,
        filePath: opts.filePath,
        mergeState: opts.mergeState
      });

      for (const node of nodes) {
        try {
          currentState = await this.interpretNode(node, currentState, opts);
          // Update last good state after successful interpretation
          lastGoodState = currentState.clone();
        } catch (error) {
          // Handle errors based on severity and options
          try {
            this.handleError(error instanceof Error ? error : new Error(String(error)), opts);
            // If we get here, the error was handled as a warning
            // Continue with the last good state
            currentState = lastGoodState.clone();
          } catch (fatalError) {
            // If we get here, the error was fatal and should be propagated
            // Restore to initial state before rethrowing
            if (opts.initialState && opts.mergeState) {
              // Only attempt to merge back if we have a parent and mergeState is true
              opts.initialState.mergeChildState(initialSnapshot);
            }
            throw fatalError;
          }
        }
      }

      // Merge state back to parent if requested
      if (opts.initialState && opts.mergeState) {
        opts.initialState.mergeChildState(currentState);
      }

      logger.debug('Interpretation completed successfully', {
        nodeCount: nodes?.length ?? 0,
        filePath: currentState.getCurrentFilePath(),
        finalStateNodes: currentState.getNodes()?.length ?? 0,
        mergedToParent: opts.mergeState && opts.initialState
      });

      return currentState;
    } catch (error) {
      // Wrap any unexpected errors
      const wrappedError = error instanceof Error
        ? error
        : new MeldInterpreterError(
            `Unexpected error during interpretation: ${String(error)}`,
            'interpretation',
            undefined,
            { severity: ErrorSeverity.Fatal, cause: error instanceof Error ? error : undefined }
          );
      
      throw wrappedError;
    }
  }

  async interpretNode(
    node: MeldNode,
    state: StateServiceLike,
    options?: InterpreterOptions
  ): Promise<StateServiceLike> {
    this.ensureInitialized();

    if (!node) {
      throw new MeldInterpreterError(
        'No node provided for interpretation',
        'interpretation'
      );
    }

    if (!state) {
      throw new MeldInterpreterError(
        'No state provided for node interpretation',
        'interpretation'
      );
    }

    if (!node.type) {
      throw new MeldInterpreterError(
        'Unknown node type',
        'interpretation',
        convertLocation(node.location)
      );
    }

    logger.debug('Interpreting node', {
      type: node.type,
      location: node.location,
      filePath: state.getCurrentFilePath()
    });

    const opts = { ...DEFAULT_OPTIONS, ...options };

    try {
      // Take a snapshot before processing
      const preNodeState = state.clone();
      let currentState = preNodeState;

      // Process based on node type
      switch (node.type) {
        case 'Text':
          // Create new state for text node
          const textState = currentState.clone();
          textState.addNode(node);
          currentState = textState;
          break;

        case 'CodeFence':
          // Handle CodeFence nodes similar to Text nodes - preserve them exactly
          const codeFenceState = currentState.clone();
          codeFenceState.addNode(node);
          currentState = codeFenceState;
          break;

        case 'VariableReference':
          // Handle variable reference nodes
          if ((node as any).valueType === 'text') {
            // Handle TextVar nodes similar to Text nodes
            const textVarState = currentState.clone();
            textVarState.addNode(node);
            currentState = textVarState;
          } else if ((node as any).valueType === 'data') {
            // Handle DataVar nodes similar to Text/TextVar nodes
            const dataVarState = currentState.clone();
            dataVarState.addNode(node);
            currentState = dataVarState;
          }
          break;
          
        // Note: Legacy TextVar and DataVar cases are kept for backward compatibility
        case 'TextVar' as any:
          // Handle TextVar nodes similar to Text nodes
          const textVarState = currentState.clone();
          textVarState.addNode(node);
          currentState = textVarState;
          break;

        case 'DataVar' as any:
          // Handle DataVar nodes similar to Text/TextVar nodes
          const dataVarState = currentState.clone();
          dataVarState.addNode(node);
          currentState = dataVarState;
          break;

        case 'Comment':
          // Comments are ignored during interpretation
          break;

        case 'Directive':
          // Process directive with cloned state to maintain immutability
          const directiveState = currentState.clone();
          // Add the node first to maintain order
          directiveState.addNode(node);
          if (node.type !== 'Directive' || !('directive' in node) || !node.directive) {
            throw new MeldInterpreterError(
              'Invalid directive node',
              'invalid_directive',
              convertLocation(node.location)
            );
          }
          const directiveNode = node as DirectiveNode;
          
          // Capture the original state for importing directives in transformation mode
          const originalState = state;
          const isImportDirective = directiveNode.directive.kind === 'import';
          
          // Create formatting context for consistent newline handling across service boundaries
          const formattingContext = {
            isOutputLiteral: state.isTransformationEnabled?.() || false,
            contextType: 'block' as 'inline' | 'block', // Default to block context
            nodeType: node.type,
            atLineStart: true, // Default assumption
            atLineEnd: false // Default assumption
          };
          
          // Store the directive result to check for replacement nodes
          const directiveResult = await this.callDirectiveHandleDirective(directiveNode, {
            state: directiveState,
            parentState: currentState,
            currentFilePath: state.getCurrentFilePath() ?? undefined,
            formattingContext // Add formatting context for cross-service propagation
          });
          
          // Update current state with the result
          currentState = directiveResult;
          
          // Capture any updates to formatting context from the directive handler
          if (directiveResult.getFormattingContext) {
            const updatedContext = directiveResult.getFormattingContext();
            if (updatedContext) {
              logger.debug('Formatting context updated by directive', {
                directiveKind: directiveNode.directive.kind,
                contextType: updatedContext.contextType,
                isOutputLiteral: updatedContext.isOutputLiteral
              });
            }
          }
          
          // Check if the directive handler returned a replacement node
          // This happens when the handler implements the DirectiveResult interface
          // with a replacement property
          if (directiveResult && 'replacement' in directiveResult && 'state' in directiveResult) {
            // We need to extract the replacement node and state from the result
            const result = directiveResult as unknown as { 
              replacement: MeldNode;
              state: StateServiceLike;
            };

            const replacement = result.replacement;
            const resultState = result.state;
            
            // Update current state with the result state
            currentState = resultState;
            
            // Special handling for imports in transformation mode:
            // Copy all variables from the imported file to the original state
            if (isImportDirective && 
                currentState.isTransformationEnabled && 
                currentState.isTransformationEnabled()) {
              try {
                logger.debug('Import directive in transformation mode, copying variables to original state');
                
                // Use the state variable copier utility to copy all variables
                this.stateVariableCopier.copyAllVariables(
                  currentState as unknown as IStateService, 
                  originalState as unknown as IStateService, 
                  {
                    skipExisting: false,
                    trackContextBoundary: false, // No tracking service in the interpreter
                    trackVariableCrossing: false
                  }
                );
              } catch (e) {
                logger.debug('Error copying variables from import to original state', { error: e });
              }
            }
            
            // If transformation is enabled and we have a replacement node,
            // we need to apply it to the transformed nodes
            if (currentState.isTransformationEnabled && currentState.isTransformationEnabled()) {
              logger.debug('Applying replacement node from directive handler', {
                originalType: node.type,
                replacementType: replacement.type,
                directiveKind: directiveNode.directive.kind,
                isVarReference: directiveNode.directive.kind === 'embed' && 
                               typeof directiveNode.directive.path === 'object' &&
                               directiveNode.directive.path !== null &&
                               'isVariableReference' in directiveNode.directive.path
              });
              
              // Apply the transformation by replacing the directive node with the replacement
              try {
                // Ensure we have the transformed nodes array initialized
                if (!currentState.getTransformedNodes || !currentState.getTransformedNodes()) {
                  // Initialize transformed nodes if needed
                  const originalNodes = currentState.getNodes();
                  if (originalNodes && currentState.setTransformedNodes) {
                    currentState.setTransformedNodes([...originalNodes]);
                    logger.debug('Initialized transformed nodes array', {
                      nodesCount: originalNodes.length
                    });
                  }
                }
                
                // Special handling for variable-based embed directives
                if (directiveNode.directive.kind === 'embed' && 
                    typeof directiveNode.directive.path === 'object' &&
                    directiveNode.directive.path !== null &&
                    'isVariableReference' in directiveNode.directive.path) {
                  logger.debug('Processing variable-based embed transformation', {
                    path: directiveNode.directive.path,
                    hasReplacement: !!replacement
                  });
                  
                  // Make sure all variables are copied properly
                  try {
                    this.stateVariableCopier.copyAllVariables(
                      currentState as unknown as IStateService, 
                      originalState as unknown as IStateService, 
                      {
                        skipExisting: false,
                        trackContextBoundary: false,
                        trackVariableCrossing: false
                      }
                    );
                  } catch (e) {
                    logger.debug('Error copying variables from variable-based embed to original state', { error: e });
                  }
                }
                
                // Apply the transformation
                currentState.transformNode(node, replacement as MeldNode);
                
              } catch (transformError) {
                logger.error('Error applying transformation', {
                  error: transformError,
                  directiveKind: directiveNode.directive.kind
                });
                // Continue execution despite transformation error
              }
            }
          }
          
          break;

        default:
          throw new MeldInterpreterError(
            `Unknown node type: ${node.type}`,
            'unknown_node',
            convertLocation(node.location)
          );
      }

      return currentState;
    } catch (error) {
      // Preserve MeldInterpreterError or wrap other errors
      if (error instanceof MeldInterpreterError) {
        throw error;
      }
      throw new MeldInterpreterError(
        getErrorMessage(error),
        node.type,
        convertLocation(node.location),
        {
          cause: error instanceof Error ? error : undefined,
          context: {
            nodeType: node.type,
            location: convertLocation(node.location),
            state: {
              filePath: state.getCurrentFilePath() ?? undefined
            }
          }
        }
      );
    }
  }

  async createChildContext(
    parentState: StateServiceLike,
    filePath?: string,
    options?: InterpreterOptions
  ): Promise<StateServiceLike> {
    this.ensureInitialized();

    if (!parentState) {
      throw new MeldInterpreterError(
        'No parent state provided for child context creation',
        'context_creation'
      );
    }

    try {
      // Create child state from parent
      const childState = parentState.createChildState();

      if (!childState) {
        throw new MeldInterpreterError(
          'Failed to create child state',
          'context_creation',
          undefined,
          {
            context: {
              parentFilePath: parentState.getCurrentFilePath() ?? undefined
            }
          }
        );
      }

      // Set file path if provided
      if (filePath) {
        childState.setCurrentFilePath(filePath);
      }

      logger.debug('Created child context', {
        parentFilePath: parentState.getCurrentFilePath(),
        childFilePath: filePath,
        hasParent: true
      });

      return childState;
    } catch (error) {
      logger.error('Failed to create child context', {
        parentFilePath: parentState.getCurrentFilePath(),
        childFilePath: filePath,
        error
      });

      // Preserve MeldInterpreterError or wrap other errors
      if (error instanceof MeldInterpreterError) {
        throw error;
      }
      throw new MeldInterpreterError(
        getErrorMessage(error),
        'context_creation',
        undefined,
        {
          cause: error instanceof Error ? error : undefined,
          context: {
            parentFilePath: parentState.getCurrentFilePath() ?? undefined,
            childFilePath: filePath,
            state: {
              filePath: parentState.getCurrentFilePath() ?? undefined
            }
          }
        }
      );
    }
  }
} 
```
    </ServicesPipelineInterpreterserviceInterpreterserviceTs>
    <ServicesPipelineInterpreterserviceIinterpreterserviceTs>
```javascript
import type { MeldNode } from '@core/syntax/types/index.js';
import type { DirectiveServiceLike, StateServiceLike } from '@core/shared-service-types.js';
import type { MeldError } from '@core/errors/MeldError.js';

/**
 * Error handler function type for handling Meld errors during interpretation.
 * 
 * @param error - The error to handle
 */
interface ErrorHandler {
  (error: MeldError): void;
}

/**
 * Options for configuring the interpreter behavior.
 */
interface InterpreterOptions {
  /**
   * Initial state to use for interpretation.
   * If not provided, a new state will be created.
   */
  initialState?: StateServiceLike;

  /**
   * Current file path for error reporting and path resolution.
   */
  filePath?: string;

  /**
   * Whether to merge the final state back to the parent.
   * @default true
   */
  mergeState?: boolean;

  /**
   * List of variables to import.
   * If undefined, all variables are imported.
   * If empty array, no variables are imported.
   */
  importFilter?: string[];

  /**
   * Whether to run in strict mode.
   * In strict mode, all errors throw.
   * In permissive mode, recoverable errors become warnings.
   * @default true
   */
  strict?: boolean;

  /**
   * Custom error handler.
   * If provided, will be called for all errors.
   * In permissive mode, recoverable errors will be passed to this handler instead of throwing.
   */
  errorHandler?: ErrorHandler;
}

/**
 * Service responsible for interpreting Meld AST nodes and orchestrating the processing pipeline.
 * Acts as the core orchestration layer for the Meld execution lifecycle.
 * 
 * @remarks
 * The InterpreterService is the primary entry point for processing Meld content.
 * It coordinates the entire pipeline, from directive handling to state management.
 * It maintains contextual information during execution and manages error handling,
 * state transitions, and transformation tracking.
 * 
 * Dependencies:
 * - DirectiveServiceLike: For processing directive nodes
 * - StateServiceLike: For maintaining state during interpretation
 */
interface IInterpreterService {
  /**
   * Check if this service can handle transformations.
   * 
   * @returns true if transformations are supported, false otherwise
   */
  canHandleTransformations(): boolean;

  /**
   * Initialize the InterpreterService with required dependencies.
   * 
   * @param directiveService - Service for handling directives
   * @param stateService - Service for maintaining state
   */
  initialize(
    directiveService: DirectiveServiceLike,
    stateService: StateServiceLike
  ): void;

  /**
   * Interpret a sequence of Meld nodes.
   * Processes each node in order, updating state as necessary.
   * 
   * @param nodes - The nodes to interpret
   * @param options - Optional configuration options
   * @returns The final state after interpretation
   * @throws {MeldInterpreterError} If interpretation fails
   * 
   * @example
   * ```ts
   * const content = '@text greeting = "Hello, world!"';
   * const nodes = await parserService.parse(content);
   * const state = await interpreterService.interpret(nodes, {
   *   filePath: 'example.meld',
   *   strict: true
   * });
   * ```
   */
  interpret(
    nodes: MeldNode[],
    options?: InterpreterOptions
  ): Promise<StateServiceLike>;

  /**
   * Interpret a single Meld node.
   * 
   * @param node - The node to interpret
   * @param state - The current state
   * @param options - Optional configuration options
   * @returns The state after interpretation
   * @throws {MeldInterpreterError} If interpretation fails
   */
  interpretNode(
    node: MeldNode,
    state: StateServiceLike,
    options?: InterpreterOptions
  ): Promise<StateServiceLike>;

  /**
   * Create a new interpreter context with a child state.
   * Useful for nested interpretation (import/embed).
   * 
   * @param parentState - The parent state to inherit from
   * @param filePath - Optional file path for the child context
   * @param options - Optional configuration options
   * @returns A child state initialized for interpretation
   * 
   * @example
   * ```ts
   * // Create a child context for processing an imported file
   * const childState = await interpreterService.createChildContext(
   *   parentState,
   *   'imported.meld',
   *   { importFilter: ['greeting', 'username'] }
   * );
   * ```
   */
  createChildContext(
    parentState: StateServiceLike,
    filePath?: string,
    options?: InterpreterOptions
  ): Promise<StateServiceLike>;
} 

export type { ErrorHandler, InterpreterOptions, IInterpreterService }; 
```
@define` directives, command execution, parameter handling, or state related to command definitions.
1. **Identify areas of complexity, manual validation, or edge-case handling in your code related to this directive.**
2. **Propose specific TypeScript type features** (e.g., required properties, discriminated unions, literal types) for  that would simplify or eliminate these complexities.
3. **Crucially, make a clear case for *why* each proposed feature is needed.** Explain how it would tangibly benefit the InterpreterCore service by making the code simpler, safer, or easier to maintain.
**IMPORTANT NOTE:** Structure your response clearly. When including code examples, use inline backticks () or standard Markdown indented code blocks (4 spaces). **Do not use nested triple-backtick () code fences within your response.**
    </ServicesPipelineInterpreterserviceIinterpreterserviceTs>
  </TaskProposeJustifyDefineTypeImprovementsForYourCode>
</DependencyInjectionInMeld>