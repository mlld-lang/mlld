<SimplifyVariableresolutionCodeWithStrongerDefineTypes>
  <Context>
You are the lead developer for the **VariableResolution** service.
The Meld language is improving its TypeScript type system for the  directive.
**CRITICAL NOTE:** The &apos;define&apos; directive in Meld **exclusively** embeds *text content* from files or *string values* from variables. It does **not** handle multimedia or web content. Base your analysis ONLY on this Meld-specific definition.
Review the following:
1. **Overall Architecture:**
    <DocsDevDiArchitectureMd>
```javascript
# Meld Architecture

## INTRODUCTION

Meld is a specialized, directive-based scripting language designed for embedding small "@directives" inside an otherwise plain text (e.g., Markdown-like) document. The code in this repository implements:

• Meld grammar rules and token types (e.g., text directives, path directives, data directives).  
• The parsing layer that converts Meld content into an AST (Abstract Syntax Tree).  
• A directive interpretation layer that processes these AST nodes and manipulates internal "states" to store variables and more.  
• A resolution layer to handle variable references, path expansions, data manipulations, etc.  
• Testing utilities and an in-memory FS (memfs) to simulate filesystems for thorough testing.  

The main idea:  
1. Meld code is parsed to an AST.  
2. Each directive node is validated and interpreted, updating a shared "state" (variables, data structures, commands, etc.).  
3. Optional transformations (e.g., output formatting) generate final representations (Markdown, LLM-friendly XML, etc.).  

Below is an overview of the directory and service-level architecture, referencing code from this codebase.

## DEPENDENCY INJECTION ARCHITECTURE

Meld uses TSyringe for dependency injection, which brings the following benefits:

• Decoupled service creation from service usage
• Simplified testing with mock injections
• Clear dependencies between services
• Centralized service configuration

### DI Core Concepts

1. **Service Registration**: Services are registered with the DI container via the `@Service()` decorator, which handles automatic registration with the container.

2. **Dependency Injection**: Services declare their dependencies using constructor parameters with the `@inject()` decorator, allowing the container to provide the correct dependencies.

3. **Container Resolution**: The container automatically resolves dependencies when creating instances, managing the entire dependency tree.

4. **Interface-based Design**: Services follow an interface-first design pattern, where each service implements an interface (e.g., `IFileSystemService`) and dependencies are declared using interface tokens.

5. **Circular Dependency Handling**: Circular dependencies are managed through the Client Factory pattern, which creates focused client interfaces for specific service interactions.

### DI Configuration

The core DI configuration is managed in `core/di-config.ts`, which:

1. Configures the global container
2. Registers core services and client factories
3. Connects services via their respective client interfaces
4. Registers remaining services using class registrations

## DIRECTORY & FILE STRUCTURE

At a high level, the project is arranged as follows (select key entries included):

project-root/  
 ├─ api/                    ← High-level API and tests  
 │   ├─ api.test.ts  
 │   └─ index.ts  
 ├─ bin/                    ← CLI entry point  
 │   └─ meld.ts  
 ├─ cli/                    ← CLI implementation  
 │   ├─ cli.test.ts  
 │   └─ index.ts  
 ├─ core/                   ← Core utilities and types  
 │   ├─ config/            ← Configuration (logging, etc.)  
 │   ├─ errors/            ← Error class definitions  
 │   │   ├─ MeldError.ts
 │   │   ├─ ServiceInitializationError.ts   ← Service initialization errors
 │   │   └─ ... other errors
 │   ├─ types/             ← Core type definitions  
 │   │   ├─ dependencies.ts  ← Service dependency definitions
 │   │   └─ index.ts
 │   ├─ utils/             ← Logging and utility modules  
 │   │   ├─ logger.ts
 │   │   ├─ serviceValidation.ts  ← Service validation utilities
 │   │   └─ simpleLogger.ts
 │   └─ ServiceProvider.ts ← DI service provider & helpers
 ├─ services/              ← Core service implementations  
 │   ├─ pipeline/          ← Main transformation pipeline  
 │   │   ├─ ParserService/     ← Initial parsing  
 │   │   ├─ InterpreterService/← Pipeline orchestration  
 │   │   ├─ DirectiveService/  ← Directive handling  
 │   │   │   ├─ handlers/  
 │   │   │   │   ├─ definition/   ← Handlers for definition directives  
 │   │   │   │   └─ execution/    ← Handlers for execution directives  
 │   │   │   └─ errors/  
 │   │   └─ OutputService/    ← Final output generation  
 │   ├─ state/             ← State management  
 │   │   ├─ StateService/      ← Core state management  
 │   │   └─ StateEventService/ ← Core event system  
 │   ├─ resolution/        ← Resolution and validation  
 │   │   ├─ ResolutionService/ ← Variable/path resolution  
 │   │   ├─ ValidationService/ ← Directive validation  
 │   │   └─ CircularityService/← Circular dependency detection  
 │   ├─ fs/                ← File system operations  
 │   │   ├─ FileSystemService/ ← File operations  
 │   │   ├─ PathService/      ← Path handling  
 │   │   └─ PathOperationsService/ ← Path utilities  
 │   └─ cli/               ← Command line interface  
 │       └─ CLIService/    ← CLI entry point  
 ├─ tests/                  ← Test infrastructure   
 │   ├─ fixtures/          ← Test fixture data  
 │   ├─ mocks/             ← Test mock implementations  
 │   └─ utils/             ← Test utilities and helpers  
 │       ├─ debug/         ← Test debug utilities  
 │       │   ├─ StateDebuggerService/  
 │       │   ├─ StateVisualizationService/  
 │       │   ├─ StateHistoryService/  
 │       │   └─ StateTrackingService/  
 │       ├─ di/            ← DI test utilities
 │       │   ├─ TestContainerHelper.ts ← Container management for tests
 │       │   └─ TestContextDI.ts ← DI-enabled test context
 │       ├─ FixtureManager.ts  
 │       ├─ MemfsTestFileSystem.ts  
 │       ├─ ProjectBuilder.ts  
 │       ├─ TestContext.ts  
 │       └─ TestSnapshot.ts  
 ├─ docs/                   ← Documentation  
 ├─ package.json  
 ├─ tsconfig.json  
 ├─ tsup.config.ts  
 └─ vitest.config.ts  

Key subfolders:  
• services/pipeline/: Core transformation pipeline services (parsing, interpretation, directives, output)  
• services/state/: State management and event services  
• services/resolution/: Resolution, validation, and circularity detection services  
• services/fs/: File system, path handling, and operations services  
• services/cli/: Command line interface services  
• core/: Central types, errors, utilities, and DI service provider used throughout the codebase  
• tests/utils/: Test infrastructure including debug utilities, memfs implementation, fixture management, and test helpers  
• tests/utils/di/: DI-specific test utilities
• api/: High-level public API for using Meld programmatically  
• cli/: Command line interface for Meld  

## CORE LIBRARIES & THEIR ROLE

### meld-ast 
   • parse(content: string): MeldNode[]  
   • Basic parsing that identifies directives vs. text nodes.  
   • Produces an AST which other services manipulate.  

### llmxml 
   • Converts content to an LLM-friendly XML format or can parse partially.  
   • OutputService may call it if user requests "llm" format.  

### meld-spec
   • Contains interface definitions for MeldNode, DirectiveNode, TextNode, etc.  
   • Contains directive kind enumerations.  

### tsyringe
   • Provides the dependency injection container
   • Manages service creation and resolution
   • Handles dependencies between services

## HIGH-LEVEL FLOW

Below is a simplified flow of how Meld content is processed:

   ┌─────────────────────────────┐
   │   Meld Source Document      │
   └─────────────────────────────┘
                │
                ▼
   ┌─────────────────────────────┐
   │ ParserService.parse(...)    │
   │   → uses meld-ast to parse  │
   └─────────────────────────────┘
                │ AST (MeldNode[])
                ▼
   ┌─────────────────────────────────────────────────┐
   │ InterpreterService.interpret(nodes, options)    │
   │   → For each node, pass to DirectiveService     │
   │   → Handles node transformations                │
   └─────────────────────────────────────────────────┘
                │
                ▼
   ┌──────────────────────────────────────────┐
   │ DirectiveService                         │
   │   → Routes to correct directive handler  │
   │   → Handlers can provide replacements    │
   └──────────────────────────────────────────┘
                │
                ▼
   ┌───────────────────────────────────────────────┐
   │ StateService + ResolutionService + Others     │
   │   → Stores variables and transformed nodes    │
   │   → Path expansions, data lookups, etc.       │
   └───────────────────────────────────────────────┘
                │
                ▼
   ┌──────────────────────────────────────────┐
   │ OutputService                            │
   │   → Uses transformed nodes for output    │
   │   → Generates clean, directive-free      │
   │     markdown, LLM XML, or other formats  │
   └──────────────────────────────────────────┘

This flow is orchestrated through DI, where the container resolves all required services and their dependencies automatically. The DI container handles service creation, ensuring each service gets the dependencies it needs to function properly.

## MAJOR SERVICES (OVERVIEW)

Below are the key "services" in the codebase. Each follows the single responsibility principle and is registered with the DI container via the `@Service()` decorator:

### CLIService
   - Provides command-line interface for running Meld
   - Handles file watching and reprocessing
   - Manages format selection and output options
   - Routes to appropriate services based on CLI flags
   - Dependencies: ParserService, InterpreterService, OutputService, FileSystemService, PathService, StateService

### ParserService  
   - Wraps the meld-ast parse(content) function  
   - Adds location information with file paths (parseWithLocations)  
   - Produces an array of MeldNode objects  
   - Dependencies: ResolutionServiceClient (for resolving variables during parsing)

### DirectiveService  
   - Routes directives to the correct directive handler  
   - Validates directives using ValidationService  
   - Calls ResolutionService for variable resolution  
   - Updates StateService with directive execution results
   - Supports node transformation through DirectiveResult interface
   - Handlers can provide replacement nodes for transformed output
   - Dependencies: ValidationService, StateService, PathService, FileSystemService, ParserService, InterpreterService, CircularityService, ResolutionService

### InterpreterService  
   - Orchestrates the main interpret(nodes) pipeline  
   - For each AST node:
       a) If it's text, store it or pass it along  
       b) If it's a directive:
          - Calls DirectiveService for processing
          - Handles node transformations if provided
          - Updates state with transformed nodes
   - Maintains the top-level process flow
   - Supports transformation mode through feature flags
   - Dependencies: DirectiveService, StateService, ParserService, FileSystemService, PathService, CircularityService

### StateService  
   - Stores variables in maps:
       • textVars (for @text)  
       • dataVars (for @data)  
       • pathVars (for @path)  
       • commands (for @define)  
   - Tracks both original and transformed MeldNodes
   - Provides transformation capabilities for directive processing
   - Maintains transformation state during cloning
   - Provides child states for nested imports  
   - Supports immutability toggles  
   - Dependencies: StateFactory, StateEventService, StateTrackingService

### ResolutionService  
   - Handles all variable interpolation:
       • Variables ("{{var}}", "{{data.field}}")
       • Path expansions ("$HOMEPATH/path")  
       • Command references  
   - Context-aware resolution  
   - Circular reference detection  
   - Sub-fragment parsing support  
   - Dependencies: StateService, FileSystemService, ParserServiceClient, PathService

### CircularityService  
   - Prevents infinite import loops  
   - Detects circular variable references  
   - Maintains dependency graphs  
   - Dependencies: ResolutionService

### PathService  
   - Validates and normalizes paths  
   - Enforces path security constraints  
   - Handles path joining and manipulation  
   - Supports test mode for path operations  
   - Dependencies: FileSystemServiceClient (to check if paths exist)

### ValidationService  
   - Validates directive syntax and constraints  
   - Provides extensible validator registration  
   - Throws MeldDirectiveError on validation failures  
   - Tracks available directive kinds  
   - Dependencies: ResolutionService

### FileSystemService  
   - Abstracts file operations (read, write)  
   - Supports both real and test filesystems  
   - Handles path resolution and validation  
   - Dependencies: PathOperationsService, PathServiceClient, IFileSystem

### OutputService  
   - Converts final AST and state to desired format
   - Uses transformed nodes when available
   - Supports markdown and LLM XML output  
   - Integrates with llmxml for LLM-friendly formatting  
   - Handles format-specific transformations
   - Provides clean output without directive definitions
   - Dependencies: StateService, ResolutionService, VariableReferenceResolverClient

## TESTING INFRASTRUCTURE

All tests are heavily reliant on a memory-based filesystem (memfs) for isolation and speed. The major testing utilities include:

### TestContainerHelper
   - Manages DI containers for tests
   - Provides isolated container creation
   - Supports mock registration and service resolution
   - Handles container cleanup between tests
   - Detects container state leaks

### TestContextDI
   - Central test harness that extends TestContext with DI support
   - Creates a DI container for each test
   - Provides mock service registration
   - Supports child context creation
   - Ensures proper cleanup after tests
   - Resolves services from the container for testing

### MemfsTestFileSystem  
   - Thin wrapper around memfs  
   - Offers readFile, writeFile, mkdir, etc. with in-memory data  
   - Provides an ephemeral environment for all test IO  

### TestContext  
   - Base class for testing environment
   - Provides references to all major services
   - Allows writing files, snapshotting the FS, and comparing  

### TestSnapshot  
   - Takes "snapshots" of the current Memfs FS, storing a Map<filePath, content>  
   - Compares snapshots to detect added/removed/modified files  

### ProjectBuilder  
   - Creates mock "projects" in the in-memory FS from JSON structure  
   - Useful for complex, multi-file tests or large fixture-based testing  

### Node Factories  
   - Provides helper functions for creating AST nodes in tests  
   - Supports creating directive, text, and code fence nodes  
   - Includes location utilities for source mapping  

Testing Organization:
• tests/utils/: Core test infrastructure (MemFS, snapshots, contexts)  
• tests/utils/di/: DI-specific test utilities
• tests/mocks/: Minimal mocks and test doubles  
• tests/fixtures/: JSON-based test data  
• tests/services/: Service-specific integration tests  

Testing Approach:
• Each test uses TestContextDI to create a fresh container
• Direct service resolution from the container
• Mock registration for dependencies
• Isolated container state between tests
• Factory functions for creating test nodes and data
• Snapshots for tracking filesystem changes  

## DEBUGGING INFRASTRUCTURE

The codebase includes specialized debugging services located in `tests/utils/debug/` that help diagnose and troubleshoot state-related issues:

### StateDebuggerService
   - Provides debug session management and diagnostics
   - Tracks state operations and transformations
   - Offers operation tracing and analysis
   - Helps identify state manipulation issues

### StateVisualizationService
   - Generates visual representations of state
   - Creates Mermaid/DOT graphs of state relationships
   - Visualizes state metrics and transformations
   - Aids in understanding complex state changes

### StateHistoryService
   - Records chronological state changes
   - Maintains operation history
   - Tracks transformation chains
   - Enables state change replay and analysis

### StateTrackingService
   - Monitors state relationships and dependencies
   - Tracks state lineage and inheritance
   - Records metadata about state changes
   - Helps debug scope and inheritance issues

Debugging Approach:
• Services can be enabled selectively in tests
• Debug output includes detailed state snapshots
• Visual representations help understand complex states
• History tracking enables step-by-step analysis

These debugging services are particularly useful for:
• Troubleshooting complex state transformations
• Understanding directive processing chains
• Analyzing variable resolution paths
• Debugging scope inheritance issues
• Visualizing state relationships

## SERVICE RELATIONSHIPS AND DEPENDENCY INJECTION

Services in Meld follow a dependency graph managed through the DI container:

1. Base Services:
   - FileSystemService (depends on PathOperationsService, PathServiceClient)
   - PathService (depends on FileSystemServiceClient)

2. State Management:
   - StateEventService (no dependencies)
   - StateService (depends on StateFactory, StateEventService, StateTrackingService)

3. Core Pipeline:
   - ParserService (depends on ResolutionServiceClient)
   - ResolutionService (depends on StateService, FileSystemService, PathService, ParserServiceClient)
   - ValidationService (depends on ResolutionService)
   - CircularityService (depends on ResolutionService)

4. Pipeline Orchestration:
   - DirectiveService (depends on multiple services)
   - InterpreterService (orchestrates others)

5. Output Generation:
   - OutputService (depends on StateService, ResolutionService, VariableReferenceResolverClient)

6. Debug Support:
   - DebuggerService (optional, depends on all)

## Dependency Resolution Patterns

### Circular Dependency Challenges

Circular dependencies occur when two or more services depend on each other, creating a dependency cycle:

- **FileSystemService ↔ PathService**: FileSystemService needs PathService for path resolution, while PathService needs FileSystemService to check if paths exist
- **ParserService ↔ ResolutionService**: ParserService needs ResolutionService to resolve variables, while ResolutionService needs ParserService to parse content
- **StateService ↔ StateTrackingService**: Complex bidirectional relationship for state tracking and management

### Client Factory Pattern (Current Approach)

The primary approach for handling circular dependencies in Meld is the Client Factory pattern:

1. Create minimal client interfaces that expose only the methods needed by the dependent service
2. Implement factories to create these client interfaces
3. Inject the factories rather than the actual services
4. Use the clients to access only the functionality that's actually needed

This pattern follows the Interface Segregation Principle (the "I" in SOLID), ensuring that services depend only on the methods they actually use.

#### Example Implementation

For the FileSystemService ↔ PathService circular dependency:

```typescript
// Minimal interface for what FileSystemService needs from PathService
export interface IPathServiceClient {
  resolvePath(path: string): string;
  normalizePath(path: string): string;
}

// Factory to create a client for PathService functionality
@injectable()
@Service({
  description: 'Factory for creating path service clients'
})
export class PathServiceClientFactory {
  constructor(@inject('IPathService') private pathService: IPathService) {}
  
  createClient(): IPathServiceClient {
    return {
      resolvePath: (path) => this.pathService.resolvePath(path),
      normalizePath: (path) => this.pathService.normalizePath(path)
    };
  }
}

// Updated FileSystemService that depends on the factory
@injectable()
@Service({
  description: 'Service for file system operations'
})
export class FileSystemService implements IFileSystemService {
  private pathClient: IPathServiceClient;
  
  constructor(
    @inject('IPathOperationsService') private readonly pathOps: IPathOperationsService,
    @inject('PathServiceClientFactory') pathClientFactory: PathServiceClientFactory,
    @inject('IFileSystem') fileSystem: IFileSystem | null = null
  ) {
    this.fs = fileSystem || new NodeFileSystem();
    this.pathClient = pathClientFactory.createClient();
  }
  
  // Use the client interface directly
  private resolvePath(filePath: string): string {
    return this.pathClient.resolvePath(filePath);
  }
}
```
Similarly, implement the reverse direction with a  and .
    </DocsDevDiArchitectureMd>
    <DirectContainerResolutionAlternativeApproach>
For cases where the Client Factory pattern isn&apos;t feasible, direct container resolution with lazy loading can be used:
```typescript
import { resolveService } from '@core/ServiceProvider';

@injectable()
@Service({
  description: 'Service with lazy dependency resolution'
})
export class OutputService implements IOutputService {
  private resolverClient?: IVariableReferenceResolverClient;
  
  constructor(
    @inject('IStateService') private readonly stateService: IStateService,
    @inject('IResolutionService') private readonly resolutionService: IResolutionService
  ) {}
  
  /**
   * Get a resolver client using direct container resolution
   * This breaks circular dependencies by deferring resolution until needed
   */
  private getVariableResolver(): IVariableReferenceResolverClient | undefined {
    // Lazy-load the client only when needed
    if (!this.resolverClient) {
      try {
        // Get the factory from the container using ServiceProvider helper
        const factory = resolveService<VariableReferenceResolverClientFactory>(
          'VariableReferenceResolverClientFactory'
        );
        
        // Create the client
        this.resolverClient = factory.createClient();
        logger.debug('Successfully created VariableReferenceResolverClient');
      } catch (error) {
        logger.warn('Failed to create VariableReferenceResolverClient', { error });
      }
    }
    
    return this.resolverClient;
  }
  
  // Using the lazy-loaded client
  async convert(nodes: MeldNode[], state: IStateService, format: string = 'markdown'): Promise<string> {
    // Get the resolver only when needed
    const resolver = this.getVariableResolver();
    
    if (resolver && format === 'markdown') {
      // Process nodes using the resolver for field access
      return this.nodeToMarkdown(nodes, state, resolver);
    }
    
    // Fallback implementation if resolver isn't available
    return this.legacyConvert(nodes, state, format);
  }
}
```
This approach:
1. Avoids creating circular dependencies at initialization time
2. Loads dependencies only when they&apos;re actually needed
3. Provides fallback mechanisms when resolution fails
4. Uses the ServiceProvider helper  rather than direct container access
Key considerations when using direct container resolution:
1. Always include fallback mechanisms
2. Log resolution failures for debugging
3. Cache resolved instances for performance
4. Only resolve what you need, when you need it
      <BenefitsOfClientFactoryPattern>
1. **Clear Dependencies**: Services explicitly state what they need through focused interfaces
2. **Interface Segregation**: Services only get access to the specific methods they need
3. **No Null Checks**: Factory creates clients at initialization time, eliminating null checks
4. **Simpler Testing**: Small, focused interfaces are easier to mock
5. **Reduced Tight Coupling**: Services are coupled only to minimal interfaces
6. **Improved Code Readability**: Code intent becomes clearer when using direct method calls
7. **Better Maintainability**: Changes to service interfaces won&apos;t affect all dependent services
      </BenefitsOfClientFactoryPattern>
      <NamingConventions>
For consistency across the codebase, we follow these naming conventions:
- Client Interfaces:  (e.g., )
- Factory Classes:  (e.g., )
- Factory Methods:  for consistent API
      </NamingConventions>
      <TestingWithClientFactories>
Testing becomes more straightforward with the client factory pattern:
```typescript
describe('FileSystemService', () => {
  let context: TestContextDI;
  let service: IFileSystemService;
  
  beforeEach(() => {
    context = TestContextDI.create();
    
    // Create a mock client
    const mockPathClient = {
      resolvePath: vi.fn().mockReturnValue('/resolved/path'),
      normalizePath: vi.fn().mockReturnValue('normalized/path')
    };
    
    // Create a mock factory that returns our mock client
    const mockPathClientFactory = {
      createClient: vi.fn().mockReturnValue(mockPathClient)
    };
    
    // Register the mock factory
    context.registerMock('PathServiceClientFactory', mockPathClientFactory);
    
    // Resolve the service
    service = context.resolveSync('IFileSystemService');
  });
  
  afterEach(async () => {
    await context.cleanup();
  });
  
  it('should resolve paths using the path client', async () => {
    // Test that calling methods on the service uses the client correctly
    await service.readFile('some/path');
    
    // Verify the path client was used
    expect(mockPathClient.resolvePath).toHaveBeenCalledWith('some/path');
  });
});
```
For testing services that use direct container resolution, we register mocks directly with the container:
```typescript
describe('OutputService', () => {
  let context: TestContextDI;
  let service: IOutputService;
  
  beforeEach(() => {
    context = TestContextDI.create();
    
    // Create a mock resolver client
    const mockResolverClient = {
      accessFields: vi.fn().mockReturnValue('resolved value'),
      convertToString: vi.fn().mockReturnValue('formatted string')
    };
    
    // Create a mock factory that returns our mock client
    const mockFactory = {
      createClient: vi.fn().mockReturnValue(mockResolverClient)
    };
    
    // Register the mock factory with the container
    context.registerMock('VariableReferenceResolverClientFactory', mockFactory);
    
    // Resolve the service
    service = context.resolveSync('IOutputService');
  });
  
  afterEach(async () => {
    await context.cleanup();
  });
  
  it('should convert nodes to markdown with field access', async () => {
    const result = await service.convert(mockNodes, mockState, 'markdown');
    expect(result).toContain('formatted string');
  });
});
```
      </TestingWithClientFactories>
    </DirectContainerResolutionAlternativeApproach>
  </Context>
  <ExampleUsageScenario>
1. Input: A .meld file with lines like:@text greeting = "Hello"@data config = {
  "value": 123
}@import [ path = &quot;other.meld&quot; ]
2. We load the file from disk.
3. ParserService → parse the content → AST.
4. InterpreterService → interpret(AST).a) For each directive, DirectiveService → validation → resolution → update StateService.b) If an import is encountered, CircularityService ensures no infinite loops.
5. Once done, the final StateService has textVars.greeting = "Hello", dataVars.config = { value: 123 }, etc.
6. OutputService can generate the final text or an LLM-XML representation.
With DI, this flow is orchestrated through the container, which resolves all the required services and their dependencies automatically.
  </ExampleUsageScenario>
  <ErrorHandling>
• MeldDirectiveError thrown if a directive fails validation or interpretation.• MeldParseError if the parser cannot parse content.• PathValidationError for invalid paths.• ResolutionError for variable resolution issues.• MeldError as a base class for other specialized errors.• ServiceInitializationError for DI-related initialization failures.
These errors typically bubble up to the caller or test.
  </ErrorHandling>
  <Conclusion>
This codebase implements the entire Meld language pipeline:• Parsing Meld documents into an AST.• Validating &amp; interpreting directives.• Storing data in a hierarchical state.• Resolving references (text, data, paths, commands).• (Optionally) generating final formatted output.
The codebase uses TSyringe for dependency injection, which helps manage the complex relationships between services. The Client Factory pattern is used to handle circular dependencies between core services, with direct container resolution as an alternative for specific cases.
The test environment includes robust DI support with TestContextDI, allowing for isolated container testing, mock registration, and service resolution. The system adheres to SOLID design principles with interface-first design and clear separation of concerns.
  </Conclusion>
</SimplifyVariableresolutionCodeWithStrongerDefineTypes>

<DependencyInjectionInMeld>
This document provides guidance on working with the dependency injection (DI) system in the Meld codebase.
  <Overview>
Meld uses [TSyringe](https://github.com/microsoft/tsyringe) for dependency injection. All services are registered and resolved through the DI container, which simplifies service initialization and testing.
  </Overview>
  <CoreConcepts>
    <1serviceRegistration>
Services are automatically registered with the DI container when they are decorated with the  decorator:
```typescript
import { Service } from '@core/ServiceProvider';

@Service({
  description: 'Service that provides file system operations'
})
export class FileSystemService implements IFileSystemService {
  // Implementation...
}
```
The  decorator registers the class with the container and adds some metadata for documentation purposes.
    </1serviceRegistration>
    <2dependencyInjection>
Services can inject their dependencies through constructor parameters:
```typescript
import { inject } from 'tsyringe';

@Service()
export class ResolutionService implements IResolutionService {
  constructor(
    @inject('IStateService') private stateService: IStateService,
    @inject('IFileSystemService') private filesystem: IFileSystemService,
    @inject('IParserService') private parser: IParserService,
    @inject('IPathService') private pathService: IPathService
  ) {}
  
  // Implementation...
}
```
    </2dependencyInjection>
    <3creatingServices>
Services should be created using the DI container, not with :
```typescript
// CORRECT: Let the DI container create the service
import { container } from 'tsyringe';
const service = container.resolve(ServiceClass);

// CORRECT: Use the ServiceProvider helper
import { createService } from '@core/ServiceProvider';
const service = createService(ServiceClass);

// INCORRECT: Don't use 'new' directly
const service = new ServiceClass(); // Avoid this
```
    </3creatingServices>
  </CoreConcepts>
  <BestPractices>
    <ServiceDesign>
1. **Interface-First Design**: Define an interface for your service before implementing it
2. **Explicit Dependencies**: Always specify dependencies in the constructor
3. **Private Injection**: Use  in constructor parameters to store the dependencies
4. **Explicit Return Types**: Always provide return types for methods
5. **Proper Initialization**: Services should be fully initialized after construction
    </ServiceDesign>
    <ExampleService>
```typescript
import { inject } from 'tsyringe';
import { Service } from '@core/ServiceProvider';

// 1. Define the interface
export interface IExampleService {
  process(data: string): Promise<string>;
  getStatus(): string;
}

// 2. Implement the service
@Service({
  description: 'Example service that demonstrates best practices'
})
export class ExampleService implements IExampleService {
  // 3. Constructor injection with explicit dependencies
  constructor(
    @inject('IDependencyService') private dependency: IDependencyService,
    @inject('ILoggerService') private logger: ILoggerService
  ) {}

  // 4. Explicit return type
  async process(data: string): Promise<string> {
    this.logger.log('Processing data...');
    return this.dependency.transform(data);
  }

  getStatus(): string {
    return 'Ready';
  }
}
```
    </ExampleService>
  </BestPractices>
  <TestingWithDi>
    <UsingTestcontextdi>
The  class provides utilities for testing with DI:
```typescript
import { TestContextDI } from '@tests/utils/di/TestContextDI';

describe('MyService', () => {
  let context: TestContextDI;
  
  beforeEach(() => {
    // Create a test context with DI
    context = TestContextDI.create();
  });
  
  afterEach(async () => {
    // Clean up resources
    await context.cleanup();
  });
  
  it('should process data correctly', async () => {
    // Register a mock dependency
    const mockDependency = { transform: vi.fn().mockReturnValue('transformed') };
    context.registerMock('IDependencyService', mockDependency);
    
    // Get the service from the container
    const service = context.container.resolve('IExampleService');
    
    // Test the service
    const result = await service.process('input');
    expect(result).toBe('transformed');
    expect(mockDependency.transform).toHaveBeenCalledWith('input');
  });
});
```
    </UsingTestcontextdi>
    <MockingServices>
To register mock implementations:
```typescript
// Register a mock instance
context.registerMock('IServiceName', mockImplementation);

// Register a mock class
context.container.registerMockClass('IServiceName', MockClass);
```
    </MockingServices>
  </TestingWithDi>
  <CommonPatterns>
    <DualModeConstructorPattern>
Meld services need to support both DI and non-DI modes. The recommended pattern is:
```typescript
/**
 * Constructor with DI annotations
 */
constructor(
  @inject(SomeFactory) factory?: SomeFactory,
  @inject('IService1') service1?: IService1,
  @inject('IService2') service2?: IService2
) {
  this.initializeFromParams(factory, service1, service2);
}

/**
 * Helper that chooses initialization path
 */
private initializeFromParams(
  factory?: SomeFactory,
  service1?: IService1,
  service2?: IService2
): void {
  if (factory) {
    this.initializeDIMode(factory, service1, service2);
  } else {
    this.initializeLegacyMode(service1, service2);
  }
}

/**
 * DI mode initialization
 */
private initializeDIMode(
  factory: SomeFactory,
  service1?: IService1,
  service2?: IService2
): void {
  this.factory = factory;
  this.service1 = service1;
  this.service2 = service2;
  // Additional initialization
}

/**
 * Legacy mode initialization
 */
private initializeLegacyMode(
  service1?: IService1,
  service2?: IService2
): void {
  // Create default dependencies
  this.factory = new SomeFactory();
  
  // Additional initialization
}
```
This pattern:
1. Keeps the constructor simple
2. Clearly separates DI and non-DI initialization logic
3. Makes maintenance easier
4. Preserves dual-mode functionality
5. Provides a clear path to eventually remove legacy mode
See  for more examples.
    </DualModeConstructorPattern>
    <FactoryPattern>
For services that need complex initialization or multiple instances:
```typescript
@Service()
export class ServiceFactory {
  constructor(
    @inject('IDependencyA') private depA: IDependencyA,
    @inject('IDependencyB') private depB: IDependencyB
  ) {}
  
  createService(config: ServiceConfig): IService {
    // Create a specialized instance with the given config
    // The factory can use its injected dependencies
    return new SpecializedService(this.depA, this.depB, config);
  }
}
```
    </FactoryPattern>
    <ServiceProviders>
For centralized service registration:
```typescript
// In a central di-config.ts file:
import { container } from 'tsyringe';

// Register core services
container.register('FileSystemService', { useClass: FileSystemService });
container.register('IFileSystemService', { useToken: 'FileSystemService' });
```
    </ServiceProviders>
  </CommonPatterns>
  <Troubleshooting>
    <CircularDependencies>
If you have circular dependencies, use  with a string token instead of a direct class reference:
```typescript
// Instead of this (can cause circular dependency issues):
constructor(@inject(DependentService) private dependent: DependentService)

// Do this:
constructor(@inject('IDependentService') private dependent: IDependentService)
```
    </CircularDependencies>
    <MissingDependencies>
If a service fails to resolve with &quot;unregistered dependency token&quot; errors:
1. Check that the service is decorated with 
2. Verify that the injected token is registered in the container
3. Check for typos in the injection token string
4. Make sure the services are imported and executed before use
    </MissingDependencies>
    <TestingIssues>
If tests fail with DI errors:
1. Use  to create a clean container for each test
2. Register all required mock dependencies before resolving the service
3. Clean up after tests with
```

#### ../../docs/dev/PIPELINE.md
```javascript
# Meld Pipeline Flow

## Overview

The Meld pipeline processes `.mld` files through several stages to produce either `.xml` or `.md` output. Here's a detailed look at how it works:

```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐     ┌──────────────┐
│  Service    │     │   Service   │     │   Pipeline   │     │  Variable    │     │    Final     │
│Initialization├────►│ Validation  ├────►│  Execution   ├────►│  Resolution  ├────►│   Output     │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘     └──────────────┘
      │                    │                    │                    │                    │
      ▼                    ▼                    ▼                    ▼                    ▼
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐     ┌──────────────┐
│Dependencies │     │Validate All │     │Process Input │     │Resolve Vars & │     │Generate Clean│
│  Resolved   │     │ Services    │     │   Content    │     │  References   │     │   Output    │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘     └──────────────┘
```
    </TestingIssues>
  </Troubleshooting>
  <ServiceOrganization>
The pipeline is organized into logical service groups, with strict initialization order and dependency validation:
    <PipelineServicesServicesPipeline>
```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐
│   Parser    │     │  Directive  │     │ Interpreter  │     │   Output     │
│   Service   ├────►│   Service   ├────►│   Service    ├────►│   Service    │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘
      │                    │                    │                    │
      ▼                    ▼                    ▼                    ▼
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐
│Initialize & │     │Validate &   │     │Transform &   │     │Format &     │
│  Validate   │     │Process Dirs │     │Update State  │     │Generate Out │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘
```
    </PipelineServicesServicesPipeline>
    <StateServicesServicesState>
```ascii
┌─────────────┐     ┌─────────────┐
│    State    │     │    State    │
│   Service   ├────►│    Event    │
└─────────────┘     │   Service   │
                    └─────────────┘
```
    </StateServicesServicesState>
    <ResolutionServicesServicesResolution>
```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐
│ Resolution  │     │ Validation  │     │ Circularity  │
│   Service   ├────►│   Service   ├────►│   Service    │
└─────────────┘     └─────────────┘     └──────────────┘
```
    </ResolutionServicesServicesResolution>
    <FileSystemServicesServicesFs>
```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐
│    File     │     │    Path     │     │     Path     │
│   System    ├────►│   Service   ├────►│  Operations  │
│   Service   │     │             │     │   Service    │
└─────────────┘     └─────────────┘     └──────────────┘
```
    </FileSystemServicesServicesFs>
  </ServiceOrganization>
  <DetailedFlow>
1. **Service Initialization** ()
- Resolves service dependencies
- Initializes in correct order
- Validates service configuration
- Enables transformation if requested
2. **Input Processing** ()
- User runs 
-  handles command line options
- Default output is  format
- Can specify  for  output
- Supports  for direct console output
3. **Parsing** ()
- Reads the input file content
- Parses into AST using 
- Identifies directives and text nodes
- Adds source location information
4. **Interpretation** ()
- Processes each AST node sequentially
- Routes directives to appropriate handlers
- Handlers can provide replacement nodes
- Maintains both original and transformed states
- Resolves variables and references
- Handles file imports and embedding
5. **Variable Resolution** ()
- Resolves variable references like 
- Handles field access with dot and bracket notation
- Supports nested object and array access
- Manages path variable resolution and prefixing
- Provides two architecture models:
- Traditional: OutputService handles resolution
- Delegated: ResolutionService handles resolution
6. **Output Generation** ()
- Takes transformed nodes and state
- Converts to requested format:
- : Uses  library for LLM-friendly XML
- : Clean markdown without directive definitions
- Writes output to file or stdout
  </DetailedFlow>
  <TransformationModeAndVariableResolution>
When transformation mode is enabled, the pipeline handles directives and variables in a special way. Understanding this flow is critical for debugging and enhancing directive handlers:
```ascii
┌─────────────┐     ┌─────────────┐     ┌──────────────┐     ┌──────────────┐
│  Directive  │     │Interpretation│     │   Variable   │     │   Output     │
│  Handlers   ├────►│  & Node     ├────►│  Resolution  ├────►│  Generation  │
│(with replace│     │Transformation│     │              │     │              │
│  nodes)     │     │              │     │              │     │              │
└─────────────┘     └─────────────┘     └──────────────┘     └──────────────┘
```
    <KeyTransformationPipelineConcepts>
1. **Directive Handler Replacement Nodes**
- Directive handlers can return replacement nodes when in transformation mode
- The InterpreterService must properly apply these replacements in the transformed nodes array
- For import directives, the replacement is typically an empty text node
- For embed directives, the replacement node contains the embedded content
2. **State Propagation Across Boundaries**
- Variables must be explicitly copied between parent and child states
- When importing files, variables must be copied from imported state to parent state
- The ImportDirectiveHandler must ensure all variable types (text, data, path, commands) are copied
3. **Variable Resolution Process**
- Variables can be resolved at multiple stages:
- During directive processing
- During node transformation
- During final output generation
- During post-processing in the main function
- Meld supports two distinct architectures for variable resolution:
- **Traditional Architecture**: OutputService resolves variables directly during final rendering
- **Delegated Architecture**: OutputService delegates to ResolutionService for variable resolution
- Architecture is controlled by the  feature flag or the  environment variable
4. **State Management for Transformation**
- The StateService maintains both original and transformed node arrays
- Transformed nodes must be explicitly initialized
- The transformNode method is used to replace directive nodes with their outputs
- State must keep track of transformation options to determine which directives to transform
    </KeyTransformationPipelineConcepts>
  </TransformationModeAndVariableResolution>
  <ServiceResponsibilities>
    <PipelineServices>
1. **ParserService** ()
- Wraps meld-ast parser
- Produces AST nodes
- Adds file location information
2. **InterpreterService** ()
- Orchestrates directive processing
- Handles node transformations
- Maintains interpretation state
- Handles imports and embedding
- **Critical for transformation:** Applies directive handler replacement nodes to transformed node array
- **State propagation:** Ensures proper variable inheritance between parent and child states
3. **DirectiveService** ()
- Routes directives to handlers
- Validates directive syntax
- Supports node transformation
- Updates state based on directive results
- **Directive handlers:** Can return replacement nodes in transformation mode
- **Handler context:** Includes parent state for proper variable propagation
4. **OutputService** ()
- Uses transformed nodes for clean output
- Supports markdown and LLM XML
- Generates directive-free output
- Handles formatting options
- **Variable resolution:** Resolves variable references in text nodes during output generation
- **Transformation handling:** Uses special processing for variable references in transformation mode
    </PipelineServices>
    <StateServices>
1. **StateService** ()
- Stores variables and commands
- Maintains original and transformed nodes
- Manages scope and inheritance
- Tracks file dependencies
- **Transformation support:** Keeps track of both original and transformed node arrays
- **Variable copying:** Must explicitly copy variables between parent and child states
- **Transformation options:** Supports selective transformation of different directive types
2. **StateEventService** ()
- Handles state change events
- Manages state updates
- Provides event hooks
- Supports state tracking
    </StateServices>
    <ResolutionServices>
1. **ResolutionService** ()
- Resolves variables and references
- Handles path expansions
- Manages circular dependencies
2. **ValidationService** ()
- Validates directive syntax and constraints
- Provides extensible validator registration
- Throws MeldDirectiveError on validation failures
- Tracks available directive kinds
3. **CircularityService** ()
- Prevents infinite import loops
- Detects circular variable references
- Maintains dependency graphs
    </ResolutionServices>
    <FileSystemServices>
1. **FileSystemService** ()
- Abstracts file operations (read, write)
- Supports both real and test filesystems
- Handles path resolution and validation
2. **PathService** ()
- Validates and normalizes paths
- Enforces path security constraints
- Handles path joining and manipulation
- Supports test mode for path operations
3. **PathOperationsService** ()
- Handles complex path operations
- Provides path utilities
- Manages path transformations
```




2.  **`@define` Documentation:** 



#### ../../_dev/DEFINE-CLARITY.md
```javascript
# @define Directive: Understanding and Implementation

## Core Concept: Creating Reusable Command Templates

The `@define` directive allows you to create named, reusable templates for runnable commands (both shell commands and language scripts). These templates can accept parameters, making them function like simple macros or functions within Meld.

Defined commands are invoked using the `@run $commandName(...)` syntax.

## Syntax

There are two primary forms:

**1. Defining Basic Commands (Shell Commands):**

```meld
@define commandName(param1, param2) = @run [command template with {{param1}} and {{param2}}]

// Or for multiline commands:
@define multiCmd(arg) = @run [[
  echo "Starting script with {{arg}}"
  ./run_script.sh {{arg}}
]]
```
- ****: The identifier (no @run $commandName(...)`.
- ****: An optional list of parameter names, acting as placeholders within the command template.
- ****: Separator.
- ** or **: The right-hand side **must** be a   directive. This defines the shell command template to be executed.
**2. Defining Language Commands (JS, Python, Bash):**
```meld
@define jsCommand(name, value) = @run js(name, value) [[
  // Raw JavaScript code using parameters name & value
  console.log(`Processing ${name}: ${value}`);
  // Note: {{variables}} are NOT interpolated here
]]

@define pyCommand(inputPath) = @run python(inputPath) [[
# Raw Python code
import sys
input_file = sys.argv[1]
print(f"Processing {input_file}")
# ...
]]
```
- ****: Identifier for the language command.
- ****: Parameters expected by the language script.
- ****: The right-hand side **must** be a   directive. This defines the language, the parameters it accepts, and the *raw code block* to be executed.
    </FileSystemServices>
  </ServiceResponsibilities>
  <CommandTemplateBodyForBasicCommands>
When defining a Basic Command template ( or ):
- **Shell Command**: It should be a valid shell command string.
- **Parameter Placeholders**: It can contain , , etc., corresponding to the parameters defined in the parentheses . These will be replaced by the arguments provided when the command is invoked via .
- **Other Variables**: It can also contain standard Meld variable references (, ). These are *not* resolved when  is processed; they are resolved *at the time the command is executed* via .
- **Multiline Syntax ()**: If using double brackets, the first newline immediately following  is ignored.
  </CommandTemplateBodyForBasicCommands>
  <LanguageCodeBlockForLanguageCommands>
When defining a Language Command template ():
- **Raw Code**: The content within  is treated as **raw source code** for the specified language (js, python, bash).
- **NO Interpolation**: Variables (, ) inside the  block are **NOT** interpolated. The code is passed directly to the language interpreter.
- **Parameters**: The parameters defined in  are passed to the script at runtime (e.g., as command-line arguments).
  </LanguageCodeBlockForLanguageCommands>
  <CoreImplementationDefinedirectivehandler>
The  handler primarily acts as a storage mechanism:
1. **Validate Syntax**: Checks the overall  structure.
2. **Extract Components**: Parses the directive to get the  (without parameters[
  "param1",
  "param2"
]@run` directive (its kind - basic or language, the command template string or code block, the language if applicable).
3. **Store Definition**: Creates a  object containing the  array and the necessary details from the  directive (e.g., the literal command template string for basic commands, or the language and raw code block for language commands).
4. **Update State**: Stores this  object in the current execution state using . Metadata can also be stored.
**Important**: The  handler does *not* execute anything or resolve variables within the template/code block. It simply stores the definition.
  </CoreImplementationDefinedirectivehandler>
  <InteractionWithRunCommandname>
The execution logic resides within the  and its  subtype:
1. **Invocation**: 
2. **Retrieve Definition**: Fetches the  for  from the state.
3. **Resolve Arguments**: Resolves the arguments (, ) provided in the  call.
4. **Execution based on Definition Type**:
- **If Basic Command Definition**: Substitutes the resolved arguments *positionally* into the stored command template string (replacing , , etc.). The resulting command string is then executed, resolving any other variables (, ) at that time.
- **If Language Command Definition**: Passes the resolved arguments to the stored language script (e.g., as command-line arguments  in Python,  in Node). The raw code block stored in the definition is executed by the appropriate language interpreter.
  </InteractionWithRunCommandname>
  <KeyImplementationAspectsConsiderations>
- **Positional Parameters**: Substitution/passing relies strictly on the order in the  parameter list and the  argument list.
- **Delayed Resolution (Basic Commands)**: Variables (, ) within a basic command template are resolved only when invoked via .
- **No Interpolation (Language Commands)**: The code block for language commands is executed raw; use the defined parameters to pass data into the script.
- **No Direct Output**:  only modifies state.
  </KeyImplementationAspectsConsiderations>
  <ValidationCriteria>
A correct  implementation ensures:
- Both basic and language command definitions are correctly parsed and stored.
- Invocation via  correctly retrieves the definition and identifies its type.
- Arguments passed to  are resolved correctly.
- For basic commands: Positional parameter substitution into the template works reliably, and the final command executes correctly.
- For language commands: Resolved arguments are passed correctly to the script, and the stored code block is executed by the correct interpreter.
```




3.  **Your Service Code (`VariableResolution`)**: 



#### ../../services/pipeline/ResolutionService/resolvers/VariableReferenceResolver.ts
```javascript
import type { IStateService } from '@services/state/StateService/IStateService.js';
import type { ResolutionContext } from '@services/pipeline/ResolutionService/IResolutionService.js';
import { ResolutionErrorCode } from '@services/pipeline/ResolutionService/IResolutionService.js';
import { MeldResolutionError } from '@core/errors/MeldResolutionError.js';
import { ErrorSeverity } from '@core/errors/MeldError.js';
import type { IResolutionService } from '@services/pipeline/ResolutionService/IResolutionService.js';
import type { MeldNode, TextNode, DirectiveNode, NodeType } from '@core/syntax/types/index.js';
import { resolutionLogger as logger } from '@core/utils/logger.js';
import { VariableResolutionTracker } from '@tests/utils/debug/VariableResolutionTracker/index.js';
import { container, inject, injectable } from 'tsyringe';
import type { IResolutionServiceClient } from '@services/pipeline/ResolutionService/interfaces/IResolutionServiceClient.js';
import { ResolutionServiceClientFactory } from '@services/pipeline/ResolutionService/factories/ResolutionServiceClientFactory.js';
import type { IParserServiceClient } from '@services/pipeline/ParserService/interfaces/IParserServiceClient.js';
import { ParserServiceClientFactory } from '@services/pipeline/ParserService/factories/ParserServiceClientFactory.js';
import type { IParserService } from '@services/pipeline/ParserService/IParserService.js';
import { 
  VariableType,
  Field,
  IVariableReference
} from '@core/syntax/types/interfaces/index.js';
import { 
  VariableNodeFactory 
} from '@core/syntax/types/factories/index.js';
// Keep legacy imports for backward compatibility during transition
import {
  SPECIAL_PATH_VARS,
  ENV_VAR_PREFIX,
  VAR_PATTERNS
} from '@core/syntax/types/variables.js';
import { VariableResolutionErrorFactory } from '@services/pipeline/ResolutionService/resolvers/error-factory.js';

// Define a format context type
type FormatContext = 'inline' | 'block';

// Type guard functions
function isTextNode(node: MeldNode): node is TextNode {
  return node.type === 'Text' && 'content' in node;
}

function isDirectiveNode(node: MeldNode): node is DirectiveNode {
  return node.type === 'Directive' && 'directive' in node;
}

/**
 * Local type guard function that uses the factory pattern internally
 * @param node Node to check
 * @returns True if the node is a variable reference node
 */
function isVariableReferenceNode(node: any): node is IVariableReference {
  // Try to use factory pattern first if available in the container
  try {
    const factory = container.resolve(VariableNodeFactory);
    return factory.isVariableReferenceNode(node);
  } catch (error) {
    // Fallback to direct type checking (same logic as legacy function)
    return (
      node.type === 'VariableReference' &&
      typeof node.identifier === 'string' &&
      typeof node.valueType === 'string'
    );
  }
}

/**
 * Handles resolution of variable references ({{var}})
 * Previously used ${var} for text and #{var} for data, now unified as {{var}}
 */
export class VariableReferenceResolver {
  private readonly MAX_RESOLUTION_DEPTH = 20;
  private readonly MAX_ITERATIONS = 100;
  private resolutionTracker?: VariableResolutionTracker;
  private resolutionClient?: IResolutionServiceClient;
  private resolutionClientFactory?: ResolutionServiceClientFactory;
  private parserClient?: IParserServiceClient;
  private parserClientFactory?: ParserServiceClientFactory;
  private factoryInitialized: boolean = false;

  /**
   * Creates a new instance of the VariableReferenceResolver
   * @param stateService - State service for variable management
   * @param resolutionService - Resolution service for resolving variables
   * @param parserService - Parser service for parsing content with variables
   */
  constructor(
    private readonly stateService: IStateService,
    private readonly resolutionService?: IResolutionService,
    private readonly parserService?: IParserService,
    @inject(VariableNodeFactory) private readonly variableNodeFactory?: VariableNodeFactory
  ) {
    // Initialize the factory if it wasn't injected (for backward compatibility)
    if (!this.variableNodeFactory) {
      logger.debug('VariableNodeFactory not injected, resolving from container');
      try {
        this.variableNodeFactory = container.resolve(VariableNodeFactory);
      } catch (error) {
        logger.warn('Failed to resolve VariableNodeFactory from container', {
          error: error instanceof Error ? error.message : String(error)
        });
        // We'll fall back to legacy functions if needed
      }
    }
  }

  /**
   * Lazily initialize the service client factories
   * This is called only when needed to avoid circular dependencies
   * @throws Error if factory initialization fails
   */
  private ensureFactoryInitialized(): void {
    // If already initialized, return early
    if (this.factoryInitialized) {
      return;
    }
    
    // Mark as initialized to prevent recursive calls
    this.factoryInitialized = true;
    
    // Initialize resolution client factory if needed
    if (!this.resolutionService && !this.resolutionClient) {
      try {
        // Resolve the factory from the container
        this.resolutionClientFactory = container.resolve('ResolutionServiceClientFactory');
        this.initializeResolutionClient();
        logger.debug('Initialized ResolutionServiceClient via factory');
      } catch (error) {
        // Log error but don't fail - we might be able to continue with other mechanisms
        logger.warn('Failed to initialize ResolutionServiceClient', {
          error: error instanceof Error ? error.message : String(error)
        });
      }
    } else {
      logger.debug('Using directly injected ResolutionService, skipping client factory');
    }
    
    // Initialize parser client factory if needed
    if (!this.parserService && !this.parserClient) {
      try {
        // Resolve the factory from the container
        this.parserClientFactory = container.resolve('ParserServiceClientFactory');
        this.initializeParserClient();
        logger.debug('Initialized ParserServiceClient via factory');
      } catch (error) {
        // Log error but don't fail - we'll fall back to regex parsing
        logger.warn('Failed to initialize ParserServiceClient, will use regex fallback', {
          error: error instanceof Error ? error.message : String(error)
        });
      }
    } else {
      logger.debug('Using directly injected ParserService, skipping client factory');
    }
  }
  
  /**
   * Initialize the ResolutionServiceClient using the factory
   * @throws Error if client creation fails
   */
  private initializeResolutionClient(): void {
    if (!this.resolutionClientFactory) {
      logger.warn('ResolutionServiceClientFactory not available, some functionality may be limited');
      return;
    }
    
    try {
      this.resolutionClient = this.resolutionClientFactory.createClient();
      logger.debug('Successfully created ResolutionServiceClient');
    } catch (error) {
      // Don't throw, just log the error and continue without the client
      logger.warn('Failed to create ResolutionServiceClient', {
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }
  
  /**
   * Initialize the ParserServiceClient using the factory
   * @throws Error if client creation fails
   */
  private initializeParserClient(): void {
    if (!this.parserClientFactory) {
      logger.warn('ParserServiceClientFactory not available, will use regex fallback for parsing');
      return;
    }
    
    try {
      this.parserClient = this.parserClientFactory.createClient();
      logger.debug('Successfully created ParserServiceClient');
    } catch (error) {
      // Don't throw, just log the error and continue without the client
      logger.warn('Failed to create ParserServiceClient, will use regex fallback', {
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Set the resolution tracker for debugging
   * @internal
   */
  setResolutionTracker(tracker: VariableResolutionTracker): void {
    this.resolutionTracker = tracker;
  }

  /**
   * Resolves all variable references in the given text
   * @param text Text containing variable references like {{varName}}
   * @param context Resolution context
   * @returns Resolved text with all variables replaced with their values
   */
  async resolve(content: string, context: ResolutionContext): Promise<string> {
    logger.debug(`Resolving content: ${content}`, {
      content,
      contextStrict: context.strict
    });
    
    // Initialize result
    let result = '';
    
    // Provide a new context with depth tracking to prevent circular references
    const newContext: ResolutionContext & { depth?: number } = {
      ...context,
      depth: (context as any).depth !== undefined ? (context as any).depth + 1 : 1
    };
    
    // Check for max depth
    if (newContext.depth && newContext.depth > this.MAX_RESOLUTION_DEPTH) {
      // Special handling for excessive nesting
      if (context.isVariableEmbed) {
        // For variable embeds, we log a warning but don't fail completely
        logger.warn(`Maximum resolution depth exceeded in variable embed context. Depth: ${newContext.depth}`);
        // Return the original content without further resolution
        return content;
      } else {
        throw new MeldResolutionError(
          'Maximum resolution depth exceeded',
          {
            code: ResolutionErrorCode.MAX_DEPTH_EXCEEDED,
            severity: ErrorSeverity.Fatal
          }
        );
      }
    }
    
    // Parse the content into nodes
    const nodes = await this.parseContent(content);
    logger.debug(`Parsed ${nodes.length} nodes`, {
      nodeTypes: nodes.map(n => n.type).join(', ')
    });
    
    // Process each node
    for (const node of nodes) {
      // Handle text nodes
      if (isTextNode(node)) {
        logger.debug(`Processing text node: ${node.content.substring(0, 50)}${node.content.length > 50 ? '...' : ''}`);
        result += node.content;
        continue;
      }
      
      // Handle variable reference nodes
      if (isVariableReferenceNode(node)) {
        logger.debug(`Processing variable reference node: ${node.identifier}`, {
          valueType: node.valueType,
          hasFields: !!node.fields,
          fields: node.fields ? JSON.stringify(node.fields) : 'none'
        });
        
        try {
          // Get the variable value
          let value = await this.getVariable(node.identifier, newContext);
          
          // If the variable has fields, access them
          if (node.fields && node.fields.length > 0) {
            logger.debug(`Accessing fields for variable ${node.identifier}`, {
              fields: JSON.stringify(node.fields)
            });
            
            try {
              value = await this.accessFields(value, node.fields, newContext, node.identifier);
              logger.debug(`Field access result for ${node.identifier}:`, {
                valueType: typeof value,
                isArray: Array.isArray(value),
                value: typeof value === 'object' ? JSON.stringify(value).substring(0, 100) : String(value)
              });
            } catch (fieldError: any) {
              // In non-strict mode, return empty string for field access errors
              if (!newContext.strict) {
                logger.warn(`Field access error in non-strict mode, returning empty string: ${fieldError.message}`);
                value = '';
              } else {
                // In strict mode, rethrow the error
                throw fieldError;
              }
            }
          }
          
          // Convert the value to string
          let stringValue;
          if (Array.isArray(value) && this.isArrayOfObjects(value)) {
            // For arrays of objects (like the complexArray in parent-object-reference.test.ts),
            // force pretty printing with indentation
            stringValue = JSON.stringify(value, null, 2);
            logger.debug(`Pretty-printed array for ${node.identifier} with indentation`);
          } else {
            // Normal string conversion for all other types
            stringValue = this.convertToString(value);
          }
          logger.debug(`Converted ${node.identifier} to string: ${stringValue.substring(0, 100)}${stringValue.length > 100 ? '...' : ''}`);
          
          // Add to result
          result += stringValue;
        } catch (error) {
          // In non-strict mode, replace with empty string
          if (!newContext.strict) {
            logger.warn(`Error resolving variable ${node.identifier} in non-strict mode, using empty string`, {
              error: error instanceof Error ? error.message : String(error)
            });
            result += '';
          } else {
            // In strict mode, rethrow the error
            throw error;
          }
        }
        
        continue;
      }

      // Handle directive nodes (should not happen in normal operation)
      if (isDirectiveNode(node)) {
        logger.warn(`Unexpected directive node in variable resolution: ${node.directive.kind}`);
        // Skip directive nodes
        continue;
      }

      // Unknown node type
      logger.warn(`Unknown node type in variable resolution: ${node.type}`);
    }

    // If the result still contains variable references, resolve them recursively
    if (this.containsVariableReferences(result)) {
      logger.debug(`Result still contains variable references, resolving recursively: ${result}`);
      return this.resolve(result, newContext);
    }

    logger.debug(`Final resolved result: ${result}`);
    return result;
  }

  /**
   * Resolve a field access expression like varName.field1.field2
   * Enhanced version with type preservation options
   * 
   * @param varName Base variable name
   * @param fieldPath Dot-notation field path (e.g., "field1.field2")
   * @param context Resolution context
   * @param preserveType Whether to preserve the type of the result (vs. string conversion)
   * @returns Resolved field value (type preserved if preserveType is true)
   */
  async resolveFieldAccess(
    varName: string, 
    fieldPath: string, 
    context: ResolutionContext,
    preserveType: boolean = false
  ): Promise<any> {
    // Log additional debug information for variable embed handling
    const isVariableEmbed = (context as any).isVariableEmbed === true;
    const disablePathPrefixing = (context as any).disablePathPrefixing === true;
    
    if (isVariableEmbed || disablePathPrefixing) {
      logger.debug(`Field access in variable embed context: ${varName}.${fieldPath}`, {
        isVariableEmbed,
        disablePathPrefixing,
        preserveType
      });
    }
    try {
      // Get the base variable
      const value = await this.getVariable(varName, context);
      if (value === undefined) {
        throw VariableResolutionErrorFactory.variableNotFound(varName);
      }
      
      // No fields to access - return base variable
      if (!fieldPath) {
        // If preserveType is false, convert to string
        if (!preserveType) {
          return this.convertToString(value);
        }
        return value;
      }
      
      // Split the field path
      const fields = fieldPath.split('.').map(field => {
        // Check if this is a numeric index
        const numIndex = parseInt(field, 10);
        if (!isNaN(numIndex)) {
          return { type: 'index' as const, value: numIndex };
        }
        // Otherwise it's a field name
        return { type: 'field' as const, value: field };
      });
      
      // Access the fields
      // Use the internal accessFields method with proper error handling
      const result = await this.accessFields(value, fields, context, varName);
      
      // If preserveType is false, convert to string
      if (!preserveType) {
        return this.convertToString(result);
      }
      
      // Otherwise return the raw value with deep cloning to preserve type
      if (result !== null && result !== undefined) {
        if (Array.isArray(result)) {
          return [...result]; // Return a copy of the array
        } else if (typeof result === 'object') {
          return { ...result as Record<string, unknown> }; // Return a copy of the object
        }
      }
      
      return result;
    } catch (error) {
      // Log the error for diagnostic purposes
      logger.error('Error in resolveFieldAccess', {
        varName,
        fieldPath,
        preserveType,
        error: error instanceof Error ? error.message : String(error)
      });
      
      // Track resolution error if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          'field-access-error',
          JSON.stringify({
            varName,
            fieldPath,
            preserveType,
            context: JSON.stringify(context)
          }),
          false,
          undefined,
          error instanceof Error ? error.message : String(error)
        );
      }
      
      // Rethrow to maintain behavior
      throw error;
    }
  }

  /**
   * Debug version of field access that returns detailed information
   * This is used for testing and debugging
   */
  debugFieldAccess(obj: any, fields: string[], context: ResolutionContext): any {
    // Start with the base value
    let current = obj;
    const path = [];
    
    try {
      // Handle each field
      for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        path.push(field);
        
        // Check if current value exists
        if (current === undefined || current === null) {
          return {
            success: false,
            error: `Cannot access field ${field} in undefined value`,
            path: path.join('.'),
            result: undefined
          };
        }
        
        // Try to parse as number for array access
        const numIndex = parseInt(field, 10);
        if (!isNaN(numIndex)) {
          // Array access
          if (Array.isArray(current)) {
            if (numIndex >= 0 && numIndex < current.length) {
              current = current[numIndex];
            } else {
              return {
                success: false,
                error: `Array index ${numIndex} out of bounds for array of length ${current.length}`,
                path: path.join('.'),
                result: undefined
              };
            }
          } else {
            return {
              success: false,
              error: `Cannot access array index in non-array value`,
              path: path.join('.'),
              type: typeof current,
              result: undefined
            };
          }
        } else {
          // Field access
          if (typeof current === 'object' && current !== null) {
            if (field in current) {
              current = current[field];
            } else {
              return {
                success: false,
                error: `Field ${field} not found in object`,
                path: path.join('.'),
                result: undefined
              };
            }
          } else {
            return {
              success: false,
              error: `Cannot access field in non-object value`,
              path: path.join('.'),
              type: typeof current,
              result: undefined
            };
          }
        }
      }
      
      // Success
      return {
        success: true,
        path: path.join('.'),
        result: current
      };
    } catch (error) {
      // Unexpected error
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        path: path.join('.'),
        result: undefined
      };
    }
  }
  
  /**
   * Check if the content contains variable references
   */
  private containsVariableReferences(content: string): boolean {
    // Check for {{variable}} syntax
    const hasStandardVars = content.includes('{{') && content.includes('}}');
    
    // Check for $variable path syntax
    const hasPathVars = content.includes(') && /\$[a-zA-Z0-9_]+/.test(content);
    
    return hasStandardVars || hasPathVars;
  }

  /**
   * Parse the content to extract variable references
   */
  private async parseContent(content: string): Promise<MeldNode[]> {
    // Try to use parser service first
    if (this.parserService) {
      try {
        return await this.parserService.parse(content);
      } catch (error) {
        logger.debug('Error using parser service, falling back to regex', { error });
      }
    }
    
    // Try parser client if available
    if (this.parserClient) {
      try {
        return await this.parserClient.parseString(content);
      } catch (error) {
        logger.debug('Error using parser client, falling back to regex', { error });
      }
    }
    
    // Fall back to regex parsing
    return this.parseWithRegex(content);
  }
  
  /**
   * Get a variable value by name
   */
  private async getVariable(name: string, context: ResolutionContext): Promise<any> {
    logger.debug(`Getting variable '${name}'`, {
      variableName: name,
      contextStrict: context.strict,
      allowedTypes: context.allowedVariableTypes
    });
    
    // Track resolution attempt if tracking is enabled
    if (this.resolutionTracker) {
      this.resolutionTracker.trackAttemptStart(name, 'getVariable');
    }
    
    // Check if this is a nested variable reference
    if (name.includes('{{')) {
      logger.debug(`Resolving nested variable reference: ${name}`);
      const result = await this.resolveNestedVariableReference('{{' + name + '}}', context);
      
      // Track the resolution result if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'nested-variable-reference',
          result !== undefined,
          result,
          result === undefined ? 'Nested variable not found' : undefined
        );
      }
      
      return result;
    }

    // First try as text variable
    const textValue = context.state.getTextVar(name);
    if (textValue !== undefined) {
      logger.debug(`Found text variable '${name}'`, {
        value: typeof textValue === 'string' ? textValue : JSON.stringify(textValue),
        type: typeof textValue
      });
      
      // Track the resolution result if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'text-variable',
          true,
          textValue,
          undefined
        );
      }
      
      return textValue;
    }

    // Then try as data variable - check if we're getting an actual object 
    // or a stringified object which can happen in some test cases
    let dataValue = context.state.getDataVar(name);
    if (dataValue !== undefined) {
      logger.debug(`Found data variable '${name}'`, {
        valueType: typeof dataValue,
        isArray: Array.isArray(dataValue),
        preview: typeof dataValue === 'object' ? JSON.stringify(dataValue).substring(0, 100) : String(dataValue),
        rawValue: dataValue
      });
      
      // If dataValue is a string but looks like JSON, try to parse it
      if (typeof dataValue === 'string' && 
          (dataValue.startsWith('{') || dataValue.startsWith('['))) {
        try {
          const parsedData = JSON.parse(dataValue);
          logger.debug(`Parsed JSON string data variable '${name}'`, {
            parsedType: typeof parsedData,
            isArray: Array.isArray(parsedData),
            parsedPreview: JSON.stringify(parsedData).substring(0, 100)
          });
          
          // Track the resolution result if tracking is enabled
          if (this.resolutionTracker) {
            this.resolutionTracker.trackResolutionAttempt(
              name,
              'data-variable-parsed-from-string',
              true,
              parsedData,
              undefined
            );
          }
          
          return parsedData;
        } catch (e) {
          // If parsing fails, just use the string value
          logger.debug(`Failed to parse data variable '${name}' as JSON, using as string`, {
            error: e instanceof Error ? e.message : String(e)
          });
          
          // Track the failed parsing if tracking is enabled
          if (this.resolutionTracker) {
            this.resolutionTracker.trackResolutionAttempt(
              name,
              'data-variable-parse-failed',
              true,
              dataValue,
              e instanceof Error ? e.message : String(e)
            );
          }
        }
      }
      
      // Track the resolution result if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'data-variable',
          true,
          dataValue,
          undefined
        );
      }
      
      return dataValue;
    }

    // Finally try as path variable
    const pathValue = context.state.getPathVar(name);
    if (pathValue !== undefined) {
      logger.debug(`Found path variable '${name}'`, {
        value: typeof pathValue === 'string' ? pathValue : JSON.stringify(pathValue),
        type: typeof pathValue
      });
      
      // Track the resolution result if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'path-variable',
          true,
          pathValue,
          undefined
        );
      }
      
      return pathValue;
    }

    // Variable not found - always throw in strict mode
    if (context.strict) {
      logger.warn(`Variable '${name}' not found and strict mode is enabled, throwing error`);
      
      // Track the failed resolution if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'variable-not-found',
          false,
          undefined,
          `Variable '${name}' not found`
        );
      }
      
      throw VariableResolutionErrorFactory.variableNotFound(name);
    }
    
    logger.warn(`Variable '${name}' not found but strict mode is disabled, returning undefined`);
    
    // Track the missing variable in non-strict mode if tracking is enabled
    if (this.resolutionTracker) {
      this.resolutionTracker.trackResolutionAttempt(
        name,
        'variable-not-found-non-strict',
        false,
        undefined,
        `Variable '${name}' not found`
      );
    }
    
    return undefined;  // Return undefined instead of '' to signal missing variable
  }

  /**
   * Convert a value to a string representation
   * 
   * @param value The value to convert to string
   * @param formattingContext Optional formatting context to control output format
   * @returns Formatted string representation
   */
  convertToString(
    value: any, 
    formattingContext?: { 
      isBlock?: boolean; 
      nodeType?: string; 
      linePosition?: 'start' | 'middle' | 'end';
      isTransformation?: boolean;
    }
  ): string {
    // Handle null and undefined
    if (value === null || value === undefined) {
      return '';
    }

    // Handle text nodes
    if (isTextNode(value)) {
      return value.content;
    }

    // Handle variable reference nodes
    if (isVariableReferenceNode(value)) {
      return value.identifier;
    }
    
    // Determine the formatting context
    const formatContext: FormatContext = formattingContext?.isBlock ? 'block' : 'inline';
    const formatOutput = formattingContext?.isBlock || 
                        formattingContext?.nodeType === 'embed' || 
                        !formattingContext; // Default to formatted output for direct reference

    // Delegate to the enhanced private method
    return this.formatValueAsString(value, formatOutput, formatContext);
  }

  /**
   * Convert a value to string representation with context-aware formatting
   * Private helper method used by convertToString
   * 
   * @param value The value to convert to string
   * @param formatOutput Whether to format the output (true for block format, false for inline)
   * @param formatContext Optional formatting context to control output format
   * @returns Formatted string representation
   */
  private formatValueAsString(value: any, formatOutput = false, formatContext: FormatContext = 'inline'): string {
    if (value === undefined || value === null) {
      return '';
    }

    if (typeof value === 'string') {
      return value;
    }

    if (typeof value === 'number' || typeof value === 'boolean' || typeof value === 'bigint') {
      return String(value);
    }

    // Handle array values with standardized formatting
    if (Array.isArray(value)) {
      // Block context formatting (for multiline output)
      if (formatContext === 'block') {
        // For arrays containing objects, use proper JSON indentation
        if (this.isArrayOfObjects(value)) {
          return JSON.stringify(value, null, 2);
        }
        
        // For arrays with nested arrays or complex structures, use proper JSON indentation
        if (this.hasComplexStructure(value)) {
          return JSON.stringify(value, null, 2);
        }
        
        // If formatOutput is true (for variable embeds), use pretty JSON format
        if (formatOutput) {
          return JSON.stringify(value, null, 2);
        }
        
        // Simple arrays (strings, numbers, etc.) in block context get comma-space formatting
        return value.map(item => this.formatValueAsString(item, formatOutput, 'inline')).join(', ');
      }
      
      // Inline context - always use comma-space formatting
      return value.map(item => this.formatValueAsString(item, formatOutput, 'inline')).join(', ');
    }

    // Handle object values with standardized formatting
    if (typeof value === 'object') {
      try {
        // Block context formatting (for multiline output)
        if (formatContext === 'block') {
          // Use 2-space indentation for pretty printing
          return JSON.stringify(value, null, 2);
        }
        
        // Inline context - compact JSON without whitespace
        return JSON.stringify(value);
      } catch (error) {
        // Just in case JSON.stringify fails
        return '[Object]';
      }
    }

    // Default fallback for other types
    return String(value);
  }

  private shouldArrayBePrettyPrinted(arr: any[]): boolean {
    // Arrays should be pretty-printed if:
    // 1. They contain objects - especially for the enhanced-field-access test
    if (arr.length > 0 && arr.every(item => typeof item === 'object' && item !== null && !Array.isArray(item))) {
      return true;
    }
    
    // 2. They contain nested arrays
    // 3. They are longer than 5 items
    if (arr.length > 5) {
      return true;
    }
    
    return arr.some(item => {
      if (typeof item === 'object' && item !== null) {
        return true;
      }
      
      if (Array.isArray(item)) {
        return true;
      }
      
      const stringified = String(item);
      return stringified.length > 20;
    });
  }
  
  // Helper to identify arrays of objects (for proper JSON indentation)
  private isArrayOfObjects(arr: any[]): boolean {
    if (arr.length === 0) {
      return false;
    }
    
    // Check if all items in the array are objects (not null, not arrays)
    return arr.some(item => 
      typeof item === 'object' && 
      item !== null && 
      !Array.isArray(item) &&
      Object.keys(item).length > 0
    );
  }

  /**
   * Format a JSON string to be more readable in inline context
   * Ensures spaces after colons and commas
   */
  private formatJsonString(jsonStr: string): string {
    return jsonStr
      .replace(/,"/g, ', "')  // Add space after commas
      .replace(/:{/g, ': {')  // Add space after colons followed by object
      .replace(/:\[/g, ': [') // Add space after colons followed by array
      .replace(/":"/g, '": "'); // Add space after colon in key-value pairs
  }
  
  /**
   * Extract all variable references from the given text
   * @param text The text to extract references from
   * @returns Array of variable references
   */
  extractReferences(text: string): string[] {
    // Extract all variable references using regex
    const references = new Set<string>();
    const variableRegex = /\{\{([^}]+)\}\}/g;
    let match;
    
    while ((match = variableRegex.exec(text)) !== null) {
      const reference = match[1];
      // For field access, only include the base variable name
      const baseName = reference.split('.')[0];
      references.add(baseName);
    }
    
    return Array.from(references);
  }
  
  /**
   * Extract variable references asynchronously using AST when possible
   * @param text The text to extract references from
   * @returns Array of variable references and information
   */
  async extractReferencesAsync(text: string): Promise<string[]> {
    try {
      // Parse the text into nodes
      const nodes = await this.parseContent(text);
      return this.extractVariableReferencesFromNodes(nodes);
    } catch (error) {
      // Fall back to regex-based extraction
      logger.debug('Error parsing content for reference extraction, falling back to regex', { error });
      return this.extractReferences(text);
    }
  }
  
  /**
   * Extract variable references from AST nodes
   * @param nodes The AST nodes to extract references from
   * @returns Array of variable references
   */
  private extractVariableReferencesFromNodes(nodes: MeldNode[]): string[] {
    const references = new Set<string>();
    
    for (const node of nodes) {
      if (isVariableReferenceNode(node)) {
        references.add(node.identifier);
      }
    }
    
    return Array.from(references);
  }

  /**
   * Parse a variable reference into base name and fields
   */
  private parseVariableReference(reference: string): { baseName: string, fields: Field[] } {
    // Check if this is a field access
    if (reference.includes('.')) {
      const parts = reference.split('.');
      const baseName = parts[0];
      const fields = parts.slice(1).map(field => {
        // Check if this is a numeric index
        const numIndex = parseInt(field, 10);
        if (!isNaN(numIndex)) {
          return { type: 'index' as const, value: numIndex };
        }
        // Otherwise it's a field name
        return { type: 'field' as const, value: field };
      }) as Field[];
      
      return { baseName, fields };
    }
    
    // Simple variable reference
    return { baseName: reference, fields: [] };
  }
  
  /**
   * Access fields in a nested object
   */
  private async accessFields(obj: any, fields: any[], context: ResolutionContext, variableName: string): Promise<any> {
    let current = obj;
    
    // Check if this is a variable embed context and log details
    const isVariableEmbed = (context as any).isVariableEmbed === true;
    const disablePathPrefixing = (context as any).disablePathPrefixing === true;
    
    if (isVariableEmbed || disablePathPrefixing) {
      logger.debug(`Access fields in variable embed context: ${variableName}`, {
        fields: JSON.stringify(fields),
        isVariableEmbed,
        disablePathPrefixing,
        objectType: typeof obj,
        isArray: Array.isArray(obj)
      });
    }
    
    // Try to parse stringified JSON if needed
    if (typeof current === 'string' && (current.startsWith('{') || current.startsWith('['))) {
      try {
        const parsed = JSON.parse(current);
        logger.debug(`Successfully parsed stringified JSON for variable '${variableName}'`, {
          originalType: 'string',
          parsedType: typeof parsed,
          isArray: Array.isArray(parsed)
        });
        current = parsed;
      } catch (error) {
        // Not valid JSON, continue with the string value
        logger.debug(`Failed to parse string as JSON for variable '${variableName}'`, {
          error: error instanceof Error ? error.message : String(error),
          value: current
        });
      }
    }
    
    // Log debug information to help with troubleshooting
    logger.debug(`Accessing fields for variable '${variableName}'`, {
      initialObjectType: typeof current,
      isArray: Array.isArray(current),
      rawValue: current,
      numFields: fields?.length,
      fields: JSON.stringify(fields)
    });
    
    // Track field access attempt if tracking is enabled
    if (this.resolutionTracker) {
      this.resolutionTracker.trackAttemptStart(
        `${variableName}.fields`,
        'field-access',
        { 
          initialType: typeof current,
          isArray: Array.isArray(current),
          fields: JSON.stringify(fields)
        }
      );
    }
    
    // Process fields in order
    for (let i = 0; i < fields.length; i++) {
      const field = fields[i];
      const fieldValue = field.value !== undefined ? field.value : field;
      const fieldType = field.type || 'field';
      const fieldPath = fields.slice(0, i + 1).map(f => 
        f.type === 'index' ? `[${f.value}]` : `.${f.value}`
      ).join('').replace(/^\./, '');
      
      // Make sure we have a valid object to access fields on
      if (current === null || current === undefined) {
        const errorMessage = `Cannot access field '${fieldValue}' of ${current} for variable '${variableName}'`;
        const detailedMessage = `Cannot access field '${fieldValue}' at path '${fieldPath}' because the parent value is ${current}`;
        logger.error(errorMessage, { fieldPath, parentValue: current });
        
        // Track the failed field access if tracking is enabled
        if (this.resolutionTracker) {
          this.resolutionTracker.trackResolutionAttempt(
            `${variableName}.${fieldValue}`,
            'field-access-null-undefined',
            false,
            undefined,
            detailedMessage
          );
        }
        
        throw VariableResolutionErrorFactory.invalidAccess(
          variableName,
          detailedMessage
        );
      }
      
      // Log debug information about the current field access
      logger.debug(`Processing field ${i}`, { 
        fieldType, 
        fieldValue,
        currentType: typeof current,
        isArray: Array.isArray(current),
        currentValue: current
      });
      
      // If current is not an object or array and we're trying to access a property, throw error
      if (typeof current !== 'object' && !Array.isArray(current)) {
        const errorMessage = `Cannot access field '${fieldValue}' of non-object value (type: ${typeof current}) for variable '${variableName}'`;
        const detailedMessage = `Cannot access field '${fieldValue}' at path '${fieldPath}' because the parent value is of type '${typeof current}' (${String(current).substring(0, 50)}${String(current).length > 50 ? '...' : ''})`;
        logger.error(errorMessage, { 
          fieldPath, 
          parentType: typeof current, 
          parentValue: current 
        });
        
        // Track the failed field access if tracking is enabled
        if (this.resolutionTracker) {
          this.resolutionTracker.trackResolutionAttempt(
            `${variableName}.${fieldValue}`,
            'field-access-non-object',
            false,
            undefined,
            detailedMessage
          );
        }
        
        throw VariableResolutionErrorFactory.invalidAccess(
          variableName,
          detailedMessage
        );
      }
      
      // Field access (regular property or array index)
      if (fieldType === 'index' && Array.isArray(current)) {
        // Array index access
        const index = typeof fieldValue === 'number' ? fieldValue : parseInt(fieldValue as string, 10);
        if (isNaN(index)) {
          const errorMessage = `Invalid array index: '${fieldValue}' is not a number for variable '${variableName}'`;
          const detailedMessage = `Invalid array index: '${fieldValue}' at path '${fieldPath}' is not a valid number`;
          logger.error(errorMessage, { fieldPath, fieldValue });
          
          // Track the failed field access if tracking is enabled
          if (this.resolutionTracker) {
            this.resolutionTracker.trackResolutionAttempt(
              `${variableName}[${fieldValue}]`,
              'field-access-invalid-index',
              false,
              undefined,
              detailedMessage
            );
          }
          
          throw VariableResolutionErrorFactory.invalidAccess(
            variableName,
            detailedMessage
          );
        }
        
        if (index < 0 || index >= current.length) {
          const errorMessage = `Array index ${index} out of bounds [0-${current.length-1}] for variable '${variableName}'`;
          const detailedMessage = `Array index ${index} at path '${fieldPath}' is out of bounds [0-${current.length-1}]`;
          logger.error(errorMessage, { fieldPath, index, arrayLength: current.length });
          
          // Track the failed field access if tracking is enabled
          if (this.resolutionTracker) {
            this.resolutionTracker.trackResolutionAttempt(
              `${variableName}[${index}]`,
              'field-access-index-out-of-bounds',
              false,
              undefined,
              detailedMessage
            );
          }
          
          throw VariableResolutionErrorFactory.indexOutOfBounds(
            variableName,
            index,
            current.length
          );
        }
        
        current = current[index];
        logger.debug(`Accessed array index ${index}`, { 
          resultType: typeof current,
          isResultArray: Array.isArray(current),
          value: current
        });
      } else {
        // Regular property access
        const propName = String(fieldValue);
        
        if (!(propName in current)) {
          // Check if we have a stringified JSON object that needs parsing
          if (typeof current === 'string' && (current.startsWith('{') || current.startsWith('['))) {
            try {
              const parsed = JSON.parse(current);
              if (propName in parsed) {
                logger.debug(`Found property '${propName}' in parsed JSON string`, {
                  parsedType: typeof parsed,
                  isArray: Array.isArray(parsed)
                });
                current = parsed;
                current = current[propName];
                continue;
              }
            } catch (error) {
              // Not valid JSON, continue with normal error handling
              logger.debug(`Failed to parse string as JSON for property access`, {
                error: error instanceof Error ? error.message : String(error)
              });
            }
          }
          
          const errorMessage = `Field '${propName}' not found in variable '${variableName}'`;
          const detailedMessage = `Field '${propName}' at path '${fieldPath}' not found in variable '${variableName}'`;
          const availableKeys = typeof current === 'object' && current !== null ? 
            Object.keys(current) : [];
          
          logger.error(errorMessage, { 
            fieldPath, 
            availableKeys,
            parentType: typeof current,
            parentValue: current
          });
          
          if (context.strict) {
            // Track the failed field access if tracking is enabled
            if (this.resolutionTracker) {
              this.resolutionTracker.trackResolutionAttempt(
                `${variableName}.${propName}`,
                'field-access-not-found',
                false,
                undefined,
                detailedMessage
              );
            }
            
            // Create a more detailed error message that includes available keys
            const keysInfo = availableKeys.length > 0 
              ? `Available keys: ${availableKeys.join(', ')}` 
              : 'No keys available';
            
            throw VariableResolutionErrorFactory.fieldNotFound(
              variableName,
              `${propName} (${keysInfo})`
            );
          } else {
            logger.warn(`Field '${propName}' not found in variable '${variableName}', returning empty string (strict mode off)`);
            
            // Track the failed field access in non-strict mode if tracking is enabled
            if (this.resolutionTracker) {
              this.resolutionTracker.trackResolutionAttempt(
                `${variableName}.${propName}`,
                'field-access-not-found-non-strict',
                false,
                '',
                detailedMessage
              );
            }
            
            return '';
          }
        }
        
        current = current[propName];
        logger.debug(`Accessed property ${propName}`, { 
          resultType: typeof current,
          isResultArray: Array.isArray(current),
          value: current
        });
      }
    }
    
    // Track successful field access if tracking is enabled
    if (this.resolutionTracker) {
      this.resolutionTracker.trackResolutionAttempt(
        `${variableName}.fields`,
        'field-access-success',
        true,
        current,
        undefined
      );
    }
    
    return current;
  }

  /**
   * Resolve a variable reference in a field name
   * This allows for dynamic field access like obj[varName]
   */
  private async resolveVariableInFieldName(fieldName: string, context: ResolutionContext): Promise<string | number> {
    // Check if the field name contains variable references
    if (fieldName.includes('{{')) {
      // Resolve any variable references in the field name
      const resolvedName = await this.resolve(fieldName, context);
      
      // Try to convert to number if it looks like an array index
      const numIndex = parseInt(resolvedName, 10);
      if (!isNaN(numIndex)) {
        return numIndex;
      }
      
      return resolvedName;
    }
    
    // No variables to resolve
    return fieldName;
  }

  /**
   * Resolves a variable reference that contains another variable reference
   * For example: {{var_{{nested}}}}
   * @param reference The reference containing nested variables
   * @param context Resolution context
   * @returns Resolved variable value
   * @throws MeldResolutionError if resolution fails
   */
  private async resolveNestedVariableReference(reference: string, context: ResolutionContext): Promise<string> {
    try {
      // First try to use directly injected resolution service
      if (this.resolutionService) {
        try {
          return await this.resolutionService.resolveInContext(reference, context);
        } catch (error) {
          logger.debug('Error using injected resolutionService.resolveInContext, trying fallback', {
            error: error instanceof Error ? error.message : String(error),
            reference
          });
          // If this fails and strict mode is on, rethrow
          if (context.strict) {
            throw error;
          }
          // Otherwise continue with fallback approaches
        }
      }
      
      // Ensure factory is initialized for client approach
      this.ensureFactoryInitialized();
      
      // Try to use the resolution client
      if (this.resolutionClient) {
        try {
          if (this.resolutionClient.resolveInContext) {
            return await this.resolutionClient.resolveInContext(reference, context);
          }
          // Fallback to regular resolveVariables
          return await this.resolutionClient.resolveVariables(reference, context);
        } catch (error) {
          // Check if this is already a MeldResolutionError (like circular reference detection)
          if (error instanceof MeldResolutionError) {
            if (context.strict) {
              throw error;
            }
          }
          
          logger.debug('Error using resolutionClient.resolveInContext', { 
            error: error instanceof Error ? error.message : String(error),
            reference 
          });
          
          // If strict mode is on, rethrow
          if (context.strict) {
            if (error instanceof Error) {
              throw error;
            }
            throw new Error(String(error));
          }
        }
      }
      
      // If all else fails, try to resolve directly
      const nodes = await this.parseContent(reference);
      if (nodes.length === 1 && isVariableReferenceNode(nodes[0])) {
        const node = nodes[0] as any; // Cast to any to avoid type errors
        const varName = node.identifier;
        
        // Get variable value
        const value = await this.getVariable(varName, context);
        if (value === undefined) {
          if (context.strict) {
            throw VariableResolutionErrorFactory.variableNotFound(varName);
          }
          return '';
        }
        
        // Handle fields access for both new and legacy node types
        if ((node.type === 'VariableReference' && node.fields && node.fields.length > 0) ||
            (node.type === 'DataVar' && node.fields && node.fields.length > 0) ||
            (node.type === 'TextVar' && node.fields && node.fields.length > 0)) {
          const fields = node.fields;
          try {
            const fieldValue = await this.accessFields(value, fields, context, varName);
            return this.convertToString(fieldValue);
          } catch (error) {
            if (context.strict) {
              throw error;
            }
            return '';
          }
        }
        
        return this.convertToString(value);
      }
      
      // Not a variable reference
      return reference;
    } catch (error) {
      // Log the error for diagnostic purposes
      logger.error('Error in resolveNestedVariableReference', {
        reference,
        error: error instanceof Error ? error.message : String(error)
      });
      
      // Track resolution error if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          'nested-variable-resolution-error',
          JSON.stringify({
            reference,
            context: JSON.stringify(context)
          }),
          false,
          undefined,
          error instanceof Error ? error.message : String(error)
        );
      }
      
      // Always propagate errors if strict mode is enabled
      if (context.strict) {
        throw error;
      }
      
      // In non-strict mode, return empty string for errors
      return '';
    }
  }

  /**
   * Parse content using regex-based approach as a fallback
   * This is used when AST-based parsing fails
   */
  private parseWithRegex(content: string): MeldNode[] {
    const result: MeldNode[] = [];
    
    // Simple implementation to avoid edge cases in the regex approach
    let remaining = content;
    let startIndex = remaining.indexOf('{{');
    
    while (startIndex !== -1) {
      // Add text before the variable
      if (startIndex > 0) {
        result.push({
          type: 'Text',
          content: remaining.substring(0, startIndex)
        } as TextNode);
      }
      
      const endIndex = remaining.indexOf('}}', startIndex);
      if (endIndex === -1) {
        // No closing braces - treat the rest as text
        result.push({
          type: 'Text',
          content: remaining
        } as TextNode);
        break;
      }
      
      const varContent = remaining.substring(startIndex + 2, endIndex);
      
      // Check if the variable reference contains another variable reference
      if (varContent.includes('{{')) {
        // This is a nested reference - keep it as text for later processing
        result.push({
          type: 'Text',
          content: remaining.substring(startIndex, endIndex + 2)
        } as TextNode);
      } else {
        // Parse as a regular variable reference
        const { baseName, fields } = this.parseVariableReference(varContent);
        const valueType = fields && fields.length > 0 ? 'data' : 'text';
        
        // Create variable reference node using factory if available
        if (this.variableNodeFactory) {
          // Use factory pattern
          result.push(this.variableNodeFactory.createVariableReferenceNode(baseName, valueType, fields));
        } else {
          // Legacy fallback - import is maintained at the top during transition
          logger.warn('VariableNodeFactory not available, using legacy function');
          // We kept the legacy import as fallback
          const legacyCreateNode = require('@core/syntax/types/variables.js').createVariableReferenceNode;
          result.push(legacyCreateNode(baseName, valueType, fields));
        }
      }
      
      // Move to the next position
      remaining = remaining.substring(endIndex + 2);
      startIndex = remaining.indexOf('{{');
    }
    
    // Add any remaining text
    if (remaining.length > 0) {
      result.push({
        type: 'Text',
        content: remaining
      } as TextNode);
    }
    
    return result;
  }

  /**
   * Determines if an array has complex structure that would benefit from pretty-printing as JSON
   * @param arr The array to check
   * @returns True if the array contains nested arrays, long items, or is a long array
   */
  private hasComplexStructure(arr: any[]): boolean {
    // Arrays have complex structure if:
    
    // 1. They contain nested arrays
    const hasNestedArrays = arr.some(item => Array.isArray(item));
    if (hasNestedArrays) {
      return true;
    }
    
    // 2. They are longer than 5 items
    if (arr.length > 5) {
      return true;
    }
    
    // 3. They contain long values
    return arr.some(item => {
      // Handle objects with multiple properties
      if (typeof item === 'object' && item !== null && !Array.isArray(item)) {
        return Object.keys(item).length > 1;
      }
      
      // Handle long string values
      if (typeof item === 'string' && item.length > 20) {
        return true;
      }
      
      return false;
    });
  }
}

```
    <ServicesPipelineResolutionserviceResolversTypesTs>
```javascript
import type { MeldNode } from '@core/syntax/types.js';

/**
 * Represents a field access in a variable reference
 * Examples: object.field, array[0]
 */
export interface Field {
  type: 'field' | 'index';
  value: string | number;
}

/**
 * Text node containing static content
 */
export interface TextNode extends MeldNode {
  type: 'Text';
  value: string; 
  content?: string; // Support legacy property name
}

/**
 * Base node type for variable references
 */
export interface VariableReferenceNode extends MeldNode {
  type: 'VariableReference';
  identifier: string;
  fields?: Field[];
  isVariableReference: boolean;
}

/**
 * Text variable reference (previously ${var})
 */
export interface TextVarNode extends VariableReferenceNode {
  valueType?: 'text';
}

/**
 * Data variable reference (previously #{data})
 */
export interface DataVarNode extends VariableReferenceNode {
  valueType?: 'data';
}

/**
 * Directive node (@directive)
 */
export interface DirectiveNode extends MeldNode {
  type: 'Directive';
  directive: {
    kind: string;
    identifier: string;
    value?: string;
    [key: string]: any;
  };
}

/**
 * Type guard for text nodes
 */
export function isTextNode(node: MeldNode): node is TextNode {
  return node.type === 'Text';
}

/**
 * Type guard for variable reference nodes
 */
export function isVariableReferenceNode(node: MeldNode): node is VariableReferenceNode {
  return node.type === 'VariableReference';
}

/**
 * Type guard for text variable nodes
 */
export function isTextVarNode(node: MeldNode): node is TextVarNode {
  return node.type === 'VariableReference' && (!('valueType' in node) || (node as any).valueType === 'text');
}

/**
 * Type guard for data variable nodes
 */
export function isDataVarNode(node: MeldNode): node is DataVarNode {
  return node.type === 'VariableReference' && 'valueType' in node && (node as any).valueType === 'data';
}

/**
 * Type guard for directive nodes
 */
export function isDirectiveNode(node: MeldNode): node is DirectiveNode {
  return node.type === 'Directive';
}
```
    </ServicesPipelineResolutionserviceResolversTypesTs>
  </ValidationCriteria>
  <TaskProposeJustifyDefineTypeImprovementsForYourCode>
Examine your service&apos;s code (`
    <ServicesPipelineResolutionserviceResolversVariablereferenceresolverTs>
```javascript
import type { IStateService } from '@services/state/StateService/IStateService.js';
import type { ResolutionContext } from '@services/pipeline/ResolutionService/IResolutionService.js';
import { ResolutionErrorCode } from '@services/pipeline/ResolutionService/IResolutionService.js';
import { MeldResolutionError } from '@core/errors/MeldResolutionError.js';
import { ErrorSeverity } from '@core/errors/MeldError.js';
import type { IResolutionService } from '@services/pipeline/ResolutionService/IResolutionService.js';
import type { MeldNode, TextNode, DirectiveNode, NodeType } from '@core/syntax/types/index.js';
import { resolutionLogger as logger } from '@core/utils/logger.js';
import { VariableResolutionTracker } from '@tests/utils/debug/VariableResolutionTracker/index.js';
import { container, inject, injectable } from 'tsyringe';
import type { IResolutionServiceClient } from '@services/pipeline/ResolutionService/interfaces/IResolutionServiceClient.js';
import { ResolutionServiceClientFactory } from '@services/pipeline/ResolutionService/factories/ResolutionServiceClientFactory.js';
import type { IParserServiceClient } from '@services/pipeline/ParserService/interfaces/IParserServiceClient.js';
import { ParserServiceClientFactory } from '@services/pipeline/ParserService/factories/ParserServiceClientFactory.js';
import type { IParserService } from '@services/pipeline/ParserService/IParserService.js';
import { 
  VariableType,
  Field,
  IVariableReference
} from '@core/syntax/types/interfaces/index.js';
import { 
  VariableNodeFactory 
} from '@core/syntax/types/factories/index.js';
// Keep legacy imports for backward compatibility during transition
import {
  SPECIAL_PATH_VARS,
  ENV_VAR_PREFIX,
  VAR_PATTERNS
} from '@core/syntax/types/variables.js';
import { VariableResolutionErrorFactory } from '@services/pipeline/ResolutionService/resolvers/error-factory.js';

// Define a format context type
type FormatContext = 'inline' | 'block';

// Type guard functions
function isTextNode(node: MeldNode): node is TextNode {
  return node.type === 'Text' && 'content' in node;
}

function isDirectiveNode(node: MeldNode): node is DirectiveNode {
  return node.type === 'Directive' && 'directive' in node;
}

/**
 * Local type guard function that uses the factory pattern internally
 * @param node Node to check
 * @returns True if the node is a variable reference node
 */
function isVariableReferenceNode(node: any): node is IVariableReference {
  // Try to use factory pattern first if available in the container
  try {
    const factory = container.resolve(VariableNodeFactory);
    return factory.isVariableReferenceNode(node);
  } catch (error) {
    // Fallback to direct type checking (same logic as legacy function)
    return (
      node.type === 'VariableReference' &&
      typeof node.identifier === 'string' &&
      typeof node.valueType === 'string'
    );
  }
}

/**
 * Handles resolution of variable references ({{var}})
 * Previously used ${var} for text and #{var} for data, now unified as {{var}}
 */
export class VariableReferenceResolver {
  private readonly MAX_RESOLUTION_DEPTH = 20;
  private readonly MAX_ITERATIONS = 100;
  private resolutionTracker?: VariableResolutionTracker;
  private resolutionClient?: IResolutionServiceClient;
  private resolutionClientFactory?: ResolutionServiceClientFactory;
  private parserClient?: IParserServiceClient;
  private parserClientFactory?: ParserServiceClientFactory;
  private factoryInitialized: boolean = false;

  /**
   * Creates a new instance of the VariableReferenceResolver
   * @param stateService - State service for variable management
   * @param resolutionService - Resolution service for resolving variables
   * @param parserService - Parser service for parsing content with variables
   */
  constructor(
    private readonly stateService: IStateService,
    private readonly resolutionService?: IResolutionService,
    private readonly parserService?: IParserService,
    @inject(VariableNodeFactory) private readonly variableNodeFactory?: VariableNodeFactory
  ) {
    // Initialize the factory if it wasn't injected (for backward compatibility)
    if (!this.variableNodeFactory) {
      logger.debug('VariableNodeFactory not injected, resolving from container');
      try {
        this.variableNodeFactory = container.resolve(VariableNodeFactory);
      } catch (error) {
        logger.warn('Failed to resolve VariableNodeFactory from container', {
          error: error instanceof Error ? error.message : String(error)
        });
        // We'll fall back to legacy functions if needed
      }
    }
  }

  /**
   * Lazily initialize the service client factories
   * This is called only when needed to avoid circular dependencies
   * @throws Error if factory initialization fails
   */
  private ensureFactoryInitialized(): void {
    // If already initialized, return early
    if (this.factoryInitialized) {
      return;
    }
    
    // Mark as initialized to prevent recursive calls
    this.factoryInitialized = true;
    
    // Initialize resolution client factory if needed
    if (!this.resolutionService && !this.resolutionClient) {
      try {
        // Resolve the factory from the container
        this.resolutionClientFactory = container.resolve('ResolutionServiceClientFactory');
        this.initializeResolutionClient();
        logger.debug('Initialized ResolutionServiceClient via factory');
      } catch (error) {
        // Log error but don't fail - we might be able to continue with other mechanisms
        logger.warn('Failed to initialize ResolutionServiceClient', {
          error: error instanceof Error ? error.message : String(error)
        });
      }
    } else {
      logger.debug('Using directly injected ResolutionService, skipping client factory');
    }
    
    // Initialize parser client factory if needed
    if (!this.parserService && !this.parserClient) {
      try {
        // Resolve the factory from the container
        this.parserClientFactory = container.resolve('ParserServiceClientFactory');
        this.initializeParserClient();
        logger.debug('Initialized ParserServiceClient via factory');
      } catch (error) {
        // Log error but don't fail - we'll fall back to regex parsing
        logger.warn('Failed to initialize ParserServiceClient, will use regex fallback', {
          error: error instanceof Error ? error.message : String(error)
        });
      }
    } else {
      logger.debug('Using directly injected ParserService, skipping client factory');
    }
  }
  
  /**
   * Initialize the ResolutionServiceClient using the factory
   * @throws Error if client creation fails
   */
  private initializeResolutionClient(): void {
    if (!this.resolutionClientFactory) {
      logger.warn('ResolutionServiceClientFactory not available, some functionality may be limited');
      return;
    }
    
    try {
      this.resolutionClient = this.resolutionClientFactory.createClient();
      logger.debug('Successfully created ResolutionServiceClient');
    } catch (error) {
      // Don't throw, just log the error and continue without the client
      logger.warn('Failed to create ResolutionServiceClient', {
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }
  
  /**
   * Initialize the ParserServiceClient using the factory
   * @throws Error if client creation fails
   */
  private initializeParserClient(): void {
    if (!this.parserClientFactory) {
      logger.warn('ParserServiceClientFactory not available, will use regex fallback for parsing');
      return;
    }
    
    try {
      this.parserClient = this.parserClientFactory.createClient();
      logger.debug('Successfully created ParserServiceClient');
    } catch (error) {
      // Don't throw, just log the error and continue without the client
      logger.warn('Failed to create ParserServiceClient, will use regex fallback', {
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Set the resolution tracker for debugging
   * @internal
   */
  setResolutionTracker(tracker: VariableResolutionTracker): void {
    this.resolutionTracker = tracker;
  }

  /**
   * Resolves all variable references in the given text
   * @param text Text containing variable references like {{varName}}
   * @param context Resolution context
   * @returns Resolved text with all variables replaced with their values
   */
  async resolve(content: string, context: ResolutionContext): Promise<string> {
    logger.debug(`Resolving content: ${content}`, {
      content,
      contextStrict: context.strict
    });
    
    // Initialize result
    let result = '';
    
    // Provide a new context with depth tracking to prevent circular references
    const newContext: ResolutionContext & { depth?: number } = {
      ...context,
      depth: (context as any).depth !== undefined ? (context as any).depth + 1 : 1
    };
    
    // Check for max depth
    if (newContext.depth && newContext.depth > this.MAX_RESOLUTION_DEPTH) {
      // Special handling for excessive nesting
      if (context.isVariableEmbed) {
        // For variable embeds, we log a warning but don't fail completely
        logger.warn(`Maximum resolution depth exceeded in variable embed context. Depth: ${newContext.depth}`);
        // Return the original content without further resolution
        return content;
      } else {
        throw new MeldResolutionError(
          'Maximum resolution depth exceeded',
          {
            code: ResolutionErrorCode.MAX_DEPTH_EXCEEDED,
            severity: ErrorSeverity.Fatal
          }
        );
      }
    }
    
    // Parse the content into nodes
    const nodes = await this.parseContent(content);
    logger.debug(`Parsed ${nodes.length} nodes`, {
      nodeTypes: nodes.map(n => n.type).join(', ')
    });
    
    // Process each node
    for (const node of nodes) {
      // Handle text nodes
      if (isTextNode(node)) {
        logger.debug(`Processing text node: ${node.content.substring(0, 50)}${node.content.length > 50 ? '...' : ''}`);
        result += node.content;
        continue;
      }
      
      // Handle variable reference nodes
      if (isVariableReferenceNode(node)) {
        logger.debug(`Processing variable reference node: ${node.identifier}`, {
          valueType: node.valueType,
          hasFields: !!node.fields,
          fields: node.fields ? JSON.stringify(node.fields) : 'none'
        });
        
        try {
          // Get the variable value
          let value = await this.getVariable(node.identifier, newContext);
          
          // If the variable has fields, access them
          if (node.fields && node.fields.length > 0) {
            logger.debug(`Accessing fields for variable ${node.identifier}`, {
              fields: JSON.stringify(node.fields)
            });
            
            try {
              value = await this.accessFields(value, node.fields, newContext, node.identifier);
              logger.debug(`Field access result for ${node.identifier}:`, {
                valueType: typeof value,
                isArray: Array.isArray(value),
                value: typeof value === 'object' ? JSON.stringify(value).substring(0, 100) : String(value)
              });
            } catch (fieldError: any) {
              // In non-strict mode, return empty string for field access errors
              if (!newContext.strict) {
                logger.warn(`Field access error in non-strict mode, returning empty string: ${fieldError.message}`);
                value = '';
              } else {
                // In strict mode, rethrow the error
                throw fieldError;
              }
            }
          }
          
          // Convert the value to string
          let stringValue;
          if (Array.isArray(value) && this.isArrayOfObjects(value)) {
            // For arrays of objects (like the complexArray in parent-object-reference.test.ts),
            // force pretty printing with indentation
            stringValue = JSON.stringify(value, null, 2);
            logger.debug(`Pretty-printed array for ${node.identifier} with indentation`);
          } else {
            // Normal string conversion for all other types
            stringValue = this.convertToString(value);
          }
          logger.debug(`Converted ${node.identifier} to string: ${stringValue.substring(0, 100)}${stringValue.length > 100 ? '...' : ''}`);
          
          // Add to result
          result += stringValue;
        } catch (error) {
          // In non-strict mode, replace with empty string
          if (!newContext.strict) {
            logger.warn(`Error resolving variable ${node.identifier} in non-strict mode, using empty string`, {
              error: error instanceof Error ? error.message : String(error)
            });
            result += '';
          } else {
            // In strict mode, rethrow the error
            throw error;
          }
        }
        
        continue;
      }

      // Handle directive nodes (should not happen in normal operation)
      if (isDirectiveNode(node)) {
        logger.warn(`Unexpected directive node in variable resolution: ${node.directive.kind}`);
        // Skip directive nodes
        continue;
      }

      // Unknown node type
      logger.warn(`Unknown node type in variable resolution: ${node.type}`);
    }

    // If the result still contains variable references, resolve them recursively
    if (this.containsVariableReferences(result)) {
      logger.debug(`Result still contains variable references, resolving recursively: ${result}`);
      return this.resolve(result, newContext);
    }

    logger.debug(`Final resolved result: ${result}`);
    return result;
  }

  /**
   * Resolve a field access expression like varName.field1.field2
   * Enhanced version with type preservation options
   * 
   * @param varName Base variable name
   * @param fieldPath Dot-notation field path (e.g., "field1.field2")
   * @param context Resolution context
   * @param preserveType Whether to preserve the type of the result (vs. string conversion)
   * @returns Resolved field value (type preserved if preserveType is true)
   */
  async resolveFieldAccess(
    varName: string, 
    fieldPath: string, 
    context: ResolutionContext,
    preserveType: boolean = false
  ): Promise<any> {
    // Log additional debug information for variable embed handling
    const isVariableEmbed = (context as any).isVariableEmbed === true;
    const disablePathPrefixing = (context as any).disablePathPrefixing === true;
    
    if (isVariableEmbed || disablePathPrefixing) {
      logger.debug(`Field access in variable embed context: ${varName}.${fieldPath}`, {
        isVariableEmbed,
        disablePathPrefixing,
        preserveType
      });
    }
    try {
      // Get the base variable
      const value = await this.getVariable(varName, context);
      if (value === undefined) {
        throw VariableResolutionErrorFactory.variableNotFound(varName);
      }
      
      // No fields to access - return base variable
      if (!fieldPath) {
        // If preserveType is false, convert to string
        if (!preserveType) {
          return this.convertToString(value);
        }
        return value;
      }
      
      // Split the field path
      const fields = fieldPath.split('.').map(field => {
        // Check if this is a numeric index
        const numIndex = parseInt(field, 10);
        if (!isNaN(numIndex)) {
          return { type: 'index' as const, value: numIndex };
        }
        // Otherwise it's a field name
        return { type: 'field' as const, value: field };
      });
      
      // Access the fields
      // Use the internal accessFields method with proper error handling
      const result = await this.accessFields(value, fields, context, varName);
      
      // If preserveType is false, convert to string
      if (!preserveType) {
        return this.convertToString(result);
      }
      
      // Otherwise return the raw value with deep cloning to preserve type
      if (result !== null && result !== undefined) {
        if (Array.isArray(result)) {
          return [...result]; // Return a copy of the array
        } else if (typeof result === 'object') {
          return { ...result as Record<string, unknown> }; // Return a copy of the object
        }
      }
      
      return result;
    } catch (error) {
      // Log the error for diagnostic purposes
      logger.error('Error in resolveFieldAccess', {
        varName,
        fieldPath,
        preserveType,
        error: error instanceof Error ? error.message : String(error)
      });
      
      // Track resolution error if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          'field-access-error',
          JSON.stringify({
            varName,
            fieldPath,
            preserveType,
            context: JSON.stringify(context)
          }),
          false,
          undefined,
          error instanceof Error ? error.message : String(error)
        );
      }
      
      // Rethrow to maintain behavior
      throw error;
    }
  }

  /**
   * Debug version of field access that returns detailed information
   * This is used for testing and debugging
   */
  debugFieldAccess(obj: any, fields: string[], context: ResolutionContext): any {
    // Start with the base value
    let current = obj;
    const path = [];
    
    try {
      // Handle each field
      for (let i = 0; i < fields.length; i++) {
        const field = fields[i];
        path.push(field);
        
        // Check if current value exists
        if (current === undefined || current === null) {
          return {
            success: false,
            error: `Cannot access field ${field} in undefined value`,
            path: path.join('.'),
            result: undefined
          };
        }
        
        // Try to parse as number for array access
        const numIndex = parseInt(field, 10);
        if (!isNaN(numIndex)) {
          // Array access
          if (Array.isArray(current)) {
            if (numIndex >= 0 && numIndex < current.length) {
              current = current[numIndex];
            } else {
              return {
                success: false,
                error: `Array index ${numIndex} out of bounds for array of length ${current.length}`,
                path: path.join('.'),
                result: undefined
              };
            }
          } else {
            return {
              success: false,
              error: `Cannot access array index in non-array value`,
              path: path.join('.'),
              type: typeof current,
              result: undefined
            };
          }
        } else {
          // Field access
          if (typeof current === 'object' && current !== null) {
            if (field in current) {
              current = current[field];
            } else {
              return {
                success: false,
                error: `Field ${field} not found in object`,
                path: path.join('.'),
                result: undefined
              };
            }
          } else {
            return {
              success: false,
              error: `Cannot access field in non-object value`,
              path: path.join('.'),
              type: typeof current,
              result: undefined
            };
          }
        }
      }
      
      // Success
      return {
        success: true,
        path: path.join('.'),
        result: current
      };
    } catch (error) {
      // Unexpected error
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error),
        path: path.join('.'),
        result: undefined
      };
    }
  }
  
  /**
   * Check if the content contains variable references
   */
  private containsVariableReferences(content: string): boolean {
    // Check for {{variable}} syntax
    const hasStandardVars = content.includes('{{') && content.includes('}}');
    
    // Check for $variable path syntax
    const hasPathVars = content.includes(') && /\$[a-zA-Z0-9_]+/.test(content);
    
    return hasStandardVars || hasPathVars;
  }

  /**
   * Parse the content to extract variable references
   */
  private async parseContent(content: string): Promise<MeldNode[]> {
    // Try to use parser service first
    if (this.parserService) {
      try {
        return await this.parserService.parse(content);
      } catch (error) {
        logger.debug('Error using parser service, falling back to regex', { error });
      }
    }
    
    // Try parser client if available
    if (this.parserClient) {
      try {
        return await this.parserClient.parseString(content);
      } catch (error) {
        logger.debug('Error using parser client, falling back to regex', { error });
      }
    }
    
    // Fall back to regex parsing
    return this.parseWithRegex(content);
  }
  
  /**
   * Get a variable value by name
   */
  private async getVariable(name: string, context: ResolutionContext): Promise<any> {
    logger.debug(`Getting variable '${name}'`, {
      variableName: name,
      contextStrict: context.strict,
      allowedTypes: context.allowedVariableTypes
    });
    
    // Track resolution attempt if tracking is enabled
    if (this.resolutionTracker) {
      this.resolutionTracker.trackAttemptStart(name, 'getVariable');
    }
    
    // Check if this is a nested variable reference
    if (name.includes('{{')) {
      logger.debug(`Resolving nested variable reference: ${name}`);
      const result = await this.resolveNestedVariableReference('{{' + name + '}}', context);
      
      // Track the resolution result if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'nested-variable-reference',
          result !== undefined,
          result,
          result === undefined ? 'Nested variable not found' : undefined
        );
      }
      
      return result;
    }

    // First try as text variable
    const textValue = context.state.getTextVar(name);
    if (textValue !== undefined) {
      logger.debug(`Found text variable '${name}'`, {
        value: typeof textValue === 'string' ? textValue : JSON.stringify(textValue),
        type: typeof textValue
      });
      
      // Track the resolution result if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'text-variable',
          true,
          textValue,
          undefined
        );
      }
      
      return textValue;
    }

    // Then try as data variable - check if we're getting an actual object 
    // or a stringified object which can happen in some test cases
    let dataValue = context.state.getDataVar(name);
    if (dataValue !== undefined) {
      logger.debug(`Found data variable '${name}'`, {
        valueType: typeof dataValue,
        isArray: Array.isArray(dataValue),
        preview: typeof dataValue === 'object' ? JSON.stringify(dataValue).substring(0, 100) : String(dataValue),
        rawValue: dataValue
      });
      
      // If dataValue is a string but looks like JSON, try to parse it
      if (typeof dataValue === 'string' && 
          (dataValue.startsWith('{') || dataValue.startsWith('['))) {
        try {
          const parsedData = JSON.parse(dataValue);
          logger.debug(`Parsed JSON string data variable '${name}'`, {
            parsedType: typeof parsedData,
            isArray: Array.isArray(parsedData),
            parsedPreview: JSON.stringify(parsedData).substring(0, 100)
          });
          
          // Track the resolution result if tracking is enabled
          if (this.resolutionTracker) {
            this.resolutionTracker.trackResolutionAttempt(
              name,
              'data-variable-parsed-from-string',
              true,
              parsedData,
              undefined
            );
          }
          
          return parsedData;
        } catch (e) {
          // If parsing fails, just use the string value
          logger.debug(`Failed to parse data variable '${name}' as JSON, using as string`, {
            error: e instanceof Error ? e.message : String(e)
          });
          
          // Track the failed parsing if tracking is enabled
          if (this.resolutionTracker) {
            this.resolutionTracker.trackResolutionAttempt(
              name,
              'data-variable-parse-failed',
              true,
              dataValue,
              e instanceof Error ? e.message : String(e)
            );
          }
        }
      }
      
      // Track the resolution result if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'data-variable',
          true,
          dataValue,
          undefined
        );
      }
      
      return dataValue;
    }

    // Finally try as path variable
    const pathValue = context.state.getPathVar(name);
    if (pathValue !== undefined) {
      logger.debug(`Found path variable '${name}'`, {
        value: typeof pathValue === 'string' ? pathValue : JSON.stringify(pathValue),
        type: typeof pathValue
      });
      
      // Track the resolution result if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'path-variable',
          true,
          pathValue,
          undefined
        );
      }
      
      return pathValue;
    }

    // Variable not found - always throw in strict mode
    if (context.strict) {
      logger.warn(`Variable '${name}' not found and strict mode is enabled, throwing error`);
      
      // Track the failed resolution if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          name,
          'variable-not-found',
          false,
          undefined,
          `Variable '${name}' not found`
        );
      }
      
      throw VariableResolutionErrorFactory.variableNotFound(name);
    }
    
    logger.warn(`Variable '${name}' not found but strict mode is disabled, returning undefined`);
    
    // Track the missing variable in non-strict mode if tracking is enabled
    if (this.resolutionTracker) {
      this.resolutionTracker.trackResolutionAttempt(
        name,
        'variable-not-found-non-strict',
        false,
        undefined,
        `Variable '${name}' not found`
      );
    }
    
    return undefined;  // Return undefined instead of '' to signal missing variable
  }

  /**
   * Convert a value to a string representation
   * 
   * @param value The value to convert to string
   * @param formattingContext Optional formatting context to control output format
   * @returns Formatted string representation
   */
  convertToString(
    value: any, 
    formattingContext?: { 
      isBlock?: boolean; 
      nodeType?: string; 
      linePosition?: 'start' | 'middle' | 'end';
      isTransformation?: boolean;
    }
  ): string {
    // Handle null and undefined
    if (value === null || value === undefined) {
      return '';
    }

    // Handle text nodes
    if (isTextNode(value)) {
      return value.content;
    }

    // Handle variable reference nodes
    if (isVariableReferenceNode(value)) {
      return value.identifier;
    }
    
    // Determine the formatting context
    const formatContext: FormatContext = formattingContext?.isBlock ? 'block' : 'inline';
    const formatOutput = formattingContext?.isBlock || 
                        formattingContext?.nodeType === 'embed' || 
                        !formattingContext; // Default to formatted output for direct reference

    // Delegate to the enhanced private method
    return this.formatValueAsString(value, formatOutput, formatContext);
  }

  /**
   * Convert a value to string representation with context-aware formatting
   * Private helper method used by convertToString
   * 
   * @param value The value to convert to string
   * @param formatOutput Whether to format the output (true for block format, false for inline)
   * @param formatContext Optional formatting context to control output format
   * @returns Formatted string representation
   */
  private formatValueAsString(value: any, formatOutput = false, formatContext: FormatContext = 'inline'): string {
    if (value === undefined || value === null) {
      return '';
    }

    if (typeof value === 'string') {
      return value;
    }

    if (typeof value === 'number' || typeof value === 'boolean' || typeof value === 'bigint') {
      return String(value);
    }

    // Handle array values with standardized formatting
    if (Array.isArray(value)) {
      // Block context formatting (for multiline output)
      if (formatContext === 'block') {
        // For arrays containing objects, use proper JSON indentation
        if (this.isArrayOfObjects(value)) {
          return JSON.stringify(value, null, 2);
        }
        
        // For arrays with nested arrays or complex structures, use proper JSON indentation
        if (this.hasComplexStructure(value)) {
          return JSON.stringify(value, null, 2);
        }
        
        // If formatOutput is true (for variable embeds), use pretty JSON format
        if (formatOutput) {
          return JSON.stringify(value, null, 2);
        }
        
        // Simple arrays (strings, numbers, etc.) in block context get comma-space formatting
        return value.map(item => this.formatValueAsString(item, formatOutput, 'inline')).join(', ');
      }
      
      // Inline context - always use comma-space formatting
      return value.map(item => this.formatValueAsString(item, formatOutput, 'inline')).join(', ');
    }

    // Handle object values with standardized formatting
    if (typeof value === 'object') {
      try {
        // Block context formatting (for multiline output)
        if (formatContext === 'block') {
          // Use 2-space indentation for pretty printing
          return JSON.stringify(value, null, 2);
        }
        
        // Inline context - compact JSON without whitespace
        return JSON.stringify(value);
      } catch (error) {
        // Just in case JSON.stringify fails
        return '[Object]';
      }
    }

    // Default fallback for other types
    return String(value);
  }

  private shouldArrayBePrettyPrinted(arr: any[]): boolean {
    // Arrays should be pretty-printed if:
    // 1. They contain objects - especially for the enhanced-field-access test
    if (arr.length > 0 && arr.every(item => typeof item === 'object' && item !== null && !Array.isArray(item))) {
      return true;
    }
    
    // 2. They contain nested arrays
    // 3. They are longer than 5 items
    if (arr.length > 5) {
      return true;
    }
    
    return arr.some(item => {
      if (typeof item === 'object' && item !== null) {
        return true;
      }
      
      if (Array.isArray(item)) {
        return true;
      }
      
      const stringified = String(item);
      return stringified.length > 20;
    });
  }
  
  // Helper to identify arrays of objects (for proper JSON indentation)
  private isArrayOfObjects(arr: any[]): boolean {
    if (arr.length === 0) {
      return false;
    }
    
    // Check if all items in the array are objects (not null, not arrays)
    return arr.some(item => 
      typeof item === 'object' && 
      item !== null && 
      !Array.isArray(item) &&
      Object.keys(item).length > 0
    );
  }

  /**
   * Format a JSON string to be more readable in inline context
   * Ensures spaces after colons and commas
   */
  private formatJsonString(jsonStr: string): string {
    return jsonStr
      .replace(/,"/g, ', "')  // Add space after commas
      .replace(/:{/g, ': {')  // Add space after colons followed by object
      .replace(/:\[/g, ': [') // Add space after colons followed by array
      .replace(/":"/g, '": "'); // Add space after colon in key-value pairs
  }
  
  /**
   * Extract all variable references from the given text
   * @param text The text to extract references from
   * @returns Array of variable references
   */
  extractReferences(text: string): string[] {
    // Extract all variable references using regex
    const references = new Set<string>();
    const variableRegex = /\{\{([^}]+)\}\}/g;
    let match;
    
    while ((match = variableRegex.exec(text)) !== null) {
      const reference = match[1];
      // For field access, only include the base variable name
      const baseName = reference.split('.')[0];
      references.add(baseName);
    }
    
    return Array.from(references);
  }
  
  /**
   * Extract variable references asynchronously using AST when possible
   * @param text The text to extract references from
   * @returns Array of variable references and information
   */
  async extractReferencesAsync(text: string): Promise<string[]> {
    try {
      // Parse the text into nodes
      const nodes = await this.parseContent(text);
      return this.extractVariableReferencesFromNodes(nodes);
    } catch (error) {
      // Fall back to regex-based extraction
      logger.debug('Error parsing content for reference extraction, falling back to regex', { error });
      return this.extractReferences(text);
    }
  }
  
  /**
   * Extract variable references from AST nodes
   * @param nodes The AST nodes to extract references from
   * @returns Array of variable references
   */
  private extractVariableReferencesFromNodes(nodes: MeldNode[]): string[] {
    const references = new Set<string>();
    
    for (const node of nodes) {
      if (isVariableReferenceNode(node)) {
        references.add(node.identifier);
      }
    }
    
    return Array.from(references);
  }

  /**
   * Parse a variable reference into base name and fields
   */
  private parseVariableReference(reference: string): { baseName: string, fields: Field[] } {
    // Check if this is a field access
    if (reference.includes('.')) {
      const parts = reference.split('.');
      const baseName = parts[0];
      const fields = parts.slice(1).map(field => {
        // Check if this is a numeric index
        const numIndex = parseInt(field, 10);
        if (!isNaN(numIndex)) {
          return { type: 'index' as const, value: numIndex };
        }
        // Otherwise it's a field name
        return { type: 'field' as const, value: field };
      }) as Field[];
      
      return { baseName, fields };
    }
    
    // Simple variable reference
    return { baseName: reference, fields: [] };
  }
  
  /**
   * Access fields in a nested object
   */
  private async accessFields(obj: any, fields: any[], context: ResolutionContext, variableName: string): Promise<any> {
    let current = obj;
    
    // Check if this is a variable embed context and log details
    const isVariableEmbed = (context as any).isVariableEmbed === true;
    const disablePathPrefixing = (context as any).disablePathPrefixing === true;
    
    if (isVariableEmbed || disablePathPrefixing) {
      logger.debug(`Access fields in variable embed context: ${variableName}`, {
        fields: JSON.stringify(fields),
        isVariableEmbed,
        disablePathPrefixing,
        objectType: typeof obj,
        isArray: Array.isArray(obj)
      });
    }
    
    // Try to parse stringified JSON if needed
    if (typeof current === 'string' && (current.startsWith('{') || current.startsWith('['))) {
      try {
        const parsed = JSON.parse(current);
        logger.debug(`Successfully parsed stringified JSON for variable '${variableName}'`, {
          originalType: 'string',
          parsedType: typeof parsed,
          isArray: Array.isArray(parsed)
        });
        current = parsed;
      } catch (error) {
        // Not valid JSON, continue with the string value
        logger.debug(`Failed to parse string as JSON for variable '${variableName}'`, {
          error: error instanceof Error ? error.message : String(error),
          value: current
        });
      }
    }
    
    // Log debug information to help with troubleshooting
    logger.debug(`Accessing fields for variable '${variableName}'`, {
      initialObjectType: typeof current,
      isArray: Array.isArray(current),
      rawValue: current,
      numFields: fields?.length,
      fields: JSON.stringify(fields)
    });
    
    // Track field access attempt if tracking is enabled
    if (this.resolutionTracker) {
      this.resolutionTracker.trackAttemptStart(
        `${variableName}.fields`,
        'field-access',
        { 
          initialType: typeof current,
          isArray: Array.isArray(current),
          fields: JSON.stringify(fields)
        }
      );
    }
    
    // Process fields in order
    for (let i = 0; i < fields.length; i++) {
      const field = fields[i];
      const fieldValue = field.value !== undefined ? field.value : field;
      const fieldType = field.type || 'field';
      const fieldPath = fields.slice(0, i + 1).map(f => 
        f.type === 'index' ? `[${f.value}]` : `.${f.value}`
      ).join('').replace(/^\./, '');
      
      // Make sure we have a valid object to access fields on
      if (current === null || current === undefined) {
        const errorMessage = `Cannot access field '${fieldValue}' of ${current} for variable '${variableName}'`;
        const detailedMessage = `Cannot access field '${fieldValue}' at path '${fieldPath}' because the parent value is ${current}`;
        logger.error(errorMessage, { fieldPath, parentValue: current });
        
        // Track the failed field access if tracking is enabled
        if (this.resolutionTracker) {
          this.resolutionTracker.trackResolutionAttempt(
            `${variableName}.${fieldValue}`,
            'field-access-null-undefined',
            false,
            undefined,
            detailedMessage
          );
        }
        
        throw VariableResolutionErrorFactory.invalidAccess(
          variableName,
          detailedMessage
        );
      }
      
      // Log debug information about the current field access
      logger.debug(`Processing field ${i}`, { 
        fieldType, 
        fieldValue,
        currentType: typeof current,
        isArray: Array.isArray(current),
        currentValue: current
      });
      
      // If current is not an object or array and we're trying to access a property, throw error
      if (typeof current !== 'object' && !Array.isArray(current)) {
        const errorMessage = `Cannot access field '${fieldValue}' of non-object value (type: ${typeof current}) for variable '${variableName}'`;
        const detailedMessage = `Cannot access field '${fieldValue}' at path '${fieldPath}' because the parent value is of type '${typeof current}' (${String(current).substring(0, 50)}${String(current).length > 50 ? '...' : ''})`;
        logger.error(errorMessage, { 
          fieldPath, 
          parentType: typeof current, 
          parentValue: current 
        });
        
        // Track the failed field access if tracking is enabled
        if (this.resolutionTracker) {
          this.resolutionTracker.trackResolutionAttempt(
            `${variableName}.${fieldValue}`,
            'field-access-non-object',
            false,
            undefined,
            detailedMessage
          );
        }
        
        throw VariableResolutionErrorFactory.invalidAccess(
          variableName,
          detailedMessage
        );
      }
      
      // Field access (regular property or array index)
      if (fieldType === 'index' && Array.isArray(current)) {
        // Array index access
        const index = typeof fieldValue === 'number' ? fieldValue : parseInt(fieldValue as string, 10);
        if (isNaN(index)) {
          const errorMessage = `Invalid array index: '${fieldValue}' is not a number for variable '${variableName}'`;
          const detailedMessage = `Invalid array index: '${fieldValue}' at path '${fieldPath}' is not a valid number`;
          logger.error(errorMessage, { fieldPath, fieldValue });
          
          // Track the failed field access if tracking is enabled
          if (this.resolutionTracker) {
            this.resolutionTracker.trackResolutionAttempt(
              `${variableName}[${fieldValue}]`,
              'field-access-invalid-index',
              false,
              undefined,
              detailedMessage
            );
          }
          
          throw VariableResolutionErrorFactory.invalidAccess(
            variableName,
            detailedMessage
          );
        }
        
        if (index < 0 || index >= current.length) {
          const errorMessage = `Array index ${index} out of bounds [0-${current.length-1}] for variable '${variableName}'`;
          const detailedMessage = `Array index ${index} at path '${fieldPath}' is out of bounds [0-${current.length-1}]`;
          logger.error(errorMessage, { fieldPath, index, arrayLength: current.length });
          
          // Track the failed field access if tracking is enabled
          if (this.resolutionTracker) {
            this.resolutionTracker.trackResolutionAttempt(
              `${variableName}[${index}]`,
              'field-access-index-out-of-bounds',
              false,
              undefined,
              detailedMessage
            );
          }
          
          throw VariableResolutionErrorFactory.indexOutOfBounds(
            variableName,
            index,
            current.length
          );
        }
        
        current = current[index];
        logger.debug(`Accessed array index ${index}`, { 
          resultType: typeof current,
          isResultArray: Array.isArray(current),
          value: current
        });
      } else {
        // Regular property access
        const propName = String(fieldValue);
        
        if (!(propName in current)) {
          // Check if we have a stringified JSON object that needs parsing
          if (typeof current === 'string' && (current.startsWith('{') || current.startsWith('['))) {
            try {
              const parsed = JSON.parse(current);
              if (propName in parsed) {
                logger.debug(`Found property '${propName}' in parsed JSON string`, {
                  parsedType: typeof parsed,
                  isArray: Array.isArray(parsed)
                });
                current = parsed;
                current = current[propName];
                continue;
              }
            } catch (error) {
              // Not valid JSON, continue with normal error handling
              logger.debug(`Failed to parse string as JSON for property access`, {
                error: error instanceof Error ? error.message : String(error)
              });
            }
          }
          
          const errorMessage = `Field '${propName}' not found in variable '${variableName}'`;
          const detailedMessage = `Field '${propName}' at path '${fieldPath}' not found in variable '${variableName}'`;
          const availableKeys = typeof current === 'object' && current !== null ? 
            Object.keys(current) : [];
          
          logger.error(errorMessage, { 
            fieldPath, 
            availableKeys,
            parentType: typeof current,
            parentValue: current
          });
          
          if (context.strict) {
            // Track the failed field access if tracking is enabled
            if (this.resolutionTracker) {
              this.resolutionTracker.trackResolutionAttempt(
                `${variableName}.${propName}`,
                'field-access-not-found',
                false,
                undefined,
                detailedMessage
              );
            }
            
            // Create a more detailed error message that includes available keys
            const keysInfo = availableKeys.length > 0 
              ? `Available keys: ${availableKeys.join(', ')}` 
              : 'No keys available';
            
            throw VariableResolutionErrorFactory.fieldNotFound(
              variableName,
              `${propName} (${keysInfo})`
            );
          } else {
            logger.warn(`Field '${propName}' not found in variable '${variableName}', returning empty string (strict mode off)`);
            
            // Track the failed field access in non-strict mode if tracking is enabled
            if (this.resolutionTracker) {
              this.resolutionTracker.trackResolutionAttempt(
                `${variableName}.${propName}`,
                'field-access-not-found-non-strict',
                false,
                '',
                detailedMessage
              );
            }
            
            return '';
          }
        }
        
        current = current[propName];
        logger.debug(`Accessed property ${propName}`, { 
          resultType: typeof current,
          isResultArray: Array.isArray(current),
          value: current
        });
      }
    }
    
    // Track successful field access if tracking is enabled
    if (this.resolutionTracker) {
      this.resolutionTracker.trackResolutionAttempt(
        `${variableName}.fields`,
        'field-access-success',
        true,
        current,
        undefined
      );
    }
    
    return current;
  }

  /**
   * Resolve a variable reference in a field name
   * This allows for dynamic field access like obj[varName]
   */
  private async resolveVariableInFieldName(fieldName: string, context: ResolutionContext): Promise<string | number> {
    // Check if the field name contains variable references
    if (fieldName.includes('{{')) {
      // Resolve any variable references in the field name
      const resolvedName = await this.resolve(fieldName, context);
      
      // Try to convert to number if it looks like an array index
      const numIndex = parseInt(resolvedName, 10);
      if (!isNaN(numIndex)) {
        return numIndex;
      }
      
      return resolvedName;
    }
    
    // No variables to resolve
    return fieldName;
  }

  /**
   * Resolves a variable reference that contains another variable reference
   * For example: {{var_{{nested}}}}
   * @param reference The reference containing nested variables
   * @param context Resolution context
   * @returns Resolved variable value
   * @throws MeldResolutionError if resolution fails
   */
  private async resolveNestedVariableReference(reference: string, context: ResolutionContext): Promise<string> {
    try {
      // First try to use directly injected resolution service
      if (this.resolutionService) {
        try {
          return await this.resolutionService.resolveInContext(reference, context);
        } catch (error) {
          logger.debug('Error using injected resolutionService.resolveInContext, trying fallback', {
            error: error instanceof Error ? error.message : String(error),
            reference
          });
          // If this fails and strict mode is on, rethrow
          if (context.strict) {
            throw error;
          }
          // Otherwise continue with fallback approaches
        }
      }
      
      // Ensure factory is initialized for client approach
      this.ensureFactoryInitialized();
      
      // Try to use the resolution client
      if (this.resolutionClient) {
        try {
          if (this.resolutionClient.resolveInContext) {
            return await this.resolutionClient.resolveInContext(reference, context);
          }
          // Fallback to regular resolveVariables
          return await this.resolutionClient.resolveVariables(reference, context);
        } catch (error) {
          // Check if this is already a MeldResolutionError (like circular reference detection)
          if (error instanceof MeldResolutionError) {
            if (context.strict) {
              throw error;
            }
          }
          
          logger.debug('Error using resolutionClient.resolveInContext', { 
            error: error instanceof Error ? error.message : String(error),
            reference 
          });
          
          // If strict mode is on, rethrow
          if (context.strict) {
            if (error instanceof Error) {
              throw error;
            }
            throw new Error(String(error));
          }
        }
      }
      
      // If all else fails, try to resolve directly
      const nodes = await this.parseContent(reference);
      if (nodes.length === 1 && isVariableReferenceNode(nodes[0])) {
        const node = nodes[0] as any; // Cast to any to avoid type errors
        const varName = node.identifier;
        
        // Get variable value
        const value = await this.getVariable(varName, context);
        if (value === undefined) {
          if (context.strict) {
            throw VariableResolutionErrorFactory.variableNotFound(varName);
          }
          return '';
        }
        
        // Handle fields access for both new and legacy node types
        if ((node.type === 'VariableReference' && node.fields && node.fields.length > 0) ||
            (node.type === 'DataVar' && node.fields && node.fields.length > 0) ||
            (node.type === 'TextVar' && node.fields && node.fields.length > 0)) {
          const fields = node.fields;
          try {
            const fieldValue = await this.accessFields(value, fields, context, varName);
            return this.convertToString(fieldValue);
          } catch (error) {
            if (context.strict) {
              throw error;
            }
            return '';
          }
        }
        
        return this.convertToString(value);
      }
      
      // Not a variable reference
      return reference;
    } catch (error) {
      // Log the error for diagnostic purposes
      logger.error('Error in resolveNestedVariableReference', {
        reference,
        error: error instanceof Error ? error.message : String(error)
      });
      
      // Track resolution error if tracking is enabled
      if (this.resolutionTracker) {
        this.resolutionTracker.trackResolutionAttempt(
          'nested-variable-resolution-error',
          JSON.stringify({
            reference,
            context: JSON.stringify(context)
          }),
          false,
          undefined,
          error instanceof Error ? error.message : String(error)
        );
      }
      
      // Always propagate errors if strict mode is enabled
      if (context.strict) {
        throw error;
      }
      
      // In non-strict mode, return empty string for errors
      return '';
    }
  }

  /**
   * Parse content using regex-based approach as a fallback
   * This is used when AST-based parsing fails
   */
  private parseWithRegex(content: string): MeldNode[] {
    const result: MeldNode[] = [];
    
    // Simple implementation to avoid edge cases in the regex approach
    let remaining = content;
    let startIndex = remaining.indexOf('{{');
    
    while (startIndex !== -1) {
      // Add text before the variable
      if (startIndex > 0) {
        result.push({
          type: 'Text',
          content: remaining.substring(0, startIndex)
        } as TextNode);
      }
      
      const endIndex = remaining.indexOf('}}', startIndex);
      if (endIndex === -1) {
        // No closing braces - treat the rest as text
        result.push({
          type: 'Text',
          content: remaining
        } as TextNode);
        break;
      }
      
      const varContent = remaining.substring(startIndex + 2, endIndex);
      
      // Check if the variable reference contains another variable reference
      if (varContent.includes('{{')) {
        // This is a nested reference - keep it as text for later processing
        result.push({
          type: 'Text',
          content: remaining.substring(startIndex, endIndex + 2)
        } as TextNode);
      } else {
        // Parse as a regular variable reference
        const { baseName, fields } = this.parseVariableReference(varContent);
        const valueType = fields && fields.length > 0 ? 'data' : 'text';
        
        // Create variable reference node using factory if available
        if (this.variableNodeFactory) {
          // Use factory pattern
          result.push(this.variableNodeFactory.createVariableReferenceNode(baseName, valueType, fields));
        } else {
          // Legacy fallback - import is maintained at the top during transition
          logger.warn('VariableNodeFactory not available, using legacy function');
          // We kept the legacy import as fallback
          const legacyCreateNode = require('@core/syntax/types/variables.js').createVariableReferenceNode;
          result.push(legacyCreateNode(baseName, valueType, fields));
        }
      }
      
      // Move to the next position
      remaining = remaining.substring(endIndex + 2);
      startIndex = remaining.indexOf('{{');
    }
    
    // Add any remaining text
    if (remaining.length > 0) {
      result.push({
        type: 'Text',
        content: remaining
      } as TextNode);
    }
    
    return result;
  }

  /**
   * Determines if an array has complex structure that would benefit from pretty-printing as JSON
   * @param arr The array to check
   * @returns True if the array contains nested arrays, long items, or is a long array
   */
  private hasComplexStructure(arr: any[]): boolean {
    // Arrays have complex structure if:
    
    // 1. They contain nested arrays
    const hasNestedArrays = arr.some(item => Array.isArray(item));
    if (hasNestedArrays) {
      return true;
    }
    
    // 2. They are longer than 5 items
    if (arr.length > 5) {
      return true;
    }
    
    // 3. They contain long values
    return arr.some(item => {
      // Handle objects with multiple properties
      if (typeof item === 'object' && item !== null && !Array.isArray(item)) {
        return Object.keys(item).length > 1;
      }
      
      // Handle long string values
      if (typeof item === 'string' && item.length > 20) {
        return true;
      }
      
      return false;
    });
  }
}

```
    </ServicesPipelineResolutionserviceResolversVariablereferenceresolverTs>
    <ServicesPipelineResolutionserviceResolversTypesTs>
```javascript
import type { MeldNode } from '@core/syntax/types.js';

/**
 * Represents a field access in a variable reference
 * Examples: object.field, array[0]
 */
export interface Field {
  type: 'field' | 'index';
  value: string | number;
}

/**
 * Text node containing static content
 */
export interface TextNode extends MeldNode {
  type: 'Text';
  value: string; 
  content?: string; // Support legacy property name
}

/**
 * Base node type for variable references
 */
export interface VariableReferenceNode extends MeldNode {
  type: 'VariableReference';
  identifier: string;
  fields?: Field[];
  isVariableReference: boolean;
}

/**
 * Text variable reference (previously ${var})
 */
export interface TextVarNode extends VariableReferenceNode {
  valueType?: 'text';
}

/**
 * Data variable reference (previously #{data})
 */
export interface DataVarNode extends VariableReferenceNode {
  valueType?: 'data';
}

/**
 * Directive node (@directive)
 */
export interface DirectiveNode extends MeldNode {
  type: 'Directive';
  directive: {
    kind: string;
    identifier: string;
    value?: string;
    [key: string]: any;
  };
}

/**
 * Type guard for text nodes
 */
export function isTextNode(node: MeldNode): node is TextNode {
  return node.type === 'Text';
}

/**
 * Type guard for variable reference nodes
 */
export function isVariableReferenceNode(node: MeldNode): node is VariableReferenceNode {
  return node.type === 'VariableReference';
}

/**
 * Type guard for text variable nodes
 */
export function isTextVarNode(node: MeldNode): node is TextVarNode {
  return node.type === 'VariableReference' && (!('valueType' in node) || (node as any).valueType === 'text');
}

/**
 * Type guard for data variable nodes
 */
export function isDataVarNode(node: MeldNode): node is DataVarNode {
  return node.type === 'VariableReference' && 'valueType' in node && (node as any).valueType === 'data';
}

/**
 * Type guard for directive nodes
 */
export function isDirectiveNode(node: MeldNode): node is DirectiveNode {
  return node.type === 'Directive';
}
```
@define` directives, command execution, parameter handling, or state related to command definitions.
1. **Identify areas of complexity, manual validation, or edge-case handling in your code related to this directive.**
2. **Propose specific TypeScript type features** (e.g., required properties, discriminated unions, literal types) for  that would simplify or eliminate these complexities.
3. **Crucially, make a clear case for *why* each proposed feature is needed.** Explain how it would tangibly benefit the VariableResolution service by making the code simpler, safer, or easier to maintain.
**IMPORTANT NOTE:** Structure your response clearly. When including code examples, use inline backticks () or standard Markdown indented code blocks (4 spaces). **Do not use nested triple-backtick () code fences within your response.**
    </ServicesPipelineResolutionserviceResolversTypesTs>
  </TaskProposeJustifyDefineTypeImprovementsForYourCode>
</DependencyInjectionInMeld>