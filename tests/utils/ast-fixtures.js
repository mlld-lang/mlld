#!/usr/bin/env node
/**
 * AST Fixture Generator
 * 
 * Generates test fixtures from Meld example cases.
 * Also builds a comprehensive EXAMPLES.md file.
 * 
 * Usage:
 *   node tests/utils/ast-fixtures.js
 */

import fs from 'node:fs/promises';
import path from 'node:path';
import { parse } from '../../grammar/parser/parser.js';
import { glob } from 'glob';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Paths relative to project root
const CASES_DIR = path.join(__dirname, '../cases');
const FIXTURES_DIR = path.join(__dirname, '../fixtures');
const EXAMPLES_MD = path.join(CASES_DIR, 'EXAMPLES.md');

// Main entry point
async function main() {
  try {
    console.log('AST Fixture Generator');
    console.log('====================');
    console.log(`Input: ${CASES_DIR}`);
    console.log(`Output: ${FIXTURES_DIR}`);
    console.log('');
    
    // Ensure output directory exists
    await fs.mkdir(FIXTURES_DIR, { recursive: true });
    
    // Process all example cases
    const stats = await processAllCases();
    
    // Build EXAMPLES.md
    await buildExamplesMarkdown();
    
    console.log('\n✅ Done!');
    console.log(`   Processed ${stats.total} examples`);
    console.log(`   Generated ${stats.fixtures} fixtures`);
    console.log(`   Skipped ${stats.skipped} files`);
    console.log(`   Updated ${EXAMPLES_MD}`);
  } catch (error) {
    console.error('❌ Error:', error.message);
    process.exit(1);
  }
}

/**
 * Process all example cases and generate fixtures
 */
async function processAllCases() {
  const stats = { total: 0, fixtures: 0, skipped: 0 };
  
  // Get all directories in cases
  const entries = await fs.readdir(CASES_DIR, { withFileTypes: true });
  const dirs = entries.filter(d => d.isDirectory()).map(d => d.name);
  
  for (const dirName of dirs) {
    const dirPath = path.join(CASES_DIR, dirName);
    console.log(`\nProcessing ${dirName}/`);
    
    // Get all subdirectories
    const subEntries = await fs.readdir(dirPath, { withFileTypes: true });
    const subDirs = subEntries.filter(d => d.isDirectory()).map(d => d.name);
    
    for (const subDir of subDirs) {
      const exampleDir = path.join(dirPath, subDir);
      const processed = await processExampleDirectory(exampleDir, dirName, subDir);
      stats.total += processed.total;
      stats.fixtures += processed.fixtures;
      stats.skipped += processed.skipped;
    }
  }
  
  return stats;
}

/**
 * Process a single example directory
 */
async function processExampleDirectory(dirPath, category, name) {
  const stats = { total: 0, fixtures: 0, skipped: 0 };
  
  // Look for example*.md files
  const files = await fs.readdir(dirPath);
  const exampleFiles = files.filter(f => f.startsWith('example') && f.endsWith('.md'));
  
  for (const file of exampleFiles) {
    stats.total++;
    
    const filePath = path.join(dirPath, file);
    const content = await fs.readFile(filePath, 'utf-8');
    
    // Extract the expected file if it exists
    const expectedFile = file.replace('example', 'expected');
    let expectedContent = null;
    
    if (files.includes(expectedFile)) {
      expectedContent = await fs.readFile(path.join(dirPath, expectedFile), 'utf-8');
    }
    
    // Generate fixture name
    let fixtureName = `${category}-${name}`;
    if (file !== 'example.md') {
      // Handle variants like example-multiline.md
      const variant = file.replace('example-', '').replace('.md', '');
      fixtureName += `-${variant}`;
    }
    fixtureName += '.fixture.json';
    
    try {
      // Parse the content
      const ast = await parse(content);
      
      // Create fixture
      const fixture = {
        name: fixtureName.replace('.fixture.json', ''),
        description: `Test fixture for ${category}/${name}`,
        category,
        subcategory: name,
        input: content,
        expected: expectedContent,
        ast: ast
      };
      
      // Write fixture
      const fixturePath = path.join(FIXTURES_DIR, fixtureName);
      await fs.writeFile(fixturePath, JSON.stringify(fixture, null, 2));
      
      console.log(`  ✓ ${fixtureName}`);
      stats.fixtures++;
    } catch (error) {
      console.log(`  ✗ ${file}: ${error.message}`);
      stats.skipped++;
    }
  }
  
  return stats;
}

/**
 * Build comprehensive EXAMPLES.md file
 */
async function buildExamplesMarkdown() {
  const lines = [
    '# Meld Examples',
    '',
    'This file contains all test case examples organized by category.',
    'Generated by `tests/utils/ast-fixtures.js`',
    '',
    '## Table of Contents',
    ''
  ];
  
  const categories = new Map();
  
  // Collect all examples
  const entries = await fs.readdir(CASES_DIR, { withFileTypes: true });
  const dirs = entries.filter(d => d.isDirectory()).sort();
  
  for (const dir of dirs) {
    const dirPath = path.join(CASES_DIR, dir.name);
    const subEntries = await fs.readdir(dirPath, { withFileTypes: true });
    const subDirs = subEntries.filter(d => d.isDirectory()).sort();
    
    const examples = [];
    
    for (const subDir of subDirs) {
      const exampleDir = path.join(dirPath, subDir.name);
      const files = await fs.readdir(exampleDir);
      const exampleFiles = files.filter(f => f.startsWith('example') && f.endsWith('.md'));
      
      for (const file of exampleFiles) {
        const content = await fs.readFile(path.join(exampleDir, file), 'utf-8');
        const expectedFile = file.replace('example', 'expected');
        let expected = null;
        
        if (files.includes(expectedFile)) {
          expected = await fs.readFile(path.join(exampleDir, expectedFile), 'utf-8');
        }
        
        examples.push({
          subDir: subDir.name,
          file,
          content,
          expected
        });
      }
    }
    
    if (examples.length > 0) {
      categories.set(dir.name, examples);
    }
  }
  
  // Build TOC
  for (const [category, examples] of categories) {
    lines.push(`- [${capitalize(category)}](#${category})`);
    
    // Group by subdirectory
    const bySubDir = new Map();
    for (const ex of examples) {
      if (!bySubDir.has(ex.subDir)) {
        bySubDir.set(ex.subDir, []);
      }
      bySubDir.get(ex.subDir).push(ex);
    }
    
    for (const [subDir] of bySubDir) {
      lines.push(`  - [${capitalize(subDir)}](#${category}-${subDir})`);
    }
  }
  
  lines.push('');
  
  // Build content sections
  for (const [category, examples] of categories) {
    lines.push(`## ${capitalize(category)}`);
    lines.push('');
    
    // Group by subdirectory
    const bySubDir = new Map();
    for (const ex of examples) {
      if (!bySubDir.has(ex.subDir)) {
        bySubDir.set(ex.subDir, []);
      }
      bySubDir.get(ex.subDir).push(ex);
    }
    
    for (const [subDir, subExamples] of bySubDir) {
      lines.push(`### ${capitalize(category)} ${capitalize(subDir)}`);
      lines.push('');
      
      for (const ex of subExamples) {
        // Add variant name if not the base example
        if (ex.file !== 'example.md') {
          const variant = ex.file.replace('example-', '').replace('.md', '');
          lines.push(`#### ${capitalize(variant)} Variant`);
          lines.push('');
        }
        
        lines.push('**Input:**');
        lines.push('```meld');
        lines.push(ex.content.trim());
        lines.push('```');
        lines.push('');
        
        if (ex.expected) {
          lines.push('**Expected Output:**');
          lines.push('```markdown');
          lines.push(ex.expected.trim());
          lines.push('```');
          lines.push('');
        }
      }
    }
  }
  
  // Write the file
  await fs.writeFile(EXAMPLES_MD, lines.join('\n'));
}

/**
 * Capitalize a string
 */
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1).replace(/-/g, ' ');
}

// Run main
main().catch(console.error);