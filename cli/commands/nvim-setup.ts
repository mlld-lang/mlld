import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import { execSync } from 'child_process';
import chalk from 'chalk';

export function createNvimSetupCommand() {
  return {
    name: 'nvim-setup',
    description: 'Set up mlld Language Server for Neovim',
    
    async execute(args: string[], flags: any): Promise<void> {
      console.log(chalk.blue.bold('üöÄ Setting up mlld Language Server for Neovim...\n'));

      const homeDir = os.homedir();
      const nvimConfig = process.env.XDG_CONFIG_HOME 
        ? path.join(process.env.XDG_CONFIG_HOME, 'nvim')
        : path.join(homeDir, '.config', 'nvim');

      // The config that works everywhere
      const universalConfig = `-- mlld Language Server Configuration
-- Auto-generated by: mlld nvim-setup
-- 
-- This config works with vanilla Neovim, LazyVim, AstroNvim, LunarVim, etc.

local ok, lspconfig = pcall(require, 'lspconfig')
if not ok then 
  vim.notify("nvim-lspconfig not found. Install it with your package manager!", vim.log.levels.ERROR)
  return 
end

local configs = require('lspconfig.configs')

-- Define mlld_ls config if it doesn't exist
if not configs.mlld_ls then
  configs.mlld_ls = {
    default_config = {
      cmd = { 'mlld', 'lsp' },  -- Falls back to npx mlld lsp if not found globally
      filetypes = { 'mlld', 'mld' },
      root_dir = lspconfig.util.root_pattern('mlld-config.json', 'mlld-lock.json', 'mlld.lock.json', 'package.json', '.git'),
      single_file_support = true,  -- Works on individual files without a project
      settings = {
        mlldLanguageServer = {
          enableAutocomplete = true,
          semanticTokenDelay = 250,
          validationDelay = 1000,
          showIncompleteLineErrors = false,  -- Better editing experience
        }
      },
      on_attach = function(client, bufnr)
        -- Enable semantic tokens for better highlighting
        if client.server_capabilities.semanticTokensProvider then
          vim.lsp.semantic_tokens.start(bufnr, client.id)
        end
        vim.notify("mlld LSP attached!", vim.log.levels.INFO)
      end,
    }
  }
end

-- Setup the server
lspconfig.mlld_ls.setup{}

-- Register file types
vim.filetype.add({
  extension = {
    mld = 'mlld',
    mlld = 'mlld',
  },
  pattern = {
    ['.*%.mld%.md'] = 'mlld',  -- Also recognize .mld.md files
  }
})

-- Optional: Add a command to check LSP status
vim.api.nvim_create_user_command('MlldLspInfo', function()
  local clients = vim.lsp.get_active_clients({ name = 'mlld_ls' })
  if #clients > 0 then
    vim.notify('mlld LSP is running', vim.log.levels.INFO)
  else
    vim.notify('mlld LSP is not running. Open a .mld file to start it.', vim.log.levels.WARN)
  end
end, {})`;

      // LazyVim-specific config
      const lazyVimConfig = `-- mlld Language Server for LazyVim
-- Auto-generated by: mlld nvim-setup

return {
  "neovim/nvim-lspconfig",
  opts = function(_, opts)
    local lspconfig = require("lspconfig")
    local configs = require("lspconfig.configs")
    
    -- Define the mlld language server
    if not configs.mlld_ls then
      configs.mlld_ls = {
        default_config = {
          cmd = { "mlld", "lsp" },
          filetypes = { "mlld", "mld" },
          root_dir = lspconfig.util.root_pattern("mlld-config.json", "mlld-lock.json", "mlld.lock.json", "package.json", ".git"),
          single_file_support = true,
          settings = {
            mlldLanguageServer = {
              enableAutocomplete = true,
              semanticTokenDelay = 250,
              validationDelay = 1000,
            }
          }
        }
      }
    end
    
    -- Add to servers
    opts.servers = opts.servers or {}
    opts.servers.mlld_ls = {}
    
    -- Register filetypes
    vim.filetype.add({
      extension = { mld = "mlld", mlld = "mlld" },
      pattern = { [".*%.mld%.md"] = "mlld" }
    })
  end
}`;

      // Detect setup type
      const lazyVimDir = path.join(nvimConfig, 'lua', 'plugins');
      const afterPluginDir = path.join(nvimConfig, 'after', 'plugin');
      
      let targetFile: string;
      let setupType: string;
      let created = false;

      // Check for LazyVim
      if (fs.existsSync(lazyVimDir)) {
        setupType = 'LazyVim';
        targetFile = path.join(lazyVimDir, 'mlld.lua');
        
        // Check if file already exists
        if (fs.existsSync(targetFile) && !flags.force) {
          console.log(chalk.yellow(`‚ö†Ô∏è  Config already exists at ${targetFile}`));
          console.log(chalk.dim('  Use --force to overwrite'));
        } else {
          fs.writeFileSync(targetFile, lazyVimConfig);
          created = true;
        }
        
      } else {
        // Standard Neovim setup
        setupType = 'Neovim';
        
        // Create after/plugin directory if needed
        if (!fs.existsSync(afterPluginDir)) {
          fs.mkdirSync(afterPluginDir, { recursive: true });
        }
        
        targetFile = path.join(afterPluginDir, 'mlld-lsp.lua');
        
        // Check if file already exists
        if (fs.existsSync(targetFile) && !flags.force) {
          console.log(chalk.yellow(`Config already exists at ${targetFile}`));
          console.log(chalk.dim('  Use --force to overwrite'));
        } else {
          fs.writeFileSync(targetFile, universalConfig);
          created = true;
        }
      }

      if (created) {
        console.log(chalk.green(`Detected ${setupType} configuration`));
        console.log(chalk.green(`Created: ${targetFile}\n`));
      }
      
      // Check if mlld is installed globally (cross-platform)
      let mlldInstalled = false;
      try {
        // Use 'where' on Windows, 'which' on Unix-like systems
        const checkCommand = process.platform === 'win32' ? 'where mlld' : 'which mlld';
        execSync(checkCommand, { stdio: 'ignore' });
        mlldInstalled = true;
        console.log(chalk.green('mlld is installed globally'));
      } catch {
        console.log(chalk.yellow('mlld not found in PATH'));
        console.log(chalk.dim('   Install globally with: npm install -g mlld'));
        console.log(chalk.dim('   Or the LSP will use npx (slower but works)\n'));
      }

      // Test if nvim has lspconfig
      let hasLspConfig = false;
      try {
        const result = execSync('nvim --headless -c "lua print(pcall(require, \'lspconfig\'))" -c "q"', 
          { encoding: 'utf-8' });
        if (result.includes('true')) {
          hasLspConfig = true;
          console.log(chalk.green('nvim-lspconfig is installed'));
        }
      } catch {
        // Neovim might not be installed or there was an error - check differently
        try {
          // Try checking if the config directory has any signs of lspconfig
          const initLua = path.join(nvimConfig, 'init.lua');
          const initVim = path.join(nvimConfig, 'init.vim');
          
          if (fs.existsSync(initLua)) {
            const content = fs.readFileSync(initLua, 'utf-8');
            if (content.includes('lspconfig')) {
              hasLspConfig = true;
            }
          } else if (fs.existsSync(initVim)) {
            const content = fs.readFileSync(initVim, 'utf-8');
            if (content.includes('lspconfig')) {
              hasLspConfig = true;
            }
          }
        } catch {
          // Ignore errors in fallback check
        }
      }

      if (!hasLspConfig) {
        console.log(chalk.yellow('\nnvim-lspconfig might not be installed'));
        console.log(chalk.dim('   Install with your package manager:'));
        console.log(chalk.dim('   LazyVim:  Already included'));
        console.log(chalk.dim('   Lazy:     { "neovim/nvim-lspconfig" }'));
        console.log(chalk.dim('   Packer:   use "neovim/nvim-lspconfig"'));
        console.log(chalk.dim('   Plug:     Plug \'neovim/nvim-lspconfig\''));
      }

      // Success message
      console.log(chalk.blue.bold('\nSetup complete!\n'));
      
      console.log(chalk.bold('Next steps:'));
      console.log('   1. Restart Neovim');
      console.log('   2. Open a .mld file');
      console.log('   3. Run :LspInfo to verify mlld_ls is running\n');
      
      console.log(chalk.dim('Tips:'));
      console.log(chalk.dim('   ‚Ä¢ Run :checkhealth lsp to diagnose any issues'));
      console.log(chalk.dim('   ‚Ä¢ Run :MlldLspInfo to check mlld LSP status'));
      console.log(chalk.dim('   ‚Ä¢ The LSP provides autocomplete, hover info, and syntax checking'));
      
      if (!mlldInstalled) {
        console.log(chalk.dim('\n   ‚Ä¢ For best performance, install mlld globally:'));
        console.log(chalk.cyan('     npm install -g mlld'));
      }

      // Show example config for manual setup
      if (flags.show || flags['show-config']) {
        console.log(chalk.bold('\nüìã Manual config (for reference):'));
        console.log(chalk.dim('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'));
        console.log(chalk.gray(universalConfig.split('\n').slice(0, 20).join('\n')));
        console.log(chalk.dim('... (truncated)'));
        console.log(chalk.dim('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'));
      }
    }
  };
}
