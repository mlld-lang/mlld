import type { DirectiveNode, TextNode } from '@core/types';
import type { Environment } from '../env/Environment';
import type { EvalResult } from '../core/interpreter';
import { interpolate, resolveVariableValue } from '../core/interpreter';
import { InterpolationContext } from '../core/interpolation-context';
import { MlldCommandExecutionError } from '@core/errors';
import { TaintLevel } from '@security/taint';

/**
 * Determine the taint level of command arguments
 */
function determineTaintLevel(nodes: any[], env: Environment): TaintLevel {
  // For now, use a simple heuristic:
  // - If any variable is used, assume it could be tainted
  // - TODO: Implement proper taint tracking through variable propagation
  
  for (const node of nodes) {
    if (node.type === 'Variable' || node.type === 'FieldAccess') {
      // Check if this variable came from LLM output or user input
      const varName = node.name || node.base?.name;
      if (varName) {
        // TODO: Get actual taint level from variable metadata
        // For now, be conservative and assume variables could be tainted
        return TaintLevel.REGISTRY_WARNING;
      }
    }
  }
  
  // Literal commands are trusted
  return TaintLevel.TRUSTED;
}

/**
 * Evaluate @run directives.
 * Executes commands/code and returns output as replacement nodes.
 * 
 * Ported from RunDirectiveHandler.
 */
export async function evaluateRun(
  directive: DirectiveNode,
  env: Environment
): Promise<EvalResult> {
  let output = '';
  
  // Create execution context with source information
  const executionContext = {
    sourceLocation: directive.location,
    directiveNode: directive,
    filePath: env.getCurrentFilePath(),
    directiveType: directive.directiveType || 'run'
  };
  
  if (directive.subtype === 'runCommand') {
    // Handle command execution
    const commandNodes = directive.values?.identifier || directive.values?.command;
    if (!commandNodes) {
      throw new Error('Run command directive missing command');
    }
    
    // Interpolate command (resolve variables) with shell command context
    const command = await interpolate(commandNodes, env, InterpolationContext.ShellCommand);
    
    // NEW: Security check before execution
    const security = env.getSecurityManager();
    if (security) {
      // Determine taint level based on command nodes
      const taintLevel = determineTaintLevel(commandNodes, env);
      
      // Use command analyzer to check the command
      const analyzer = (security as any).commandAnalyzer;
      if (analyzer) {
        const analysis = await analyzer.analyze(command);
        
        // Block immediately dangerous commands
        if (analysis.blocked) {
          const reason = analysis.risks?.[0]?.description || 'Security policy violation';
          throw new MlldCommandExecutionError(
            `Security: Command blocked - ${reason}`,
            directive.location,
            {
              command,
              exitCode: 1,
              duration: 0,
              stderr: `This command is blocked by security policy: ${reason}`,
              workingDirectory: env.getBasePath(),
              directiveType: 'run'
            }
          );
        }
        
        // Block LLM output execution
        if (taintLevel === TaintLevel.LLM_OUTPUT) {
          throw new MlldCommandExecutionError(
            'Security: Cannot execute LLM-generated commands',
            directive.location,
            {
              command,
              exitCode: 1,
              duration: 0,
              stderr: 'Commands generated by LLMs cannot be executed for security reasons',
              workingDirectory: env.getBasePath(),
              directiveType: 'run'
            }
          );
        }
        
        // TODO: Add approval prompts for suspicious commands
        if (analysis.risks && analysis.risks.length > 0) {
          console.warn(`⚠️  Security warning for command: ${command}`);
          for (const risk of analysis.risks) {
            console.warn(`   - ${risk.type}: ${risk.description}`);
          }
        }
      }
    }
    
    // Execute the command with context for rich error reporting
    output = await env.executeCommand(command, undefined, executionContext);
    
  } else if (directive.subtype === 'runCode') {
    // Handle code execution
    const codeNodes = directive.values?.code;
    if (!codeNodes) {
      throw new Error('Run code directive missing code');
    }
    
    // Get the code - use default context for code blocks
    const code = await interpolate(codeNodes, env, InterpolationContext.Default);
    
    // Execute the code (default to JavaScript) with context for errors
    const language = directive.raw?.lang || directive.meta?.language || 'javascript';
    output = await env.executeCode(code, language, undefined, executionContext);
    
  } else if (directive.subtype === 'runExec') {
    // Handle exec reference with field access support
    const execRef = directive.raw?.identifier;
    if (!execRef) {
      throw new Error('Run exec directive missing exec reference');
    }
    
    // Check if this is a field access pattern (e.g., @http.get)
    const identifierNode = directive.values?.identifier?.[0];
    let cmdVar: any;
    
    if (identifierNode?.type === 'VariableReference' && identifierNode.fields && identifierNode.fields.length > 0) {
      // Handle field access (e.g., @http.get)
      const baseVar = env.getVariable(identifierNode.identifier);
      if (!baseVar) {
        throw new Error(`Base variable not found: ${identifierNode.identifier}`);
      }
      
      // Resolve the field access to get the actual command
      let value = await resolveVariableValue(baseVar, env);
      
      // Navigate through the field access chain
      for (const field of identifierNode.fields) {
        if (field.type === 'field' && typeof value === 'object' && value !== null) {
          value = value[field.name];
        } else if (field.type === 'arrayIndex' && Array.isArray(value)) {
          value = value[field.index];
        } else {
          throw new Error(`Cannot access field '${field.name || field.index}' on ${typeof value}`);
        }
      }
      
      // The resolved value could be a command object directly or a string reference
      if (typeof value === 'object' && value !== null && value.type === 'command') {
        // Direct command object
        cmdVar = value;
      } else if (typeof value === 'string') {
        // String reference to a command
        cmdVar = env.getVariable(value);
        if (!cmdVar || cmdVar.type !== 'command') {
          throw new Error(`Command variable not found: ${value}`);
        }
      } else {
        throw new Error(`Field access did not resolve to a command: ${typeof value}, got: ${JSON.stringify(value)}`);
      }
    } else {
      // Handle simple command reference (original behavior)
      cmdVar = env.getVariable(execRef);
      if (!cmdVar || cmdVar.type !== 'command') {
        throw new Error(`Command variable not found: ${execRef}`);
      }
    }
    
    const cmdDef = cmdVar.value;
    
    // Get arguments from the run directive
    const args = directive.values?.args || [];
    const argValues: Record<string, any> = {};
    
    // Map parameter names to argument values
    if (cmdDef.paramNames && cmdDef.paramNames.length > 0) {
      for (let i = 0; i < cmdDef.paramNames.length; i++) {
        const paramName = cmdDef.paramNames[i];
        if (!args[i]) {
          argValues[paramName] = '';
          continue;
        }
        
        // Handle variable references in arguments
        const arg = args[i];
        if (arg.type === 'Text' && arg.content && arg.content.startsWith('@')) {
          // This is a variable reference
          const varName = arg.content.substring(1);
          const variable = env.getVariable(varName);
          if (variable) {
            // Resolve the variable value
            const value = await resolveVariableValue(variable, env);
            argValues[paramName] = value;
          } else {
            // Variable not found, keep as-is
            argValues[paramName] = arg.content;
          }
        } else {
          // Normal interpolation
          const argValue = await interpolate([arg], env, InterpolationContext.Default);
          argValues[paramName] = argValue;
        }
      }
    }
    
    if (cmdDef.type === 'command') {
      // Create a temporary environment with parameter values
      const tempEnv = env.createChild();
      for (const [key, value] of Object.entries(argValues)) {
        tempEnv.setParameterVariable(key, { type: 'text', value, nodeId: '', location: { line: 0, column: 0 } });
      }
      
      // TODO: Remove this workaround when issue #51 is fixed
      // Strip leading '[' from first command segment if present
      const cleanTemplate = cmdDef.commandTemplate.map((seg: any, idx: number) => {
        if (idx === 0 && seg.type === 'Text' && seg.content.startsWith('[')) {
          return { ...seg, content: seg.content.substring(1) };
        }
        return seg;
      });
      
      // Interpolate the command template with parameters
      const command = await interpolate(cleanTemplate, tempEnv, InterpolationContext.ShellCommand);
      
      // NEW: Security check for exec commands
      const security = env.getSecurityManager();
      if (security) {
        const analyzer = (security as any).commandAnalyzer;
        if (analyzer) {
          const analysis = await analyzer.analyze(command);
          if (analysis.blocked) {
            const reason = analysis.risks?.[0]?.description || 'Security policy violation';
            throw new MlldCommandExecutionError(
              `Security: Exec command blocked - ${reason}`,
              directive.location,
              {
                command,
                exitCode: 1,
                duration: 0,
                stderr: `This exec command is blocked by security policy: ${reason}`,
                workingDirectory: env.getBasePath(),
                directiveType: 'run'
              }
            );
          }
        }
      }
      
      // Pass context for exec command errors too
      output = await env.executeCommand(command, undefined, executionContext);
      
    } else if (cmdDef.type === 'commandRef') {
      // This command references another command
      const refCmdVar = env.getVariable(cmdDef.commandRef);
      if (!refCmdVar || refCmdVar.type !== 'command') {
        throw new Error(`Referenced command not found: ${cmdDef.commandRef}`);
      }
      
      // Create a new run directive for the referenced command
      const refDirective = {
        ...directive,
        values: {
          ...directive.values,
          identifier: [{ type: 'Text', content: cmdDef.commandRef }],
          args: cmdDef.commandArgs
        }
      };
      
      // Recursively evaluate the referenced command
      const result = await evaluateRun(refDirective, env);
      output = result.value;
      
    } else if (cmdDef.type === 'code') {
      // Interpolate the code template with parameters
      const tempEnv = env.createChild();
      for (const [key, value] of Object.entries(argValues)) {
        tempEnv.setParameterVariable(key, { type: 'text', value, nodeId: '', location: { line: 0, column: 0 } });
      }
      
      const code = await interpolate(cmdDef.codeTemplate, tempEnv, InterpolationContext.Default);
      output = await env.executeCode(code, cmdDef.language || 'javascript', argValues, executionContext);
    }
  } else {
    throw new Error(`Unsupported run subtype: ${directive.subtype}`);
  }
  
  // Output directives always end with a newline
  // This is the interpreter's responsibility, not the grammar's
  if (!output.endsWith('\n')) {
    output += '\n';
  }
  
  // Only add output nodes for non-embedded directives
  if (!directive.meta?.isDataValue) {
    // Create replacement text node with the output
    const replacementNode: TextNode = {
      type: 'Text',
      nodeId: `${directive.nodeId}-output`,
      content: output
    };
    
    // Add the replacement node to environment
    env.addNode(replacementNode);
  }
  
  // Return the output value
  return { value: output, env };
}